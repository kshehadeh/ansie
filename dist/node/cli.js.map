{
  "version": 3,
  "sources": ["../../node_modules/yargs/lib/platform-shims/esm.mjs", "../../node_modules/cliui/build/lib/index.js", "../../node_modules/cliui/build/lib/string-utils.js", "../../node_modules/cliui/index.mjs", "../../node_modules/escalade/sync/index.mjs", "../../node_modules/yargs/lib/platform-shims/esm.mjs", "../../node_modules/yargs-parser/build/lib/index.js", "../../node_modules/yargs-parser/build/lib/string-utils.js", "../../node_modules/yargs-parser/build/lib/tokenize-arg-string.js", "../../node_modules/yargs-parser/build/lib/yargs-parser-types.js", "../../node_modules/yargs-parser/build/lib/yargs-parser.js", "../../node_modules/yargs-parser/build/lib/index.js", "../../node_modules/yargs-parser/build/lib/index.js", "../../node_modules/yargs/lib/platform-shims/esm.mjs", "../../node_modules/yargs/build/lib/utils/process-argv.js", "../../node_modules/yargs/build/lib/yerror.js", "../../node_modules/y18n/build/lib/platform-shims/node.js", "../../node_modules/y18n/build/lib/index.js", "../../node_modules/y18n/index.mjs", "../../node_modules/yargs/lib/platform-shims/esm.mjs", "../../node_modules/yargs/build/lib/typings/common-types.js", "../../node_modules/yargs/build/lib/utils/is-promise.js", "../../node_modules/yargs/build/lib/parse-command.js", "../../node_modules/yargs/build/lib/argsert.js", "../../node_modules/yargs/build/lib/middleware.js", "../../node_modules/yargs/build/lib/utils/maybe-async-result.js", "../../node_modules/yargs/build/lib/utils/which-module.js", "../../node_modules/yargs/build/lib/command.js", "../../node_modules/yargs/build/lib/utils/obj-filter.js", "../../node_modules/yargs/build/lib/utils/set-blocking.js", "../../node_modules/yargs/build/lib/usage.js", "../../node_modules/yargs/build/lib/completion-templates.js", "../../node_modules/yargs/build/lib/completion.js", "../../node_modules/yargs/build/lib/utils/levenshtein.js", "../../node_modules/yargs/build/lib/validation.js", "../../node_modules/yargs/build/lib/utils/apply-extends.js", "../../node_modules/yargs/build/lib/utils/apply-extends.js", "../../node_modules/yargs/build/lib/yargs-factory.js", "../../node_modules/yargs/index.mjs", "../../src/cli.ts", "../../src/compiler/types.ts", "../../src/parser/generated-parser.js", "../../src/utilities/convert-markdown-to-ansie.ts", "../../src/parser/index.ts", "../../src/utilities/num.ts", "../../src/utilities/get-spacing-from-properties.ts", "../../src/utilities/render-space-attributes.ts", "../../src/utilities/escape-code-from-name.ts", "../../src/utilities/to-title-case.ts", "../../src/utilities/get-text-escape-codes-from-properties.ts", "../../src/utilities/render-text-attributes.ts", "../../src/utilities/render-node-as-markup.ts", "../../src/compiler/node/block.ts", "../../src/compiler/node/break.ts", "../../src/utilities/raw-text-mutator.ts", "../../src/compiler/node/raw.ts", "../../src/utilities/get-list-prefix-from-properties.ts", "../../src/utilities/render-list-attributes.ts", "../../src/compiler/node/list.ts", "../../src/compiler/node/inline.ts", "../../src/compiler/Compiler.ts", "../../src/themes/themes.ts", "../../src/themes/themes.ts", "../../src/compiler/compile.ts", "../../package.json", "../../src/cli.ts"],
  "sourcesContent": [
    "'use strict'\n\nimport { notStrictEqual, strictEqual } from 'assert'\nimport cliui from 'cliui'\nimport escalade from 'escalade/sync'\nimport { inspect } from 'util'\nimport { readFileSync } from 'fs'\nimport { fileURLToPath } from 'url';\nimport Parser from 'yargs-parser'\nimport { basename, dirname, extname, relative, resolve } from 'path'\nimport { getProcessArgvBin } from '../../build/lib/utils/process-argv.js'\nimport { YError } from '../../build/lib/yerror.js'\nimport y18n from 'y18n'\n\nconst REQUIRE_ERROR = 'require is not supported by ESM'\nconst REQUIRE_DIRECTORY_ERROR = 'loading a directory of commands is not supported yet for ESM'\n\nlet __dirname;\ntry {\n  __dirname = fileURLToPath(import.meta.url);\n} catch (e) {\n  __dirname = process.cwd();\n}\nconst mainFilename = __dirname.substring(0, __dirname.lastIndexOf('node_modules'));\n\nexport default {\n  assert: {\n    notStrictEqual,\n    strictEqual\n  },\n  cliui,\n  findUp: escalade,\n  getEnv: (key) => {\n    return process.env[key]\n  },\n  inspect,\n  getCallerFile: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  getProcessArgvBin,\n  mainFilename: mainFilename || process.cwd(),\n  Parser,\n  path: {\n    basename,\n    dirname,\n    extname,\n    relative,\n    resolve\n  },\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    emitWarning: (warning, type) => process.emitWarning(warning, type),\n    execPath: () => process.execPath,\n    exit: process.exit,\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: () => {\n    throw new YError(REQUIRE_ERROR)\n  },\n  requireDirectory: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  stringWidth: (str) => {\n    return [...str].length\n  },\n  y18n: y18n({\n    directory: resolve(__dirname, '../../../locales'),\n    updateFiles: false\n  })\n}\n",
  "'use strict';\nconst align = {\n    right: alignRight,\n    center: alignCenter\n};\nconst top = 0;\nconst right = 1;\nconst bottom = 2;\nconst left = 3;\nexport class UI {\n    constructor(opts) {\n        var _a;\n        this.width = opts.width;\n        this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;\n        this.rows = [];\n    }\n    span(...args) {\n        const cols = this.div(...args);\n        cols.span = true;\n    }\n    resetOutput() {\n        this.rows = [];\n    }\n    div(...args) {\n        if (args.length === 0) {\n            this.div('');\n        }\n        if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === 'string') {\n            return this.applyLayoutDSL(args[0]);\n        }\n        const cols = args.map(arg => {\n            if (typeof arg === 'string') {\n                return this.colFromString(arg);\n            }\n            return arg;\n        });\n        this.rows.push(cols);\n        return cols;\n    }\n    shouldApplyLayoutDSL(...args) {\n        return args.length === 1 && typeof args[0] === 'string' &&\n            /[\\t\\n]/.test(args[0]);\n    }\n    applyLayoutDSL(str) {\n        const rows = str.split('\\n').map(row => row.split('\\t'));\n        let leftColumnWidth = 0;\n        // simple heuristic for layout, make sure the\n        // second column lines up along the left-hand.\n        // don't allow the first column to take up more\n        // than 50% of the screen.\n        rows.forEach(columns => {\n            if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {\n                leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));\n            }\n        });\n        // generate a table:\n        //  replacing ' ' with padding calculations.\n        //  using the algorithmically generated width.\n        rows.forEach(columns => {\n            this.div(...columns.map((r, i) => {\n                return {\n                    text: r.trim(),\n                    padding: this.measurePadding(r),\n                    width: (i === 0 && columns.length > 1) ? leftColumnWidth : undefined\n                };\n            }));\n        });\n        return this.rows[this.rows.length - 1];\n    }\n    colFromString(text) {\n        return {\n            text,\n            padding: this.measurePadding(text)\n        };\n    }\n    measurePadding(str) {\n        // measure padding without ansi escape codes\n        const noAnsi = mixin.stripAnsi(str);\n        return [0, noAnsi.match(/\\s*$/)[0].length, 0, noAnsi.match(/^\\s*/)[0].length];\n    }\n    toString() {\n        const lines = [];\n        this.rows.forEach(row => {\n            this.rowToString(row, lines);\n        });\n        // don't display any lines with the\n        // hidden flag set.\n        return lines\n            .filter(line => !line.hidden)\n            .map(line => line.text)\n            .join('\\n');\n    }\n    rowToString(row, lines) {\n        this.rasterize(row).forEach((rrow, r) => {\n            let str = '';\n            rrow.forEach((col, c) => {\n                const { width } = row[c]; // the width with padding.\n                const wrapWidth = this.negatePadding(row[c]); // the width without padding.\n                let ts = col; // temporary string used during alignment/padding.\n                if (wrapWidth > mixin.stringWidth(col)) {\n                    ts += ' '.repeat(wrapWidth - mixin.stringWidth(col));\n                }\n                // align the string within its column.\n                if (row[c].align && row[c].align !== 'left' && this.wrap) {\n                    const fn = align[row[c].align];\n                    ts = fn(ts, wrapWidth);\n                    if (mixin.stringWidth(ts) < wrapWidth) {\n                        ts += ' '.repeat((width || 0) - mixin.stringWidth(ts) - 1);\n                    }\n                }\n                // apply border and padding to string.\n                const padding = row[c].padding || [0, 0, 0, 0];\n                if (padding[left]) {\n                    str += ' '.repeat(padding[left]);\n                }\n                str += addBorder(row[c], ts, '| ');\n                str += ts;\n                str += addBorder(row[c], ts, ' |');\n                if (padding[right]) {\n                    str += ' '.repeat(padding[right]);\n                }\n                // if prior row is span, try to render the\n                // current row on the prior line.\n                if (r === 0 && lines.length > 0) {\n                    str = this.renderInline(str, lines[lines.length - 1]);\n                }\n            });\n            // remove trailing whitespace.\n            lines.push({\n                text: str.replace(/ +$/, ''),\n                span: row.span\n            });\n        });\n        return lines;\n    }\n    // if the full 'source' can render in\n    // the target line, do so.\n    renderInline(source, previousLine) {\n        const match = source.match(/^ */);\n        const leadingWhitespace = match ? match[0].length : 0;\n        const target = previousLine.text;\n        const targetTextWidth = mixin.stringWidth(target.trimRight());\n        if (!previousLine.span) {\n            return source;\n        }\n        // if we're not applying wrapping logic,\n        // just always append to the span.\n        if (!this.wrap) {\n            previousLine.hidden = true;\n            return target + source;\n        }\n        if (leadingWhitespace < targetTextWidth) {\n            return source;\n        }\n        previousLine.hidden = true;\n        return target.trimRight() + ' '.repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();\n    }\n    rasterize(row) {\n        const rrows = [];\n        const widths = this.columnWidths(row);\n        let wrapped;\n        // word wrap all columns, and create\n        // a data-structure that is easy to rasterize.\n        row.forEach((col, c) => {\n            // leave room for left and right padding.\n            col.width = widths[c];\n            if (this.wrap) {\n                wrapped = mixin.wrap(col.text, this.negatePadding(col), { hard: true }).split('\\n');\n            }\n            else {\n                wrapped = col.text.split('\\n');\n            }\n            if (col.border) {\n                wrapped.unshift('.' + '-'.repeat(this.negatePadding(col) + 2) + '.');\n                wrapped.push(\"'\" + '-'.repeat(this.negatePadding(col) + 2) + \"'\");\n            }\n            // add top and bottom padding.\n            if (col.padding) {\n                wrapped.unshift(...new Array(col.padding[top] || 0).fill(''));\n                wrapped.push(...new Array(col.padding[bottom] || 0).fill(''));\n            }\n            wrapped.forEach((str, r) => {\n                if (!rrows[r]) {\n                    rrows.push([]);\n                }\n                const rrow = rrows[r];\n                for (let i = 0; i < c; i++) {\n                    if (rrow[i] === undefined) {\n                        rrow.push('');\n                    }\n                }\n                rrow.push(str);\n            });\n        });\n        return rrows;\n    }\n    negatePadding(col) {\n        let wrapWidth = col.width || 0;\n        if (col.padding) {\n            wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);\n        }\n        if (col.border) {\n            wrapWidth -= 4;\n        }\n        return wrapWidth;\n    }\n    columnWidths(row) {\n        if (!this.wrap) {\n            return row.map(col => {\n                return col.width || mixin.stringWidth(col.text);\n            });\n        }\n        let unset = row.length;\n        let remainingWidth = this.width;\n        // column widths can be set in config.\n        const widths = row.map(col => {\n            if (col.width) {\n                unset--;\n                remainingWidth -= col.width;\n                return col.width;\n            }\n            return undefined;\n        });\n        // any unset widths should be calculated.\n        const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;\n        return widths.map((w, i) => {\n            if (w === undefined) {\n                return Math.max(unsetWidth, _minWidth(row[i]));\n            }\n            return w;\n        });\n    }\n}\nfunction addBorder(col, ts, style) {\n    if (col.border) {\n        if (/[.']-+[.']/.test(ts)) {\n            return '';\n        }\n        if (ts.trim().length !== 0) {\n            return style;\n        }\n        return '  ';\n    }\n    return '';\n}\n// calculates the minimum width of\n// a column, based on padding preferences.\nfunction _minWidth(col) {\n    const padding = col.padding || [];\n    const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);\n    if (col.border) {\n        return minWidth + 4;\n    }\n    return minWidth;\n}\nfunction getWindowWidth() {\n    /* istanbul ignore next: depends on terminal */\n    if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n        return process.stdout.columns;\n    }\n    return 80;\n}\nfunction alignRight(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    if (strWidth < width) {\n        return ' '.repeat(width - strWidth) + str;\n    }\n    return str;\n}\nfunction alignCenter(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    /* istanbul ignore next */\n    if (strWidth >= width) {\n        return str;\n    }\n    return ' '.repeat((width - strWidth) >> 1) + str;\n}\nlet mixin;\nexport function cliui(opts, _mixin) {\n    mixin = _mixin;\n    return new UI({\n        width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),\n        wrap: opts === null || opts === void 0 ? void 0 : opts.wrap\n    });\n}\n",
  "// Minimal replacement for ansi string helpers \"wrap-ansi\" and \"strip-ansi\".\n// to facilitate ESM and Deno modules.\n// TODO: look at porting https://www.npmjs.com/package/wrap-ansi to ESM.\n// The npm application\n// Copyright (c) npm, Inc. and Contributors\n// Licensed on the terms of The Artistic License 2.0\n// See: https://github.com/npm/cli/blob/4c65cd952bc8627811735bea76b9b110cc4fc80e/lib/utils/ansi-trim.js\nconst ansi = new RegExp('\\x1b(?:\\\\[(?:\\\\d+[ABCDEFGJKSTm]|\\\\d+;\\\\d+[Hfm]|' +\n    '\\\\d+;\\\\d+;\\\\d+m|6n|s|u|\\\\?25[lh])|\\\\w)', 'g');\nexport function stripAnsi(str) {\n    return str.replace(ansi, '');\n}\nexport function wrap(str, width) {\n    const [start, end] = str.match(ansi) || ['', ''];\n    str = stripAnsi(str);\n    let wrapped = '';\n    for (let i = 0; i < str.length; i++) {\n        if (i !== 0 && (i % width) === 0) {\n            wrapped += '\\n';\n        }\n        wrapped += str.charAt(i);\n    }\n    if (start && end) {\n        wrapped = `${start}${wrapped}${end}`;\n    }\n    return wrapped;\n}\n",
  "// Bootstrap cliui with CommonJS dependencies:\nimport { cliui } from './build/lib/index.js'\nimport { wrap, stripAnsi } from './build/lib/string-utils.js'\n\nexport default function ui (opts) {\n  return cliui(opts, {\n    stringWidth: (str) => {\n      return [...str].length\n    },\n    stripAnsi,\n    wrap\n  })\n}\n",
  "import { dirname, resolve } from 'path';\nimport { readdirSync, statSync } from 'fs';\n\nexport default function (start, callback) {\n\tlet dir = resolve('.', start);\n\tlet tmp, stats = statSync(dir);\n\n\tif (!stats.isDirectory()) {\n\t\tdir = dirname(dir);\n\t}\n\n\twhile (true) {\n\t\ttmp = callback(dir, readdirSync(dir));\n\t\tif (tmp) return resolve(dir, tmp);\n\t\tdir = dirname(tmp = dir);\n\t\tif (tmp === dir) break;\n\t}\n}\n",
  "'use strict'\n\nimport { notStrictEqual, strictEqual } from 'assert'\nimport cliui from 'cliui'\nimport escalade from 'escalade/sync'\nimport { inspect } from 'util'\nimport { readFileSync } from 'fs'\nimport { fileURLToPath } from 'url';\nimport Parser from 'yargs-parser'\nimport { basename, dirname, extname, relative, resolve } from 'path'\nimport { getProcessArgvBin } from '../../build/lib/utils/process-argv.js'\nimport { YError } from '../../build/lib/yerror.js'\nimport y18n from 'y18n'\n\nconst REQUIRE_ERROR = 'require is not supported by ESM'\nconst REQUIRE_DIRECTORY_ERROR = 'loading a directory of commands is not supported yet for ESM'\n\nlet __dirname;\ntry {\n  __dirname = fileURLToPath(import.meta.url);\n} catch (e) {\n  __dirname = process.cwd();\n}\nconst mainFilename = __dirname.substring(0, __dirname.lastIndexOf('node_modules'));\n\nexport default {\n  assert: {\n    notStrictEqual,\n    strictEqual\n  },\n  cliui,\n  findUp: escalade,\n  getEnv: (key) => {\n    return process.env[key]\n  },\n  inspect,\n  getCallerFile: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  getProcessArgvBin,\n  mainFilename: mainFilename || process.cwd(),\n  Parser,\n  path: {\n    basename,\n    dirname,\n    extname,\n    relative,\n    resolve\n  },\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    emitWarning: (warning, type) => process.emitWarning(warning, type),\n    execPath: () => process.execPath,\n    exit: process.exit,\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: () => {\n    throw new YError(REQUIRE_ERROR)\n  },\n  requireDirectory: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  stringWidth: (str) => {\n    return [...str].length\n  },\n  y18n: y18n({\n    directory: resolve(__dirname, '../../../locales'),\n    updateFiles: false\n  })\n}\n",
  "/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nvar _a, _b, _c;\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format,\n    normalize,\n    resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse(readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;\n",
  "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport function camelCase(str) {\n    // Handle the case where an argument is provided as camel case, e.g., fooBar.\n    // by ensuring that the string isn't already mixed case:\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n    if (!isCamelCase) {\n        str = str.toLowerCase();\n    }\n    if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n        return str;\n    }\n    else {\n        let camelcase = '';\n        let nextChrUpper = false;\n        const leadingHyphens = str.match(/^-+/);\n        for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n            let chr = str.charAt(i);\n            if (nextChrUpper) {\n                nextChrUpper = false;\n                chr = chr.toUpperCase();\n            }\n            if (i !== 0 && (chr === '-' || chr === '_')) {\n                nextChrUpper = true;\n            }\n            else if (chr !== '-' && chr !== '_') {\n                camelcase += chr;\n            }\n        }\n        return camelcase;\n    }\n}\nexport function decamelize(str, joinString) {\n    const lowercase = str.toLowerCase();\n    joinString = joinString || '-';\n    let notCamelcase = '';\n    for (let i = 0; i < str.length; i++) {\n        const chrLower = lowercase.charAt(i);\n        const chrString = str.charAt(i);\n        if (chrLower !== chrString && i > 0) {\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n        }\n        else {\n            notCamelcase += chrString;\n        }\n    }\n    return notCamelcase;\n}\nexport function looksLikeNumber(x) {\n    if (x === null || x === undefined)\n        return false;\n    // if loaded from config, may already be a number.\n    if (typeof x === 'number')\n        return true;\n    // hexadecimal.\n    if (/^0x[0-9a-f]+$/i.test(x))\n        return true;\n    // don't treat 0123 as a number; as it drops the leading '0'.\n    if (/^0[^.]/.test(x))\n        return false;\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n",
  "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\n// take an un-split argv string and tokenize it.\nexport function tokenizeArgString(argString) {\n    if (Array.isArray(argString)) {\n        return argString.map(e => typeof e !== 'string' ? e + '' : e);\n    }\n    argString = argString.trim();\n    let i = 0;\n    let prevC = null;\n    let c = null;\n    let opening = null;\n    const args = [];\n    for (let ii = 0; ii < argString.length; ii++) {\n        prevC = c;\n        c = argString.charAt(ii);\n        // split on spaces unless we're in quotes.\n        if (c === ' ' && !opening) {\n            if (!(prevC === ' ')) {\n                i++;\n            }\n            continue;\n        }\n        // don't split the string if we're in matching\n        // opening or closing single and double quotes.\n        if (c === opening) {\n            opening = null;\n        }\n        else if ((c === \"'\" || c === '\"') && !opening) {\n            opening = c;\n        }\n        if (!args[i])\n            args[i] = '';\n        args[i] += c;\n    }\n    return args;\n}\n",
  "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport var DefaultValuesForTypeKey;\n(function (DefaultValuesForTypeKey) {\n    DefaultValuesForTypeKey[\"BOOLEAN\"] = \"boolean\";\n    DefaultValuesForTypeKey[\"STRING\"] = \"string\";\n    DefaultValuesForTypeKey[\"NUMBER\"] = \"number\";\n    DefaultValuesForTypeKey[\"ARRAY\"] = \"array\";\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\n",
  "/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nimport { tokenizeArgString } from './tokenize-arg-string.js';\nimport { DefaultValuesForTypeKey } from './yargs-parser-types.js';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nlet mixin;\nexport class YargsParser {\n    constructor(_mixin) {\n        mixin = _mixin;\n    }\n    parse(argsInput, options) {\n        const opts = Object.assign({\n            alias: undefined,\n            array: undefined,\n            boolean: undefined,\n            config: undefined,\n            configObjects: undefined,\n            configuration: undefined,\n            coerce: undefined,\n            count: undefined,\n            default: undefined,\n            envPrefix: undefined,\n            narg: undefined,\n            normalize: undefined,\n            string: undefined,\n            number: undefined,\n            __: undefined,\n            key: undefined\n        }, options);\n        // allow a string argument to be passed in rather\n        // than an argv array.\n        const args = tokenizeArgString(argsInput);\n        // tokenizeArgString adds extra quotes to args if argsInput is a string\n        // only strip those extra quotes in processValue if argsInput is a string\n        const inputIsString = typeof argsInput === 'string';\n        // aliases might have transitive relationships, normalize this.\n        const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n        const configuration = Object.assign({\n            'boolean-negation': true,\n            'camel-case-expansion': true,\n            'combine-arrays': false,\n            'dot-notation': true,\n            'duplicate-arguments-array': true,\n            'flatten-duplicate-arrays': true,\n            'greedy-arrays': true,\n            'halt-at-non-option': false,\n            'nargs-eats-options': false,\n            'negation-prefix': 'no-',\n            'parse-numbers': true,\n            'parse-positional-numbers': true,\n            'populate--': false,\n            'set-placeholder-key': false,\n            'short-option-groups': true,\n            'strip-aliased': false,\n            'strip-dashed': false,\n            'unknown-options-as-args': false\n        }, opts.configuration);\n        const defaults = Object.assign(Object.create(null), opts.default);\n        const configObjects = opts.configObjects || [];\n        const envPrefix = opts.envPrefix;\n        const notFlagsOption = configuration['populate--'];\n        const notFlagsArgv = notFlagsOption ? '--' : '_';\n        const newAliases = Object.create(null);\n        const defaulted = Object.create(null);\n        // allow a i18n handler to be passed in, default to a fake one (util.format).\n        const __ = opts.__ || mixin.format;\n        const flags = {\n            aliases: Object.create(null),\n            arrays: Object.create(null),\n            bools: Object.create(null),\n            strings: Object.create(null),\n            numbers: Object.create(null),\n            counts: Object.create(null),\n            normalize: Object.create(null),\n            configs: Object.create(null),\n            nargs: Object.create(null),\n            coercions: Object.create(null),\n            keys: []\n        };\n        const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n        const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n        [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n            const key = typeof opt === 'object' ? opt.key : opt;\n            // assign to flags[bools|strings|numbers]\n            const assignment = Object.keys(opt).map(function (key) {\n                const arrayFlagKeys = {\n                    boolean: 'bools',\n                    string: 'strings',\n                    number: 'numbers'\n                };\n                return arrayFlagKeys[key];\n            }).filter(Boolean).pop();\n            // assign key to be coerced\n            if (assignment) {\n                flags[assignment][key] = true;\n            }\n            flags.arrays[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n            flags.bools[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n            flags.strings[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n            flags.numbers[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n            flags.counts[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n            flags.normalize[key] = true;\n            flags.keys.push(key);\n        });\n        if (typeof opts.narg === 'object') {\n            Object.entries(opts.narg).forEach(([key, value]) => {\n                if (typeof value === 'number') {\n                    flags.nargs[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.coerce === 'object') {\n            Object.entries(opts.coerce).forEach(([key, value]) => {\n                if (typeof value === 'function') {\n                    flags.coercions[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.config !== 'undefined') {\n            if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n                ;\n                [].concat(opts.config).filter(Boolean).forEach(function (key) {\n                    flags.configs[key] = true;\n                });\n            }\n            else if (typeof opts.config === 'object') {\n                Object.entries(opts.config).forEach(([key, value]) => {\n                    if (typeof value === 'boolean' || typeof value === 'function') {\n                        flags.configs[key] = value;\n                    }\n                });\n            }\n        }\n        // create a lookup table that takes into account all\n        // combinations of aliases: {f: ['foo'], foo: ['f']}\n        extendAliases(opts.key, aliases, opts.default, flags.arrays);\n        // apply default values to all aliases.\n        Object.keys(defaults).forEach(function (key) {\n            (flags.aliases[key] || []).forEach(function (alias) {\n                defaults[alias] = defaults[key];\n            });\n        });\n        let error = null;\n        checkConfiguration();\n        let notFlags = [];\n        const argv = Object.assign(Object.create(null), { _: [] });\n        // TODO(bcoe): for the first pass at removing object prototype  we didn't\n        // remove all prototypes from objects returned by this API, we might want\n        // to gradually move towards doing so.\n        const argvReturn = {};\n        for (let i = 0; i < args.length; i++) {\n            const arg = args[i];\n            const truncatedArg = arg.replace(/^-{3,}/, '---');\n            let broken;\n            let key;\n            let letters;\n            let m;\n            let next;\n            let value;\n            // any unknown option (except for end-of-options, \"--\")\n            if (arg !== '--' && /^-/.test(arg) && isUnknownOptionAsArg(arg)) {\n                pushPositional(arg);\n                // ---, ---=, ----, etc,\n            }\n            else if (truncatedArg.match(/^---+(=|$)/)) {\n                // options without key name are invalid.\n                pushPositional(arg);\n                continue;\n                // -- separated by =\n            }\n            else if (arg.match(/^--.+=/) || (!configuration['short-option-groups'] && arg.match(/^-.+=/))) {\n                // Using [\\s\\S] instead of . because js doesn't support the\n                // 'dotall' regex modifier. See:\n                // http://stackoverflow.com/a/1068308/13216\n                m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n                // arrays format = '--f=a b c'\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    if (checkAllAliases(m[1], flags.arrays)) {\n                        i = eatArray(i, m[1], args, m[2]);\n                    }\n                    else if (checkAllAliases(m[1], flags.nargs) !== false) {\n                        // nargs format = '--f=monkey washing cat'\n                        i = eatNargs(i, m[1], args, m[2]);\n                    }\n                    else {\n                        setArg(m[1], m[2], true);\n                    }\n                }\n            }\n            else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n                m = arg.match(negatedBoolean);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n                }\n                // -- separated by space.\n            }\n            else if (arg.match(/^--.+/) || (!configuration['short-option-groups'] && arg.match(/^-[^-]+/))) {\n                m = arg.match(/^--?(.+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '--foo a b c'\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '--foo a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!next.match(/^-/) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n                // dot-notation flag separated by '='.\n            }\n            else if (arg.match(/^-.\\..+=/)) {\n                m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    setArg(m[1], m[2]);\n                }\n                // dot-notation flag separated by space.\n            }\n            else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n                next = args[i + 1];\n                m = arg.match(/^-(.\\..+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (next !== undefined && !next.match(/^-/) &&\n                        !checkAllAliases(key, flags.bools) &&\n                        !checkAllAliases(key, flags.counts)) {\n                        setArg(key, next);\n                        i++;\n                    }\n                    else {\n                        setArg(key, defaultValue(key));\n                    }\n                }\n            }\n            else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n                letters = arg.slice(1, -1).split('');\n                broken = false;\n                for (let j = 0; j < letters.length; j++) {\n                    next = arg.slice(j + 2);\n                    if (letters[j + 1] && letters[j + 1] === '=') {\n                        value = arg.slice(j + 3);\n                        key = letters[j];\n                        if (checkAllAliases(key, flags.arrays)) {\n                            // array format = '-f=a b c'\n                            i = eatArray(i, key, args, value);\n                        }\n                        else if (checkAllAliases(key, flags.nargs) !== false) {\n                            // nargs format = '-f=monkey washing cat'\n                            i = eatNargs(i, key, args, value);\n                        }\n                        else {\n                            setArg(key, value);\n                        }\n                        broken = true;\n                        break;\n                    }\n                    if (next === '-') {\n                        setArg(letters[j], next);\n                        continue;\n                    }\n                    // current letter is an alphabetic character and next value is a number\n                    if (/[A-Za-z]/.test(letters[j]) &&\n                        /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) &&\n                        checkAllAliases(next, flags.bools) === false) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    else {\n                        setArg(letters[j], defaultValue(letters[j]));\n                    }\n                }\n                key = arg.slice(-1)[0];\n                if (!broken && key !== '-') {\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '-f a b c'\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '-f a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            }\n            else if (arg.match(/^-[0-9]$/) &&\n                arg.match(negative) &&\n                checkAllAliases(arg.slice(1), flags.bools)) {\n                // single-digit boolean alias, e.g: xargs -0\n                key = arg.slice(1);\n                setArg(key, defaultValue(key));\n            }\n            else if (arg === '--') {\n                notFlags = args.slice(i + 1);\n                break;\n            }\n            else if (configuration['halt-at-non-option']) {\n                notFlags = args.slice(i);\n                break;\n            }\n            else {\n                pushPositional(arg);\n            }\n        }\n        // order of precedence:\n        // 1. command line arg\n        // 2. value from env var\n        // 3. value from config file\n        // 4. value from config objects\n        // 5. configured default value\n        applyEnvVars(argv, true); // special case: check env vars that point to config file\n        applyEnvVars(argv, false);\n        setConfig(argv);\n        setConfigObjects();\n        applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n        applyCoercions(argv);\n        if (configuration['set-placeholder-key'])\n            setPlaceholderKeys(argv);\n        // for any counts either not in args or without an explicit default, set to 0\n        Object.keys(flags.counts).forEach(function (key) {\n            if (!hasKey(argv, key.split('.')))\n                setArg(key, 0);\n        });\n        // '--' defaults to undefined.\n        if (notFlagsOption && notFlags.length)\n            argv[notFlagsArgv] = [];\n        notFlags.forEach(function (key) {\n            argv[notFlagsArgv].push(key);\n        });\n        if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n            Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n                delete argv[key];\n            });\n        }\n        if (configuration['strip-aliased']) {\n            ;\n            [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n                if (configuration['camel-case-expansion'] && alias.includes('-')) {\n                    delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n                }\n                delete argv[alias];\n            });\n        }\n        // Push argument into positional array, applying numeric coercion:\n        function pushPositional(arg) {\n            const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n            if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n                argv._.push(maybeCoercedNumber);\n            }\n        }\n        // how many arguments should we consume, based\n        // on the nargs option?\n        function eatNargs(i, key, args, argAfterEqualSign) {\n            let ii;\n            let toEat = checkAllAliases(key, flags.nargs);\n            // NaN has a special meaning for the array type, indicating that one or\n            // more values are expected.\n            toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n            if (toEat === 0) {\n                if (!isUndefined(argAfterEqualSign)) {\n                    error = Error(__('Argument unexpected for: %s', key));\n                }\n                setArg(key, defaultValue(key));\n                return i;\n            }\n            let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n            if (configuration['nargs-eats-options']) {\n                // classic behavior, yargs eats positional and dash arguments.\n                if (args.length - (i + 1) + available < toEat) {\n                    error = Error(__('Not enough arguments following: %s', key));\n                }\n                available = toEat;\n            }\n            else {\n                // nargs will not consume flag arguments, e.g., -abc, --foo,\n                // and terminates when one is observed.\n                for (ii = i + 1; ii < args.length; ii++) {\n                    if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii]))\n                        available++;\n                    else\n                        break;\n                }\n                if (available < toEat)\n                    error = Error(__('Not enough arguments following: %s', key));\n            }\n            let consumed = Math.min(available, toEat);\n            if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n                setArg(key, argAfterEqualSign);\n                consumed--;\n            }\n            for (ii = i + 1; ii < (consumed + i + 1); ii++) {\n                setArg(key, args[ii]);\n            }\n            return (i + consumed);\n        }\n        // if an option is an array, eat all non-hyphenated arguments\n        // following it... YUM!\n        // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n        function eatArray(i, key, args, argAfterEqualSign) {\n            let argsToSet = [];\n            let next = argAfterEqualSign || args[i + 1];\n            // If both array and nargs are configured, enforce the nargs count:\n            const nargsCount = checkAllAliases(key, flags.nargs);\n            if (checkAllAliases(key, flags.bools) && !(/^(true|false)$/.test(next))) {\n                argsToSet.push(true);\n            }\n            else if (isUndefined(next) ||\n                (isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))) {\n                // for keys without value ==> argsToSet remains an empty []\n                // set user default value, if available\n                if (defaults[key] !== undefined) {\n                    const defVal = defaults[key];\n                    argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n                }\n            }\n            else {\n                // value in --option=value is eaten as is\n                if (!isUndefined(argAfterEqualSign)) {\n                    argsToSet.push(processValue(key, argAfterEqualSign, true));\n                }\n                for (let ii = i + 1; ii < args.length; ii++) {\n                    if ((!configuration['greedy-arrays'] && argsToSet.length > 0) ||\n                        (nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount))\n                        break;\n                    next = args[ii];\n                    if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))\n                        break;\n                    i = ii;\n                    argsToSet.push(processValue(key, next, inputIsString));\n                }\n            }\n            // If both array and nargs are configured, create an error if less than\n            // nargs positionals were found. NaN has special meaning, indicating\n            // that at least one value is required (more are okay).\n            if (typeof nargsCount === 'number' && ((nargsCount && argsToSet.length < nargsCount) ||\n                (isNaN(nargsCount) && argsToSet.length === 0))) {\n                error = Error(__('Not enough arguments following: %s', key));\n            }\n            setArg(key, argsToSet);\n            return i;\n        }\n        function setArg(key, val, shouldStripQuotes = inputIsString) {\n            if (/-/.test(key) && configuration['camel-case-expansion']) {\n                const alias = key.split('.').map(function (prop) {\n                    return camelCase(prop);\n                }).join('.');\n                addNewAlias(key, alias);\n            }\n            const value = processValue(key, val, shouldStripQuotes);\n            const splitKey = key.split('.');\n            setKey(argv, splitKey, value);\n            // handle populating aliases of the full key\n            if (flags.aliases[key]) {\n                flags.aliases[key].forEach(function (x) {\n                    const keyProperties = x.split('.');\n                    setKey(argv, keyProperties, value);\n                });\n            }\n            // handle populating aliases of the first element of the dot-notation key\n            if (splitKey.length > 1 && configuration['dot-notation']) {\n                ;\n                (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n                    let keyProperties = x.split('.');\n                    // expand alias with nested objects in key\n                    const a = [].concat(splitKey);\n                    a.shift(); // nuke the old key.\n                    keyProperties = keyProperties.concat(a);\n                    // populate alias only if is not already an alias of the full key\n                    // (already populated above)\n                    if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n                        setKey(argv, keyProperties, value);\n                    }\n                });\n            }\n            // Set normalize getter and setter when key is in 'normalize' but isn't an array\n            if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n                const keys = [key].concat(flags.aliases[key] || []);\n                keys.forEach(function (key) {\n                    Object.defineProperty(argvReturn, key, {\n                        enumerable: true,\n                        get() {\n                            return val;\n                        },\n                        set(value) {\n                            val = typeof value === 'string' ? mixin.normalize(value) : value;\n                        }\n                    });\n                });\n            }\n        }\n        function addNewAlias(key, alias) {\n            if (!(flags.aliases[key] && flags.aliases[key].length)) {\n                flags.aliases[key] = [alias];\n                newAliases[alias] = true;\n            }\n            if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n                addNewAlias(alias, key);\n            }\n        }\n        function processValue(key, val, shouldStripQuotes) {\n            // strings may be quoted, clean this up as we assign values.\n            if (shouldStripQuotes) {\n                val = stripQuotes(val);\n            }\n            // handle parsing boolean arguments --foo=true --bar false.\n            if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n                if (typeof val === 'string')\n                    val = val === 'true';\n            }\n            let value = Array.isArray(val)\n                ? val.map(function (v) { return maybeCoerceNumber(key, v); })\n                : maybeCoerceNumber(key, val);\n            // increment a count given as arg (either no value or value parsed as boolean)\n            if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n                value = increment();\n            }\n            // Set normalized value when key is in 'normalize' and in 'arrays'\n            if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n                if (Array.isArray(val))\n                    value = val.map((val) => { return mixin.normalize(val); });\n                else\n                    value = mixin.normalize(val);\n            }\n            return value;\n        }\n        function maybeCoerceNumber(key, value) {\n            if (!configuration['parse-positional-numbers'] && key === '_')\n                return value;\n            if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n                const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && (Number.isSafeInteger(Math.floor(parseFloat(`${value}`))));\n                if (shouldCoerceNumber || (!isUndefined(value) && checkAllAliases(key, flags.numbers))) {\n                    value = Number(value);\n                }\n            }\n            return value;\n        }\n        // set args from config.json file, this should be\n        // applied last so that defaults can be applied.\n        function setConfig(argv) {\n            const configLookup = Object.create(null);\n            // expand defaults/aliases, in-case any happen to reference\n            // the config.json file.\n            applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n            Object.keys(flags.configs).forEach(function (configKey) {\n                const configPath = argv[configKey] || configLookup[configKey];\n                if (configPath) {\n                    try {\n                        let config = null;\n                        const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n                        const resolveConfig = flags.configs[configKey];\n                        if (typeof resolveConfig === 'function') {\n                            try {\n                                config = resolveConfig(resolvedConfigPath);\n                            }\n                            catch (e) {\n                                config = e;\n                            }\n                            if (config instanceof Error) {\n                                error = config;\n                                return;\n                            }\n                        }\n                        else {\n                            config = mixin.require(resolvedConfigPath);\n                        }\n                        setConfigObject(config);\n                    }\n                    catch (ex) {\n                        // Deno will receive a PermissionDenied error if an attempt is\n                        // made to load config without the --allow-read flag:\n                        if (ex.name === 'PermissionDenied')\n                            error = ex;\n                        else if (argv[configKey])\n                            error = Error(__('Invalid JSON config file: %s', configPath));\n                    }\n                }\n            });\n        }\n        // set args from config object.\n        // it recursively checks nested objects.\n        function setConfigObject(config, prev) {\n            Object.keys(config).forEach(function (key) {\n                const value = config[key];\n                const fullKey = prev ? prev + '.' + key : key;\n                // if the value is an inner object and we have dot-notation\n                // enabled, treat inner objects in config the same as\n                // heavily nested dot notations (foo.bar.apple).\n                if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n                    // if the value is an object but not an array, check nested object\n                    setConfigObject(value, fullKey);\n                }\n                else {\n                    // setting arguments via CLI takes precedence over\n                    // values within the config file.\n                    if (!hasKey(argv, fullKey.split('.')) || (checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays'])) {\n                        setArg(fullKey, value);\n                    }\n                }\n            });\n        }\n        // set all config objects passed in opts\n        function setConfigObjects() {\n            if (typeof configObjects !== 'undefined') {\n                configObjects.forEach(function (configObject) {\n                    setConfigObject(configObject);\n                });\n            }\n        }\n        function applyEnvVars(argv, configOnly) {\n            if (typeof envPrefix === 'undefined')\n                return;\n            const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n            const env = mixin.env();\n            Object.keys(env).forEach(function (envVar) {\n                if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n                    // get array of nested keys and convert them to camel case\n                    const keys = envVar.split('__').map(function (key, i) {\n                        if (i === 0) {\n                            key = key.substring(prefix.length);\n                        }\n                        return camelCase(key);\n                    });\n                    if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && !hasKey(argv, keys)) {\n                        setArg(keys.join('.'), env[envVar]);\n                    }\n                }\n            });\n        }\n        function applyCoercions(argv) {\n            let coerce;\n            const applied = new Set();\n            Object.keys(argv).forEach(function (key) {\n                if (!applied.has(key)) { // If we haven't already coerced this option via one of its aliases\n                    coerce = checkAllAliases(key, flags.coercions);\n                    if (typeof coerce === 'function') {\n                        try {\n                            const value = maybeCoerceNumber(key, coerce(argv[key]));\n                            ([].concat(flags.aliases[key] || [], key)).forEach(ali => {\n                                applied.add(ali);\n                                argv[ali] = value;\n                            });\n                        }\n                        catch (err) {\n                            error = err;\n                        }\n                    }\n                }\n            });\n        }\n        function setPlaceholderKeys(argv) {\n            flags.keys.forEach((key) => {\n                // don't set placeholder keys for dot notation options 'foo.bar'.\n                if (~key.indexOf('.'))\n                    return;\n                if (typeof argv[key] === 'undefined')\n                    argv[key] = undefined;\n            });\n            return argv;\n        }\n        function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n            Object.keys(defaults).forEach(function (key) {\n                if (!hasKey(obj, key.split('.'))) {\n                    setKey(obj, key.split('.'), defaults[key]);\n                    if (canLog)\n                        defaulted[key] = true;\n                    (aliases[key] || []).forEach(function (x) {\n                        if (hasKey(obj, x.split('.')))\n                            return;\n                        setKey(obj, x.split('.'), defaults[key]);\n                    });\n                }\n            });\n        }\n        function hasKey(obj, keys) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                o = (o[key] || {});\n            });\n            const key = keys[keys.length - 1];\n            if (typeof o !== 'object')\n                return false;\n            else\n                return key in o;\n        }\n        function setKey(obj, keys, value) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                // TODO(bcoe): in the next major version of yargs, switch to\n                // Object.create(null) for dot notation:\n                key = sanitizeKey(key);\n                if (typeof o === 'object' && o[key] === undefined) {\n                    o[key] = {};\n                }\n                if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n                    // ensure that o[key] is an array, and that the last item is an empty object.\n                    if (Array.isArray(o[key])) {\n                        o[key].push({});\n                    }\n                    else {\n                        o[key] = [o[key], {}];\n                    }\n                    // we want to update the empty object at the end of the o[key] array, so set o to that object\n                    o = o[key][o[key].length - 1];\n                }\n                else {\n                    o = o[key];\n                }\n            });\n            // TODO(bcoe): in the next major version of yargs, switch to\n            // Object.create(null) for dot notation:\n            const key = sanitizeKey(keys[keys.length - 1]);\n            const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n            const isValueArray = Array.isArray(value);\n            let duplicate = configuration['duplicate-arguments-array'];\n            // nargs has higher priority than duplicate\n            if (!duplicate && checkAllAliases(key, flags.nargs)) {\n                duplicate = true;\n                if ((!isUndefined(o[key]) && flags.nargs[key] === 1) || (Array.isArray(o[key]) && o[key].length === flags.nargs[key])) {\n                    o[key] = undefined;\n                }\n            }\n            if (value === increment()) {\n                o[key] = increment(o[key]);\n            }\n            else if (Array.isArray(o[key])) {\n                if (duplicate && isTypeArray && isValueArray) {\n                    o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n                }\n                else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n                    o[key] = value;\n                }\n                else {\n                    o[key] = o[key].concat([value]);\n                }\n            }\n            else if (o[key] === undefined && isTypeArray) {\n                o[key] = isValueArray ? value : [value];\n            }\n            else if (duplicate && !(o[key] === undefined ||\n                checkAllAliases(key, flags.counts) ||\n                checkAllAliases(key, flags.bools))) {\n                o[key] = [o[key], value];\n            }\n            else {\n                o[key] = value;\n            }\n        }\n        // extend the aliases list with inferred aliases.\n        function extendAliases(...args) {\n            args.forEach(function (obj) {\n                Object.keys(obj || {}).forEach(function (key) {\n                    // short-circuit if we've already added a key\n                    // to the aliases array, for example it might\n                    // exist in both 'opts.default' and 'opts.key'.\n                    if (flags.aliases[key])\n                        return;\n                    flags.aliases[key] = [].concat(aliases[key] || []);\n                    // For \"--option-name\", also set argv.optionName\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (/-/.test(x) && configuration['camel-case-expansion']) {\n                            const c = camelCase(x);\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    // For \"--optionName\", also set argv['option-name']\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n                            const c = decamelize(x, '-');\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].forEach(function (x) {\n                        flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n                            return x !== y;\n                        }));\n                    });\n                });\n            });\n        }\n        function checkAllAliases(key, flag) {\n            const toCheck = [].concat(flags.aliases[key] || [], key);\n            const keys = Object.keys(flag);\n            const setAlias = toCheck.find(key => keys.includes(key));\n            return setAlias ? flag[setAlias] : false;\n        }\n        function hasAnyFlag(key) {\n            const flagsKeys = Object.keys(flags);\n            const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n            return toCheck.some(function (flag) {\n                return Array.isArray(flag) ? flag.includes(key) : flag[key];\n            });\n        }\n        function hasFlagsMatching(arg, ...patterns) {\n            const toCheck = [].concat(...patterns);\n            return toCheck.some(function (pattern) {\n                const match = arg.match(pattern);\n                return match && hasAnyFlag(match[1]);\n            });\n        }\n        // based on a simplified version of the short flag group parsing logic\n        function hasAllShortFlags(arg) {\n            // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group\n            if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n                return false;\n            }\n            let hasAllFlags = true;\n            let next;\n            const letters = arg.slice(1).split('');\n            for (let j = 0; j < letters.length; j++) {\n                next = arg.slice(j + 2);\n                if (!hasAnyFlag(letters[j])) {\n                    hasAllFlags = false;\n                    break;\n                }\n                if ((letters[j + 1] && letters[j + 1] === '=') ||\n                    next === '-' ||\n                    (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) ||\n                    (letters[j + 1] && letters[j + 1].match(/\\W/))) {\n                    break;\n                }\n            }\n            return hasAllFlags;\n        }\n        function isUnknownOptionAsArg(arg) {\n            return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n        }\n        function isUnknownOption(arg) {\n            arg = arg.replace(/^-{3,}/, '--');\n            // ignore negative numbers\n            if (arg.match(negative)) {\n                return false;\n            }\n            // if this is a short option group and all of them are configured, it isn't unknown\n            if (hasAllShortFlags(arg)) {\n                return false;\n            }\n            // e.g. '--count=2'\n            const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n            // e.g. '-a' or '--arg'\n            const normalFlag = /^-+([^=]+?)$/;\n            // e.g. '-a-'\n            const flagEndingInHyphen = /^-+([^=]+?)-$/;\n            // e.g. '-abc123'\n            const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n            // e.g. '-a/usr/local'\n            const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n            // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method\n            return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n        }\n        // make a best effort to pick a default value\n        // for an option based on name and type.\n        function defaultValue(key) {\n            if (!checkAllAliases(key, flags.bools) &&\n                !checkAllAliases(key, flags.counts) &&\n                `${key}` in defaults) {\n                return defaults[key];\n            }\n            else {\n                return defaultForType(guessType(key));\n            }\n        }\n        // return a default value, given the type of a flag.,\n        function defaultForType(type) {\n            const def = {\n                [DefaultValuesForTypeKey.BOOLEAN]: true,\n                [DefaultValuesForTypeKey.STRING]: '',\n                [DefaultValuesForTypeKey.NUMBER]: undefined,\n                [DefaultValuesForTypeKey.ARRAY]: []\n            };\n            return def[type];\n        }\n        // given a flag, enforce a default type.\n        function guessType(key) {\n            let type = DefaultValuesForTypeKey.BOOLEAN;\n            if (checkAllAliases(key, flags.strings))\n                type = DefaultValuesForTypeKey.STRING;\n            else if (checkAllAliases(key, flags.numbers))\n                type = DefaultValuesForTypeKey.NUMBER;\n            else if (checkAllAliases(key, flags.bools))\n                type = DefaultValuesForTypeKey.BOOLEAN;\n            else if (checkAllAliases(key, flags.arrays))\n                type = DefaultValuesForTypeKey.ARRAY;\n            return type;\n        }\n        function isUndefined(num) {\n            return num === undefined;\n        }\n        // check user configuration settings for inconsistencies\n        function checkConfiguration() {\n            // count keys should not be set as array/narg\n            Object.keys(flags.counts).find(key => {\n                if (checkAllAliases(key, flags.arrays)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n                    return true;\n                }\n                else if (checkAllAliases(key, flags.nargs)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n                    return true;\n                }\n                return false;\n            });\n        }\n        return {\n            aliases: Object.assign({}, flags.aliases),\n            argv: Object.assign(argvReturn, argv),\n            configuration: configuration,\n            defaulted: Object.assign({}, defaulted),\n            error: error,\n            newAliases: Object.assign({}, newAliases)\n        };\n    }\n}\n// if any aliases reference each other, we should\n// merge them together.\nfunction combineAliases(aliases) {\n    const aliasArrays = [];\n    const combined = Object.create(null);\n    let change = true;\n    // turn alias lookup hash {key: ['alias1', 'alias2']} into\n    // a simple array ['key', 'alias1', 'alias2']\n    Object.keys(aliases).forEach(function (key) {\n        aliasArrays.push([].concat(aliases[key], key));\n    });\n    // combine arrays until zero changes are\n    // made in an iteration.\n    while (change) {\n        change = false;\n        for (let i = 0; i < aliasArrays.length; i++) {\n            for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n                const intersect = aliasArrays[i].filter(function (v) {\n                    return aliasArrays[ii].indexOf(v) !== -1;\n                });\n                if (intersect.length) {\n                    aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n                    aliasArrays.splice(ii, 1);\n                    change = true;\n                    break;\n                }\n            }\n        }\n    }\n    // map arrays back to the hash-lookup (de-dupe while\n    // we're at it).\n    aliasArrays.forEach(function (aliasArray) {\n        aliasArray = aliasArray.filter(function (v, i, self) {\n            return self.indexOf(v) === i;\n        });\n        const lastAlias = aliasArray.pop();\n        if (lastAlias !== undefined && typeof lastAlias === 'string') {\n            combined[lastAlias] = aliasArray;\n        }\n    });\n    return combined;\n}\n// this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\nfunction increment(orig) {\n    return orig !== undefined ? orig + 1 : 1;\n}\n// TODO(bcoe): in the next major version of yargs, switch to\n// Object.create(null) for dot notation:\nfunction sanitizeKey(key) {\n    if (key === '__proto__')\n        return '___proto___';\n    return key;\n}\nfunction stripQuotes(val) {\n    return (typeof val === 'string' &&\n        (val[0] === \"'\" || val[0] === '\"') &&\n        val[val.length - 1] === val[0])\n        ? val.substring(1, val.length - 1)\n        : val;\n}\n",
  "/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nvar _a, _b, _c;\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format,\n    normalize,\n    resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse(readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;\n",
  "/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nvar _a, _b, _c;\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format,\n    normalize,\n    resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse(readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;\n",
  "'use strict'\n\nimport { notStrictEqual, strictEqual } from 'assert'\nimport cliui from 'cliui'\nimport escalade from 'escalade/sync'\nimport { inspect } from 'util'\nimport { readFileSync } from 'fs'\nimport { fileURLToPath } from 'url';\nimport Parser from 'yargs-parser'\nimport { basename, dirname, extname, relative, resolve } from 'path'\nimport { getProcessArgvBin } from '../../build/lib/utils/process-argv.js'\nimport { YError } from '../../build/lib/yerror.js'\nimport y18n from 'y18n'\n\nconst REQUIRE_ERROR = 'require is not supported by ESM'\nconst REQUIRE_DIRECTORY_ERROR = 'loading a directory of commands is not supported yet for ESM'\n\nlet __dirname;\ntry {\n  __dirname = fileURLToPath(import.meta.url);\n} catch (e) {\n  __dirname = process.cwd();\n}\nconst mainFilename = __dirname.substring(0, __dirname.lastIndexOf('node_modules'));\n\nexport default {\n  assert: {\n    notStrictEqual,\n    strictEqual\n  },\n  cliui,\n  findUp: escalade,\n  getEnv: (key) => {\n    return process.env[key]\n  },\n  inspect,\n  getCallerFile: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  getProcessArgvBin,\n  mainFilename: mainFilename || process.cwd(),\n  Parser,\n  path: {\n    basename,\n    dirname,\n    extname,\n    relative,\n    resolve\n  },\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    emitWarning: (warning, type) => process.emitWarning(warning, type),\n    execPath: () => process.execPath,\n    exit: process.exit,\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: () => {\n    throw new YError(REQUIRE_ERROR)\n  },\n  requireDirectory: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  stringWidth: (str) => {\n    return [...str].length\n  },\n  y18n: y18n({\n    directory: resolve(__dirname, '../../../locales'),\n    updateFiles: false\n  })\n}\n",
  "function getProcessArgvBinIndex() {\n    if (isBundledElectronApp())\n        return 0;\n    return 1;\n}\nfunction isBundledElectronApp() {\n    return isElectronApp() && !process.defaultApp;\n}\nfunction isElectronApp() {\n    return !!process.versions.electron;\n}\nexport function hideBin(argv) {\n    return argv.slice(getProcessArgvBinIndex() + 1);\n}\nexport function getProcessArgvBin() {\n    return process.argv[getProcessArgvBinIndex()];\n}\n",
  "export class YError extends Error {\n    constructor(msg) {\n        super(msg || 'yargs error');\n        this.name = 'YError';\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, YError);\n        }\n    }\n}\n",
  "import { readFileSync, statSync, writeFile } from 'fs';\nimport { format } from 'util';\nimport { resolve } from 'path';\nexport default {\n    fs: {\n        readFileSync,\n        writeFile\n    },\n    format,\n    resolve,\n    exists: (file) => {\n        try {\n            return statSync(file).isFile();\n        }\n        catch (err) {\n            return false;\n        }\n    }\n};\n",
  "let shim;\nclass Y18N {\n    constructor(opts) {\n        // configurable options.\n        opts = opts || {};\n        this.directory = opts.directory || './locales';\n        this.updateFiles = typeof opts.updateFiles === 'boolean' ? opts.updateFiles : true;\n        this.locale = opts.locale || 'en';\n        this.fallbackToLanguage = typeof opts.fallbackToLanguage === 'boolean' ? opts.fallbackToLanguage : true;\n        // internal stuff.\n        this.cache = Object.create(null);\n        this.writeQueue = [];\n    }\n    __(...args) {\n        if (typeof arguments[0] !== 'string') {\n            return this._taggedLiteral(arguments[0], ...arguments);\n        }\n        const str = args.shift();\n        let cb = function () { }; // start with noop.\n        if (typeof args[args.length - 1] === 'function')\n            cb = args.pop();\n        cb = cb || function () { }; // noop.\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        // we've observed a new string, update the language file.\n        if (!this.cache[this.locale][str] && this.updateFiles) {\n            this.cache[this.locale][str] = str;\n            // include the current directory and locale,\n            // since these values could change before the\n            // write is performed.\n            this._enqueueWrite({\n                directory: this.directory,\n                locale: this.locale,\n                cb\n            });\n        }\n        else {\n            cb();\n        }\n        return shim.format.apply(shim.format, [this.cache[this.locale][str] || str].concat(args));\n    }\n    __n() {\n        const args = Array.prototype.slice.call(arguments);\n        const singular = args.shift();\n        const plural = args.shift();\n        const quantity = args.shift();\n        let cb = function () { }; // start with noop.\n        if (typeof args[args.length - 1] === 'function')\n            cb = args.pop();\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        let str = quantity === 1 ? singular : plural;\n        if (this.cache[this.locale][singular]) {\n            const entry = this.cache[this.locale][singular];\n            str = entry[quantity === 1 ? 'one' : 'other'];\n        }\n        // we've observed a new string, update the language file.\n        if (!this.cache[this.locale][singular] && this.updateFiles) {\n            this.cache[this.locale][singular] = {\n                one: singular,\n                other: plural\n            };\n            // include the current directory and locale,\n            // since these values could change before the\n            // write is performed.\n            this._enqueueWrite({\n                directory: this.directory,\n                locale: this.locale,\n                cb\n            });\n        }\n        else {\n            cb();\n        }\n        // if a %d placeholder is provided, add quantity\n        // to the arguments expanded by util.format.\n        const values = [str];\n        if (~str.indexOf('%d'))\n            values.push(quantity);\n        return shim.format.apply(shim.format, values.concat(args));\n    }\n    setLocale(locale) {\n        this.locale = locale;\n    }\n    getLocale() {\n        return this.locale;\n    }\n    updateLocale(obj) {\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                this.cache[this.locale][key] = obj[key];\n            }\n        }\n    }\n    _taggedLiteral(parts, ...args) {\n        let str = '';\n        parts.forEach(function (part, i) {\n            const arg = args[i + 1];\n            str += part;\n            if (typeof arg !== 'undefined') {\n                str += '%s';\n            }\n        });\n        return this.__.apply(this, [str].concat([].slice.call(args, 1)));\n    }\n    _enqueueWrite(work) {\n        this.writeQueue.push(work);\n        if (this.writeQueue.length === 1)\n            this._processWriteQueue();\n    }\n    _processWriteQueue() {\n        const _this = this;\n        const work = this.writeQueue[0];\n        // destructure the enqueued work.\n        const directory = work.directory;\n        const locale = work.locale;\n        const cb = work.cb;\n        const languageFile = this._resolveLocaleFile(directory, locale);\n        const serializedLocale = JSON.stringify(this.cache[locale], null, 2);\n        shim.fs.writeFile(languageFile, serializedLocale, 'utf-8', function (err) {\n            _this.writeQueue.shift();\n            if (_this.writeQueue.length > 0)\n                _this._processWriteQueue();\n            cb(err);\n        });\n    }\n    _readLocaleFile() {\n        let localeLookup = {};\n        const languageFile = this._resolveLocaleFile(this.directory, this.locale);\n        try {\n            // When using a bundler such as webpack, readFileSync may not be defined:\n            if (shim.fs.readFileSync) {\n                localeLookup = JSON.parse(shim.fs.readFileSync(languageFile, 'utf-8'));\n            }\n        }\n        catch (err) {\n            if (err instanceof SyntaxError) {\n                err.message = 'syntax error in ' + languageFile;\n            }\n            if (err.code === 'ENOENT')\n                localeLookup = {};\n            else\n                throw err;\n        }\n        this.cache[this.locale] = localeLookup;\n    }\n    _resolveLocaleFile(directory, locale) {\n        let file = shim.resolve(directory, './', locale + '.json');\n        if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf('_')) {\n            // attempt fallback to language only\n            const languageFile = shim.resolve(directory, './', locale.split('_')[0] + '.json');\n            if (this._fileExistsSync(languageFile))\n                file = languageFile;\n        }\n        return file;\n    }\n    _fileExistsSync(file) {\n        return shim.exists(file);\n    }\n}\nexport function y18n(opts, _shim) {\n    shim = _shim;\n    const y18n = new Y18N(opts);\n    return {\n        __: y18n.__.bind(y18n),\n        __n: y18n.__n.bind(y18n),\n        setLocale: y18n.setLocale.bind(y18n),\n        getLocale: y18n.getLocale.bind(y18n),\n        updateLocale: y18n.updateLocale.bind(y18n),\n        locale: y18n.locale\n    };\n}\n",
  "import shim from './build/lib/platform-shims/node.js'\nimport { y18n as _y18n } from './build/lib/index.js'\n\nconst y18n = (opts) => {\n  return _y18n(opts, shim)\n}\n\nexport default y18n\n",
  "'use strict'\n\nimport { notStrictEqual, strictEqual } from 'assert'\nimport cliui from 'cliui'\nimport escalade from 'escalade/sync'\nimport { inspect } from 'util'\nimport { readFileSync } from 'fs'\nimport { fileURLToPath } from 'url';\nimport Parser from 'yargs-parser'\nimport { basename, dirname, extname, relative, resolve } from 'path'\nimport { getProcessArgvBin } from '../../build/lib/utils/process-argv.js'\nimport { YError } from '../../build/lib/yerror.js'\nimport y18n from 'y18n'\n\nconst REQUIRE_ERROR = 'require is not supported by ESM'\nconst REQUIRE_DIRECTORY_ERROR = 'loading a directory of commands is not supported yet for ESM'\n\nlet __dirname;\ntry {\n  __dirname = fileURLToPath(import.meta.url);\n} catch (e) {\n  __dirname = process.cwd();\n}\nconst mainFilename = __dirname.substring(0, __dirname.lastIndexOf('node_modules'));\n\nexport default {\n  assert: {\n    notStrictEqual,\n    strictEqual\n  },\n  cliui,\n  findUp: escalade,\n  getEnv: (key) => {\n    return process.env[key]\n  },\n  inspect,\n  getCallerFile: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  getProcessArgvBin,\n  mainFilename: mainFilename || process.cwd(),\n  Parser,\n  path: {\n    basename,\n    dirname,\n    extname,\n    relative,\n    resolve\n  },\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    emitWarning: (warning, type) => process.emitWarning(warning, type),\n    execPath: () => process.execPath,\n    exit: process.exit,\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: () => {\n    throw new YError(REQUIRE_ERROR)\n  },\n  requireDirectory: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  stringWidth: (str) => {\n    return [...str].length\n  },\n  y18n: y18n({\n    directory: resolve(__dirname, '../../../locales'),\n    updateFiles: false\n  })\n}\n",
  "export function assertNotStrictEqual(actual, expected, shim, message) {\n    shim.assert.notStrictEqual(actual, expected, message);\n}\nexport function assertSingleKey(actual, shim) {\n    shim.assert.strictEqual(typeof actual, 'string');\n}\nexport function objectKeys(object) {\n    return Object.keys(object);\n}\n",
  "export function isPromise(maybePromise) {\n    return (!!maybePromise &&\n        !!maybePromise.then &&\n        typeof maybePromise.then === 'function');\n}\n",
  "export function parseCommand(cmd) {\n    const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ');\n    const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/);\n    const bregex = /\\.*[\\][<>]/g;\n    const firstCommand = splitCommand.shift();\n    if (!firstCommand)\n        throw new Error(`No command found in: ${cmd}`);\n    const parsedCommand = {\n        cmd: firstCommand.replace(bregex, ''),\n        demanded: [],\n        optional: [],\n    };\n    splitCommand.forEach((cmd, i) => {\n        let variadic = false;\n        cmd = cmd.replace(/\\s/g, '');\n        if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1)\n            variadic = true;\n        if (/^\\[/.test(cmd)) {\n            parsedCommand.optional.push({\n                cmd: cmd.replace(bregex, '').split('|'),\n                variadic,\n            });\n        }\n        else {\n            parsedCommand.demanded.push({\n                cmd: cmd.replace(bregex, '').split('|'),\n                variadic,\n            });\n        }\n    });\n    return parsedCommand;\n}\n",
  "import { YError } from './yerror.js';\nimport { parseCommand } from './parse-command.js';\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];\nexport function argsert(arg1, arg2, arg3) {\n    function parseArgs() {\n        return typeof arg1 === 'object'\n            ? [{ demanded: [], optional: [] }, arg1, arg2]\n            : [\n                parseCommand(`cmd ${arg1}`),\n                arg2,\n                arg3,\n            ];\n    }\n    try {\n        let position = 0;\n        const [parsed, callerArguments, _length] = parseArgs();\n        const args = [].slice.call(callerArguments);\n        while (args.length && args[args.length - 1] === undefined)\n            args.pop();\n        const length = _length || args.length;\n        if (length < parsed.demanded.length) {\n            throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`);\n        }\n        const totalCommands = parsed.demanded.length + parsed.optional.length;\n        if (length > totalCommands) {\n            throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`);\n        }\n        parsed.demanded.forEach(demanded => {\n            const arg = args.shift();\n            const observedType = guessType(arg);\n            const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*');\n            if (matchingTypes.length === 0)\n                argumentTypeError(observedType, demanded.cmd, position);\n            position += 1;\n        });\n        parsed.optional.forEach(optional => {\n            if (args.length === 0)\n                return;\n            const arg = args.shift();\n            const observedType = guessType(arg);\n            const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*');\n            if (matchingTypes.length === 0)\n                argumentTypeError(observedType, optional.cmd, position);\n            position += 1;\n        });\n    }\n    catch (err) {\n        console.warn(err.stack);\n    }\n}\nfunction guessType(arg) {\n    if (Array.isArray(arg)) {\n        return 'array';\n    }\n    else if (arg === null) {\n        return 'null';\n    }\n    return typeof arg;\n}\nfunction argumentTypeError(observedType, allowedTypes, position) {\n    throw new YError(`Invalid ${positionName[position] || 'manyith'} argument. Expected ${allowedTypes.join(' or ')} but received ${observedType}.`);\n}\n",
  "import { argsert } from './argsert.js';\nimport { isPromise } from './utils/is-promise.js';\nexport class GlobalMiddleware {\n    constructor(yargs) {\n        this.globalMiddleware = [];\n        this.frozens = [];\n        this.yargs = yargs;\n    }\n    addMiddleware(callback, applyBeforeValidation, global = true, mutates = false) {\n        argsert('<array|function> [boolean] [boolean] [boolean]', [callback, applyBeforeValidation, global], arguments.length);\n        if (Array.isArray(callback)) {\n            for (let i = 0; i < callback.length; i++) {\n                if (typeof callback[i] !== 'function') {\n                    throw Error('middleware must be a function');\n                }\n                const m = callback[i];\n                m.applyBeforeValidation = applyBeforeValidation;\n                m.global = global;\n            }\n            Array.prototype.push.apply(this.globalMiddleware, callback);\n        }\n        else if (typeof callback === 'function') {\n            const m = callback;\n            m.applyBeforeValidation = applyBeforeValidation;\n            m.global = global;\n            m.mutates = mutates;\n            this.globalMiddleware.push(callback);\n        }\n        return this.yargs;\n    }\n    addCoerceMiddleware(callback, option) {\n        const aliases = this.yargs.getAliases();\n        this.globalMiddleware = this.globalMiddleware.filter(m => {\n            const toCheck = [...(aliases[option] || []), option];\n            if (!m.option)\n                return true;\n            else\n                return !toCheck.includes(m.option);\n        });\n        callback.option = option;\n        return this.addMiddleware(callback, true, true, true);\n    }\n    getMiddleware() {\n        return this.globalMiddleware;\n    }\n    freeze() {\n        this.frozens.push([...this.globalMiddleware]);\n    }\n    unfreeze() {\n        const frozen = this.frozens.pop();\n        if (frozen !== undefined)\n            this.globalMiddleware = frozen;\n    }\n    reset() {\n        this.globalMiddleware = this.globalMiddleware.filter(m => m.global);\n    }\n}\nexport function commandMiddlewareFactory(commandMiddleware) {\n    if (!commandMiddleware)\n        return [];\n    return commandMiddleware.map(middleware => {\n        middleware.applyBeforeValidation = false;\n        return middleware;\n    });\n}\nexport function applyMiddleware(argv, yargs, middlewares, beforeValidation) {\n    return middlewares.reduce((acc, middleware) => {\n        if (middleware.applyBeforeValidation !== beforeValidation) {\n            return acc;\n        }\n        if (middleware.mutates) {\n            if (middleware.applied)\n                return acc;\n            middleware.applied = true;\n        }\n        if (isPromise(acc)) {\n            return acc\n                .then(initialObj => Promise.all([initialObj, middleware(initialObj, yargs)]))\n                .then(([initialObj, middlewareObj]) => Object.assign(initialObj, middlewareObj));\n        }\n        else {\n            const result = middleware(acc, yargs);\n            return isPromise(result)\n                ? result.then(middlewareObj => Object.assign(acc, middlewareObj))\n                : Object.assign(acc, result);\n        }\n    }, argv);\n}\n",
  "import { isPromise } from './is-promise.js';\nexport function maybeAsyncResult(getResult, resultHandler, errorHandler = (err) => {\n    throw err;\n}) {\n    try {\n        const result = isFunction(getResult) ? getResult() : getResult;\n        return isPromise(result)\n            ? result.then((result) => resultHandler(result))\n            : resultHandler(result);\n    }\n    catch (err) {\n        return errorHandler(err);\n    }\n}\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\n",
  "export default function whichModule(exported) {\n    if (typeof require === 'undefined')\n        return null;\n    for (let i = 0, files = Object.keys(require.cache), mod; i < files.length; i++) {\n        mod = require.cache[files[i]];\n        if (mod.exports === exported)\n            return mod;\n    }\n    return null;\n}\n",
  "import { assertNotStrictEqual, } from './typings/common-types.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { applyMiddleware, commandMiddlewareFactory, } from './middleware.js';\nimport { parseCommand } from './parse-command.js';\nimport { isYargsInstance, } from './yargs-factory.js';\nimport { maybeAsyncResult } from './utils/maybe-async-result.js';\nimport whichModule from './utils/which-module.js';\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nexport class CommandInstance {\n    constructor(usage, validation, globalMiddleware, shim) {\n        this.requireCache = new Set();\n        this.handlers = {};\n        this.aliasMap = {};\n        this.frozens = [];\n        this.shim = shim;\n        this.usage = usage;\n        this.globalMiddleware = globalMiddleware;\n        this.validation = validation;\n    }\n    addDirectory(dir, req, callerFile, opts) {\n        opts = opts || {};\n        if (typeof opts.recurse !== 'boolean')\n            opts.recurse = false;\n        if (!Array.isArray(opts.extensions))\n            opts.extensions = ['js'];\n        const parentVisit = typeof opts.visit === 'function' ? opts.visit : (o) => o;\n        opts.visit = (obj, joined, filename) => {\n            const visited = parentVisit(obj, joined, filename);\n            if (visited) {\n                if (this.requireCache.has(joined))\n                    return visited;\n                else\n                    this.requireCache.add(joined);\n                this.addHandler(visited);\n            }\n            return visited;\n        };\n        this.shim.requireDirectory({ require: req, filename: callerFile }, dir, opts);\n    }\n    addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n        let aliases = [];\n        const middlewares = commandMiddlewareFactory(commandMiddleware);\n        handler = handler || (() => { });\n        if (Array.isArray(cmd)) {\n            if (isCommandAndAliases(cmd)) {\n                [cmd, ...aliases] = cmd;\n            }\n            else {\n                for (const command of cmd) {\n                    this.addHandler(command);\n                }\n            }\n        }\n        else if (isCommandHandlerDefinition(cmd)) {\n            let command = Array.isArray(cmd.command) || typeof cmd.command === 'string'\n                ? cmd.command\n                : this.moduleName(cmd);\n            if (cmd.aliases)\n                command = [].concat(command).concat(cmd.aliases);\n            this.addHandler(command, this.extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n            return;\n        }\n        else if (isCommandBuilderDefinition(builder)) {\n            this.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n            return;\n        }\n        if (typeof cmd === 'string') {\n            const parsedCommand = parseCommand(cmd);\n            aliases = aliases.map(alias => parseCommand(alias).cmd);\n            let isDefault = false;\n            const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n                if (DEFAULT_MARKER.test(c)) {\n                    isDefault = true;\n                    return false;\n                }\n                return true;\n            });\n            if (parsedAliases.length === 0 && isDefault)\n                parsedAliases.push('$0');\n            if (isDefault) {\n                parsedCommand.cmd = parsedAliases[0];\n                aliases = parsedAliases.slice(1);\n                cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n            }\n            aliases.forEach(alias => {\n                this.aliasMap[alias] = parsedCommand.cmd;\n            });\n            if (description !== false) {\n                this.usage.command(cmd, description, isDefault, aliases, deprecated);\n            }\n            this.handlers[parsedCommand.cmd] = {\n                original: cmd,\n                description,\n                handler,\n                builder: builder || {},\n                middlewares,\n                deprecated,\n                demanded: parsedCommand.demanded,\n                optional: parsedCommand.optional,\n            };\n            if (isDefault)\n                this.defaultCommand = this.handlers[parsedCommand.cmd];\n        }\n    }\n    getCommandHandlers() {\n        return this.handlers;\n    }\n    getCommands() {\n        return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));\n    }\n    hasDefaultCommand() {\n        return !!this.defaultCommand;\n    }\n    runCommand(command, yargs, parsed, commandIndex, helpOnly, helpOrVersionSet) {\n        const commandHandler = this.handlers[command] ||\n            this.handlers[this.aliasMap[command]] ||\n            this.defaultCommand;\n        const currentContext = yargs.getInternalMethods().getContext();\n        const parentCommands = currentContext.commands.slice();\n        const isDefaultCommand = !command;\n        if (command) {\n            currentContext.commands.push(command);\n            currentContext.fullCommands.push(commandHandler.original);\n        }\n        const builderResult = this.applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, parsed.aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet);\n        return isPromise(builderResult)\n            ? builderResult.then(result => this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, result.innerArgv, currentContext, helpOnly, result.aliases, yargs))\n            : this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, builderResult.innerArgv, currentContext, helpOnly, builderResult.aliases, yargs);\n    }\n    applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet) {\n        const builder = commandHandler.builder;\n        let innerYargs = yargs;\n        if (isCommandBuilderCallback(builder)) {\n            yargs.getInternalMethods().getUsageInstance().freeze();\n            const builderOutput = builder(yargs.getInternalMethods().reset(aliases), helpOrVersionSet);\n            if (isPromise(builderOutput)) {\n                return builderOutput.then(output => {\n                    innerYargs = isYargsInstance(output) ? output : yargs;\n                    return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n                });\n            }\n        }\n        else if (isCommandBuilderOptionDefinitions(builder)) {\n            yargs.getInternalMethods().getUsageInstance().freeze();\n            innerYargs = yargs.getInternalMethods().reset(aliases);\n            Object.keys(commandHandler.builder).forEach(key => {\n                innerYargs.option(key, builder[key]);\n            });\n        }\n        return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n    }\n    parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly) {\n        if (isDefaultCommand)\n            innerYargs.getInternalMethods().getUsageInstance().unfreeze(true);\n        if (this.shouldUpdateUsage(innerYargs)) {\n            innerYargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .usage(this.usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n        }\n        const innerArgv = innerYargs\n            .getInternalMethods()\n            .runYargsParserAndExecuteCommands(null, undefined, true, commandIndex, helpOnly);\n        return isPromise(innerArgv)\n            ? innerArgv.then(argv => ({\n                aliases: innerYargs.parsed.aliases,\n                innerArgv: argv,\n            }))\n            : {\n                aliases: innerYargs.parsed.aliases,\n                innerArgv: innerArgv,\n            };\n    }\n    shouldUpdateUsage(yargs) {\n        return (!yargs.getInternalMethods().getUsageInstance().getUsageDisabled() &&\n            yargs.getInternalMethods().getUsageInstance().getUsage().length === 0);\n    }\n    usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n        const c = DEFAULT_MARKER.test(commandHandler.original)\n            ? commandHandler.original.replace(DEFAULT_MARKER, '').trim()\n            : commandHandler.original;\n        const pc = parentCommands.filter(c => {\n            return !DEFAULT_MARKER.test(c);\n        });\n        pc.push(c);\n        return `$0 ${pc.join(' ')}`;\n    }\n    handleValidationAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, aliases, yargs, middlewares, positionalMap) {\n        if (!yargs.getInternalMethods().getHasOutput()) {\n            const validation = yargs\n                .getInternalMethods()\n                .runValidation(aliases, positionalMap, yargs.parsed.error, isDefaultCommand);\n            innerArgv = maybeAsyncResult(innerArgv, result => {\n                validation(result);\n                return result;\n            });\n        }\n        if (commandHandler.handler && !yargs.getInternalMethods().getHasOutput()) {\n            yargs.getInternalMethods().setHasOutput();\n            const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n            yargs\n                .getInternalMethods()\n                .postProcess(innerArgv, populateDoubleDash, false, false);\n            innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n            innerArgv = maybeAsyncResult(innerArgv, result => {\n                const handlerResult = commandHandler.handler(result);\n                return isPromise(handlerResult)\n                    ? handlerResult.then(() => result)\n                    : result;\n            });\n            if (!isDefaultCommand) {\n                yargs.getInternalMethods().getUsageInstance().cacheHelpMessage();\n            }\n            if (isPromise(innerArgv) &&\n                !yargs.getInternalMethods().hasParseCallback()) {\n                innerArgv.catch(error => {\n                    try {\n                        yargs.getInternalMethods().getUsageInstance().fail(null, error);\n                    }\n                    catch (_err) {\n                    }\n                });\n            }\n        }\n        if (!isDefaultCommand) {\n            currentContext.commands.pop();\n            currentContext.fullCommands.pop();\n        }\n        return innerArgv;\n    }\n    applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, helpOnly, aliases, yargs) {\n        let positionalMap = {};\n        if (helpOnly)\n            return innerArgv;\n        if (!yargs.getInternalMethods().getHasOutput()) {\n            positionalMap = this.populatePositionals(commandHandler, innerArgv, currentContext, yargs);\n        }\n        const middlewares = this.globalMiddleware\n            .getMiddleware()\n            .slice(0)\n            .concat(commandHandler.middlewares);\n        const maybePromiseArgv = applyMiddleware(innerArgv, yargs, middlewares, true);\n        return isPromise(maybePromiseArgv)\n            ? maybePromiseArgv.then(resolvedInnerArgv => this.handleValidationAndGetResult(isDefaultCommand, commandHandler, resolvedInnerArgv, currentContext, aliases, yargs, middlewares, positionalMap))\n            : this.handleValidationAndGetResult(isDefaultCommand, commandHandler, maybePromiseArgv, currentContext, aliases, yargs, middlewares, positionalMap);\n    }\n    populatePositionals(commandHandler, argv, context, yargs) {\n        argv._ = argv._.slice(context.commands.length);\n        const demanded = commandHandler.demanded.slice(0);\n        const optional = commandHandler.optional.slice(0);\n        const positionalMap = {};\n        this.validation.positionalCount(demanded.length, argv._.length);\n        while (demanded.length) {\n            const demand = demanded.shift();\n            this.populatePositional(demand, argv, positionalMap);\n        }\n        while (optional.length) {\n            const maybe = optional.shift();\n            this.populatePositional(maybe, argv, positionalMap);\n        }\n        argv._ = context.commands.concat(argv._.map(a => '' + a));\n        this.postProcessPositionals(argv, positionalMap, this.cmdToParseOptions(commandHandler.original), yargs);\n        return positionalMap;\n    }\n    populatePositional(positional, argv, positionalMap) {\n        const cmd = positional.cmd[0];\n        if (positional.variadic) {\n            positionalMap[cmd] = argv._.splice(0).map(String);\n        }\n        else {\n            if (argv._.length)\n                positionalMap[cmd] = [String(argv._.shift())];\n        }\n    }\n    cmdToParseOptions(cmdString) {\n        const parseOptions = {\n            array: [],\n            default: {},\n            alias: {},\n            demand: {},\n        };\n        const parsed = parseCommand(cmdString);\n        parsed.demanded.forEach(d => {\n            const [cmd, ...aliases] = d.cmd;\n            if (d.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n            parseOptions.demand[cmd] = true;\n        });\n        parsed.optional.forEach(o => {\n            const [cmd, ...aliases] = o.cmd;\n            if (o.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n        });\n        return parseOptions;\n    }\n    postProcessPositionals(argv, positionalMap, parseOptions, yargs) {\n        const options = Object.assign({}, yargs.getOptions());\n        options.default = Object.assign(parseOptions.default, options.default);\n        for (const key of Object.keys(parseOptions.alias)) {\n            options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n        }\n        options.array = options.array.concat(parseOptions.array);\n        options.config = {};\n        const unparsed = [];\n        Object.keys(positionalMap).forEach(key => {\n            positionalMap[key].map(value => {\n                if (options.configuration['unknown-options-as-args'])\n                    options.key[key] = true;\n                unparsed.push(`--${key}`);\n                unparsed.push(value);\n            });\n        });\n        if (!unparsed.length)\n            return;\n        const config = Object.assign({}, options.configuration, {\n            'populate--': false,\n        });\n        const parsed = this.shim.Parser.detailed(unparsed, Object.assign({}, options, {\n            configuration: config,\n        }));\n        if (parsed.error) {\n            yargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .fail(parsed.error.message, parsed.error);\n        }\n        else {\n            const positionalKeys = Object.keys(positionalMap);\n            Object.keys(positionalMap).forEach(key => {\n                positionalKeys.push(...parsed.aliases[key]);\n            });\n            Object.keys(parsed.argv).forEach(key => {\n                if (positionalKeys.includes(key)) {\n                    if (!positionalMap[key])\n                        positionalMap[key] = parsed.argv[key];\n                    if (!this.isInConfigs(yargs, key) &&\n                        !this.isDefaulted(yargs, key) &&\n                        Object.prototype.hasOwnProperty.call(argv, key) &&\n                        Object.prototype.hasOwnProperty.call(parsed.argv, key) &&\n                        (Array.isArray(argv[key]) || Array.isArray(parsed.argv[key]))) {\n                        argv[key] = [].concat(argv[key], parsed.argv[key]);\n                    }\n                    else {\n                        argv[key] = parsed.argv[key];\n                    }\n                }\n            });\n        }\n    }\n    isDefaulted(yargs, key) {\n        const { default: defaults } = yargs.getOptions();\n        return (Object.prototype.hasOwnProperty.call(defaults, key) ||\n            Object.prototype.hasOwnProperty.call(defaults, this.shim.Parser.camelCase(key)));\n    }\n    isInConfigs(yargs, key) {\n        const { configObjects } = yargs.getOptions();\n        return (configObjects.some(c => Object.prototype.hasOwnProperty.call(c, key)) ||\n            configObjects.some(c => Object.prototype.hasOwnProperty.call(c, this.shim.Parser.camelCase(key))));\n    }\n    runDefaultBuilderOn(yargs) {\n        if (!this.defaultCommand)\n            return;\n        if (this.shouldUpdateUsage(yargs)) {\n            const commandString = DEFAULT_MARKER.test(this.defaultCommand.original)\n                ? this.defaultCommand.original\n                : this.defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n            yargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .usage(commandString, this.defaultCommand.description);\n        }\n        const builder = this.defaultCommand.builder;\n        if (isCommandBuilderCallback(builder)) {\n            return builder(yargs, true);\n        }\n        else if (!isCommandBuilderDefinition(builder)) {\n            Object.keys(builder).forEach(key => {\n                yargs.option(key, builder[key]);\n            });\n        }\n        return undefined;\n    }\n    moduleName(obj) {\n        const mod = whichModule(obj);\n        if (!mod)\n            throw new Error(`No command name given for module: ${this.shim.inspect(obj)}`);\n        return this.commandFromFilename(mod.filename);\n    }\n    commandFromFilename(filename) {\n        return this.shim.path.basename(filename, this.shim.path.extname(filename));\n    }\n    extractDesc({ describe, description, desc }) {\n        for (const test of [describe, description, desc]) {\n            if (typeof test === 'string' || test === false)\n                return test;\n            assertNotStrictEqual(test, true, this.shim);\n        }\n        return false;\n    }\n    freeze() {\n        this.frozens.push({\n            handlers: this.handlers,\n            aliasMap: this.aliasMap,\n            defaultCommand: this.defaultCommand,\n        });\n    }\n    unfreeze() {\n        const frozen = this.frozens.pop();\n        assertNotStrictEqual(frozen, undefined, this.shim);\n        ({\n            handlers: this.handlers,\n            aliasMap: this.aliasMap,\n            defaultCommand: this.defaultCommand,\n        } = frozen);\n    }\n    reset() {\n        this.handlers = {};\n        this.aliasMap = {};\n        this.defaultCommand = undefined;\n        this.requireCache = new Set();\n        return this;\n    }\n}\nexport function command(usage, validation, globalMiddleware, shim) {\n    return new CommandInstance(usage, validation, globalMiddleware, shim);\n}\nexport function isCommandBuilderDefinition(builder) {\n    return (typeof builder === 'object' &&\n        !!builder.builder &&\n        typeof builder.handler === 'function');\n}\nfunction isCommandAndAliases(cmd) {\n    return cmd.every(c => typeof c === 'string');\n}\nexport function isCommandBuilderCallback(builder) {\n    return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n    return typeof builder === 'object';\n}\nexport function isCommandHandlerDefinition(cmd) {\n    return typeof cmd === 'object' && !Array.isArray(cmd);\n}\n",
  "import { objectKeys } from '../typings/common-types.js';\nexport function objFilter(original = {}, filter = () => true) {\n    const obj = {};\n    objectKeys(original).forEach(key => {\n        if (filter(key, original[key])) {\n            obj[key] = original[key];\n        }\n    });\n    return obj;\n}\n",
  "export default function setBlocking(blocking) {\n    if (typeof process === 'undefined')\n        return;\n    [process.stdout, process.stderr].forEach(_stream => {\n        const stream = _stream;\n        if (stream._handle &&\n            stream.isTTY &&\n            typeof stream._handle.setBlocking === 'function') {\n            stream._handle.setBlocking(blocking);\n        }\n    });\n}\n",
  "import { objFilter } from './utils/obj-filter.js';\nimport { YError } from './yerror.js';\nimport setBlocking from './utils/set-blocking.js';\nfunction isBoolean(fail) {\n    return typeof fail === 'boolean';\n}\nexport function usage(yargs, shim) {\n    const __ = shim.y18n.__;\n    const self = {};\n    const fails = [];\n    self.failFn = function failFn(f) {\n        fails.push(f);\n    };\n    let failMessage = null;\n    let globalFailMessage = null;\n    let showHelpOnFail = true;\n    self.showHelpOnFail = function showHelpOnFailFn(arg1 = true, arg2) {\n        const [enabled, message] = typeof arg1 === 'string' ? [true, arg1] : [arg1, arg2];\n        if (yargs.getInternalMethods().isGlobalContext()) {\n            globalFailMessage = message;\n        }\n        failMessage = message;\n        showHelpOnFail = enabled;\n        return self;\n    };\n    let failureOutput = false;\n    self.fail = function fail(msg, err) {\n        const logger = yargs.getInternalMethods().getLoggerInstance();\n        if (fails.length) {\n            for (let i = fails.length - 1; i >= 0; --i) {\n                const fail = fails[i];\n                if (isBoolean(fail)) {\n                    if (err)\n                        throw err;\n                    else if (msg)\n                        throw Error(msg);\n                }\n                else {\n                    fail(msg, err, self);\n                }\n            }\n        }\n        else {\n            if (yargs.getExitProcess())\n                setBlocking(true);\n            if (!failureOutput) {\n                failureOutput = true;\n                if (showHelpOnFail) {\n                    yargs.showHelp('error');\n                    logger.error();\n                }\n                if (msg || err)\n                    logger.error(msg || err);\n                const globalOrCommandFailMessage = failMessage || globalFailMessage;\n                if (globalOrCommandFailMessage) {\n                    if (msg || err)\n                        logger.error('');\n                    logger.error(globalOrCommandFailMessage);\n                }\n            }\n            err = err || new YError(msg);\n            if (yargs.getExitProcess()) {\n                return yargs.exit(1);\n            }\n            else if (yargs.getInternalMethods().hasParseCallback()) {\n                return yargs.exit(1, err);\n            }\n            else {\n                throw err;\n            }\n        }\n    };\n    let usages = [];\n    let usageDisabled = false;\n    self.usage = (msg, description) => {\n        if (msg === null) {\n            usageDisabled = true;\n            usages = [];\n            return self;\n        }\n        usageDisabled = false;\n        usages.push([msg, description || '']);\n        return self;\n    };\n    self.getUsage = () => {\n        return usages;\n    };\n    self.getUsageDisabled = () => {\n        return usageDisabled;\n    };\n    self.getPositionalGroupName = () => {\n        return __('Positionals:');\n    };\n    let examples = [];\n    self.example = (cmd, description) => {\n        examples.push([cmd, description || '']);\n    };\n    let commands = [];\n    self.command = function command(cmd, description, isDefault, aliases, deprecated = false) {\n        if (isDefault) {\n            commands = commands.map(cmdArray => {\n                cmdArray[2] = false;\n                return cmdArray;\n            });\n        }\n        commands.push([cmd, description || '', isDefault, aliases, deprecated]);\n    };\n    self.getCommands = () => commands;\n    let descriptions = {};\n    self.describe = function describe(keyOrKeys, desc) {\n        if (Array.isArray(keyOrKeys)) {\n            keyOrKeys.forEach(k => {\n                self.describe(k, desc);\n            });\n        }\n        else if (typeof keyOrKeys === 'object') {\n            Object.keys(keyOrKeys).forEach(k => {\n                self.describe(k, keyOrKeys[k]);\n            });\n        }\n        else {\n            descriptions[keyOrKeys] = desc;\n        }\n    };\n    self.getDescriptions = () => descriptions;\n    let epilogs = [];\n    self.epilog = msg => {\n        epilogs.push(msg);\n    };\n    let wrapSet = false;\n    let wrap;\n    self.wrap = cols => {\n        wrapSet = true;\n        wrap = cols;\n    };\n    self.getWrap = () => {\n        if (shim.getEnv('YARGS_DISABLE_WRAP')) {\n            return null;\n        }\n        if (!wrapSet) {\n            wrap = windowWidth();\n            wrapSet = true;\n        }\n        return wrap;\n    };\n    const deferY18nLookupPrefix = '__yargsString__:';\n    self.deferY18nLookup = str => deferY18nLookupPrefix + str;\n    self.help = function help() {\n        if (cachedHelpMessage)\n            return cachedHelpMessage;\n        normalizeAliases();\n        const base$0 = yargs.customScriptName\n            ? yargs.$0\n            : shim.path.basename(yargs.$0);\n        const demandedOptions = yargs.getDemandedOptions();\n        const demandedCommands = yargs.getDemandedCommands();\n        const deprecatedOptions = yargs.getDeprecatedOptions();\n        const groups = yargs.getGroups();\n        const options = yargs.getOptions();\n        let keys = [];\n        keys = keys.concat(Object.keys(descriptions));\n        keys = keys.concat(Object.keys(demandedOptions));\n        keys = keys.concat(Object.keys(demandedCommands));\n        keys = keys.concat(Object.keys(options.default));\n        keys = keys.filter(filterHiddenOptions);\n        keys = Object.keys(keys.reduce((acc, key) => {\n            if (key !== '_')\n                acc[key] = true;\n            return acc;\n        }, {}));\n        const theWrap = self.getWrap();\n        const ui = shim.cliui({\n            width: theWrap,\n            wrap: !!theWrap,\n        });\n        if (!usageDisabled) {\n            if (usages.length) {\n                usages.forEach(usage => {\n                    ui.div({ text: `${usage[0].replace(/\\$0/g, base$0)}` });\n                    if (usage[1]) {\n                        ui.div({ text: `${usage[1]}`, padding: [1, 0, 0, 0] });\n                    }\n                });\n                ui.div();\n            }\n            else if (commands.length) {\n                let u = null;\n                if (demandedCommands._) {\n                    u = `${base$0} <${__('command')}>\\n`;\n                }\n                else {\n                    u = `${base$0} [${__('command')}]\\n`;\n                }\n                ui.div(`${u}`);\n            }\n        }\n        if (commands.length > 1 || (commands.length === 1 && !commands[0][2])) {\n            ui.div(__('Commands:'));\n            const context = yargs.getInternalMethods().getContext();\n            const parentCommands = context.commands.length\n                ? `${context.commands.join(' ')} `\n                : '';\n            if (yargs.getInternalMethods().getParserConfiguration()['sort-commands'] ===\n                true) {\n                commands = commands.sort((a, b) => a[0].localeCompare(b[0]));\n            }\n            const prefix = base$0 ? `${base$0} ` : '';\n            commands.forEach(command => {\n                const commandString = `${prefix}${parentCommands}${command[0].replace(/^\\$0 ?/, '')}`;\n                ui.span({\n                    text: commandString,\n                    padding: [0, 2, 0, 2],\n                    width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4,\n                }, { text: command[1] });\n                const hints = [];\n                if (command[2])\n                    hints.push(`[${__('default')}]`);\n                if (command[3] && command[3].length) {\n                    hints.push(`[${__('aliases:')} ${command[3].join(', ')}]`);\n                }\n                if (command[4]) {\n                    if (typeof command[4] === 'string') {\n                        hints.push(`[${__('deprecated: %s', command[4])}]`);\n                    }\n                    else {\n                        hints.push(`[${__('deprecated')}]`);\n                    }\n                }\n                if (hints.length) {\n                    ui.div({\n                        text: hints.join(' '),\n                        padding: [0, 0, 0, 2],\n                        align: 'right',\n                    });\n                }\n                else {\n                    ui.div();\n                }\n            });\n            ui.div();\n        }\n        const aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs.parsed.newAliases) || []);\n        keys = keys.filter(key => !yargs.parsed.newAliases[key] &&\n            aliasKeys.every(alias => (options.alias[alias] || []).indexOf(key) === -1));\n        const defaultGroup = __('Options:');\n        if (!groups[defaultGroup])\n            groups[defaultGroup] = [];\n        addUngroupedKeys(keys, options.alias, groups, defaultGroup);\n        const isLongSwitch = (sw) => /^--/.test(getText(sw));\n        const displayedGroups = Object.keys(groups)\n            .filter(groupName => groups[groupName].length > 0)\n            .map(groupName => {\n            const normalizedKeys = groups[groupName]\n                .filter(filterHiddenOptions)\n                .map(key => {\n                if (aliasKeys.includes(key))\n                    return key;\n                for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {\n                    if ((options.alias[aliasKey] || []).includes(key))\n                        return aliasKey;\n                }\n                return key;\n            });\n            return { groupName, normalizedKeys };\n        })\n            .filter(({ normalizedKeys }) => normalizedKeys.length > 0)\n            .map(({ groupName, normalizedKeys }) => {\n            const switches = normalizedKeys.reduce((acc, key) => {\n                acc[key] = [key]\n                    .concat(options.alias[key] || [])\n                    .map(sw => {\n                    if (groupName === self.getPositionalGroupName())\n                        return sw;\n                    else {\n                        return ((/^[0-9]$/.test(sw)\n                            ? options.boolean.includes(key)\n                                ? '-'\n                                : '--'\n                            : sw.length > 1\n                                ? '--'\n                                : '-') + sw);\n                    }\n                })\n                    .sort((sw1, sw2) => isLongSwitch(sw1) === isLongSwitch(sw2)\n                    ? 0\n                    : isLongSwitch(sw1)\n                        ? 1\n                        : -1)\n                    .join(', ');\n                return acc;\n            }, {});\n            return { groupName, normalizedKeys, switches };\n        });\n        const shortSwitchesUsed = displayedGroups\n            .filter(({ groupName }) => groupName !== self.getPositionalGroupName())\n            .some(({ normalizedKeys, switches }) => !normalizedKeys.every(key => isLongSwitch(switches[key])));\n        if (shortSwitchesUsed) {\n            displayedGroups\n                .filter(({ groupName }) => groupName !== self.getPositionalGroupName())\n                .forEach(({ normalizedKeys, switches }) => {\n                normalizedKeys.forEach(key => {\n                    if (isLongSwitch(switches[key])) {\n                        switches[key] = addIndentation(switches[key], '-x, '.length);\n                    }\n                });\n            });\n        }\n        displayedGroups.forEach(({ groupName, normalizedKeys, switches }) => {\n            ui.div(groupName);\n            normalizedKeys.forEach(key => {\n                const kswitch = switches[key];\n                let desc = descriptions[key] || '';\n                let type = null;\n                if (desc.includes(deferY18nLookupPrefix))\n                    desc = __(desc.substring(deferY18nLookupPrefix.length));\n                if (options.boolean.includes(key))\n                    type = `[${__('boolean')}]`;\n                if (options.count.includes(key))\n                    type = `[${__('count')}]`;\n                if (options.string.includes(key))\n                    type = `[${__('string')}]`;\n                if (options.normalize.includes(key))\n                    type = `[${__('string')}]`;\n                if (options.array.includes(key))\n                    type = `[${__('array')}]`;\n                if (options.number.includes(key))\n                    type = `[${__('number')}]`;\n                const deprecatedExtra = (deprecated) => typeof deprecated === 'string'\n                    ? `[${__('deprecated: %s', deprecated)}]`\n                    : `[${__('deprecated')}]`;\n                const extra = [\n                    key in deprecatedOptions\n                        ? deprecatedExtra(deprecatedOptions[key])\n                        : null,\n                    type,\n                    key in demandedOptions ? `[${__('required')}]` : null,\n                    options.choices && options.choices[key]\n                        ? `[${__('choices:')} ${self.stringifiedValues(options.choices[key])}]`\n                        : null,\n                    defaultString(options.default[key], options.defaultDescription[key]),\n                ]\n                    .filter(Boolean)\n                    .join(' ');\n                ui.span({\n                    text: getText(kswitch),\n                    padding: [0, 2, 0, 2 + getIndentation(kswitch)],\n                    width: maxWidth(switches, theWrap) + 4,\n                }, desc);\n                const shouldHideOptionExtras = yargs.getInternalMethods().getUsageConfiguration()['hide-types'] ===\n                    true;\n                if (extra && !shouldHideOptionExtras)\n                    ui.div({ text: extra, padding: [0, 0, 0, 2], align: 'right' });\n                else\n                    ui.div();\n            });\n            ui.div();\n        });\n        if (examples.length) {\n            ui.div(__('Examples:'));\n            examples.forEach(example => {\n                example[0] = example[0].replace(/\\$0/g, base$0);\n            });\n            examples.forEach(example => {\n                if (example[1] === '') {\n                    ui.div({\n                        text: example[0],\n                        padding: [0, 2, 0, 2],\n                    });\n                }\n                else {\n                    ui.div({\n                        text: example[0],\n                        padding: [0, 2, 0, 2],\n                        width: maxWidth(examples, theWrap) + 4,\n                    }, {\n                        text: example[1],\n                    });\n                }\n            });\n            ui.div();\n        }\n        if (epilogs.length > 0) {\n            const e = epilogs\n                .map(epilog => epilog.replace(/\\$0/g, base$0))\n                .join('\\n');\n            ui.div(`${e}\\n`);\n        }\n        return ui.toString().replace(/\\s*$/, '');\n    };\n    function maxWidth(table, theWrap, modifier) {\n        let width = 0;\n        if (!Array.isArray(table)) {\n            table = Object.values(table).map(v => [v]);\n        }\n        table.forEach(v => {\n            width = Math.max(shim.stringWidth(modifier ? `${modifier} ${getText(v[0])}` : getText(v[0])) + getIndentation(v[0]), width);\n        });\n        if (theWrap)\n            width = Math.min(width, parseInt((theWrap * 0.5).toString(), 10));\n        return width;\n    }\n    function normalizeAliases() {\n        const demandedOptions = yargs.getDemandedOptions();\n        const options = yargs.getOptions();\n        (Object.keys(options.alias) || []).forEach(key => {\n            options.alias[key].forEach(alias => {\n                if (descriptions[alias])\n                    self.describe(key, descriptions[alias]);\n                if (alias in demandedOptions)\n                    yargs.demandOption(key, demandedOptions[alias]);\n                if (options.boolean.includes(alias))\n                    yargs.boolean(key);\n                if (options.count.includes(alias))\n                    yargs.count(key);\n                if (options.string.includes(alias))\n                    yargs.string(key);\n                if (options.normalize.includes(alias))\n                    yargs.normalize(key);\n                if (options.array.includes(alias))\n                    yargs.array(key);\n                if (options.number.includes(alias))\n                    yargs.number(key);\n            });\n        });\n    }\n    let cachedHelpMessage;\n    self.cacheHelpMessage = function () {\n        cachedHelpMessage = this.help();\n    };\n    self.clearCachedHelpMessage = function () {\n        cachedHelpMessage = undefined;\n    };\n    self.hasCachedHelpMessage = function () {\n        return !!cachedHelpMessage;\n    };\n    function addUngroupedKeys(keys, aliases, groups, defaultGroup) {\n        let groupedKeys = [];\n        let toCheck = null;\n        Object.keys(groups).forEach(group => {\n            groupedKeys = groupedKeys.concat(groups[group]);\n        });\n        keys.forEach(key => {\n            toCheck = [key].concat(aliases[key]);\n            if (!toCheck.some(k => groupedKeys.indexOf(k) !== -1)) {\n                groups[defaultGroup].push(key);\n            }\n        });\n        return groupedKeys;\n    }\n    function filterHiddenOptions(key) {\n        return (yargs.getOptions().hiddenOptions.indexOf(key) < 0 ||\n            yargs.parsed.argv[yargs.getOptions().showHiddenOpt]);\n    }\n    self.showHelp = (level) => {\n        const logger = yargs.getInternalMethods().getLoggerInstance();\n        if (!level)\n            level = 'error';\n        const emit = typeof level === 'function' ? level : logger[level];\n        emit(self.help());\n    };\n    self.functionDescription = fn => {\n        const description = fn.name\n            ? shim.Parser.decamelize(fn.name, '-')\n            : __('generated-value');\n        return ['(', description, ')'].join('');\n    };\n    self.stringifiedValues = function stringifiedValues(values, separator) {\n        let string = '';\n        const sep = separator || ', ';\n        const array = [].concat(values);\n        if (!values || !array.length)\n            return string;\n        array.forEach(value => {\n            if (string.length)\n                string += sep;\n            string += JSON.stringify(value);\n        });\n        return string;\n    };\n    function defaultString(value, defaultDescription) {\n        let string = `[${__('default:')} `;\n        if (value === undefined && !defaultDescription)\n            return null;\n        if (defaultDescription) {\n            string += defaultDescription;\n        }\n        else {\n            switch (typeof value) {\n                case 'string':\n                    string += `\"${value}\"`;\n                    break;\n                case 'object':\n                    string += JSON.stringify(value);\n                    break;\n                default:\n                    string += value;\n            }\n        }\n        return `${string}]`;\n    }\n    function windowWidth() {\n        const maxWidth = 80;\n        if (shim.process.stdColumns) {\n            return Math.min(maxWidth, shim.process.stdColumns);\n        }\n        else {\n            return maxWidth;\n        }\n    }\n    let version = null;\n    self.version = ver => {\n        version = ver;\n    };\n    self.showVersion = level => {\n        const logger = yargs.getInternalMethods().getLoggerInstance();\n        if (!level)\n            level = 'error';\n        const emit = typeof level === 'function' ? level : logger[level];\n        emit(version);\n    };\n    self.reset = function reset(localLookup) {\n        failMessage = null;\n        failureOutput = false;\n        usages = [];\n        usageDisabled = false;\n        epilogs = [];\n        examples = [];\n        commands = [];\n        descriptions = objFilter(descriptions, k => !localLookup[k]);\n        return self;\n    };\n    const frozens = [];\n    self.freeze = function freeze() {\n        frozens.push({\n            failMessage,\n            failureOutput,\n            usages,\n            usageDisabled,\n            epilogs,\n            examples,\n            commands,\n            descriptions,\n        });\n    };\n    self.unfreeze = function unfreeze(defaultCommand = false) {\n        const frozen = frozens.pop();\n        if (!frozen)\n            return;\n        if (defaultCommand) {\n            descriptions = { ...frozen.descriptions, ...descriptions };\n            commands = [...frozen.commands, ...commands];\n            usages = [...frozen.usages, ...usages];\n            examples = [...frozen.examples, ...examples];\n            epilogs = [...frozen.epilogs, ...epilogs];\n        }\n        else {\n            ({\n                failMessage,\n                failureOutput,\n                usages,\n                usageDisabled,\n                epilogs,\n                examples,\n                commands,\n                descriptions,\n            } = frozen);\n        }\n    };\n    return self;\n}\nfunction isIndentedText(text) {\n    return typeof text === 'object';\n}\nfunction addIndentation(text, indent) {\n    return isIndentedText(text)\n        ? { text: text.text, indentation: text.indentation + indent }\n        : { text, indentation: indent };\n}\nfunction getIndentation(text) {\n    return isIndentedText(text) ? text.indentation : 0;\n}\nfunction getText(text) {\n    return isIndentedText(text) ? text.text : text;\n}\n",
  "export const completionShTemplate = `###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word=\"\\${COMP_WORDS[COMP_CWORD]}\"\n    args=(\"\\${COMP_WORDS[@]}\")\n\n    # ask yargs to generate completions.\n    type_list=$({{app_path}} --get-yargs-completions \"\\${args[@]}\")\n\n    COMPREPLY=( $(compgen -W \"\\${type_list}\" -- \\${cur_word}) )\n\n    # if no match was found, fall back to filename completion\n    if [ \\${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n`;\nexport const completionZshTemplate = `#compdef {{app_name}}\n###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$'\\n' reply=($(COMP_CWORD=\"$((CURRENT-1))\" COMP_LINE=\"$BUFFER\" COMP_POINT=\"$CURSOR\" {{app_path}} --get-yargs-completions \"\\${words[@]}\"))\n  IFS=$si\n  _describe 'values' reply\n}\ncompdef _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n`;\n",
  "import { isCommandBuilderCallback } from './command.js';\nimport { assertNotStrictEqual } from './typings/common-types.js';\nimport * as templates from './completion-templates.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { parseCommand } from './parse-command.js';\nexport class Completion {\n    constructor(yargs, usage, command, shim) {\n        var _a, _b, _c;\n        this.yargs = yargs;\n        this.usage = usage;\n        this.command = command;\n        this.shim = shim;\n        this.completionKey = 'get-yargs-completions';\n        this.aliases = null;\n        this.customCompletionFunction = null;\n        this.indexAfterLastReset = 0;\n        this.zshShell =\n            (_c = (((_a = this.shim.getEnv('SHELL')) === null || _a === void 0 ? void 0 : _a.includes('zsh')) ||\n                ((_b = this.shim.getEnv('ZSH_NAME')) === null || _b === void 0 ? void 0 : _b.includes('zsh')))) !== null && _c !== void 0 ? _c : false;\n    }\n    defaultCompletion(args, argv, current, done) {\n        const handlers = this.command.getCommandHandlers();\n        for (let i = 0, ii = args.length; i < ii; ++i) {\n            if (handlers[args[i]] && handlers[args[i]].builder) {\n                const builder = handlers[args[i]].builder;\n                if (isCommandBuilderCallback(builder)) {\n                    this.indexAfterLastReset = i + 1;\n                    const y = this.yargs.getInternalMethods().reset();\n                    builder(y, true);\n                    return y.argv;\n                }\n            }\n        }\n        const completions = [];\n        this.commandCompletions(completions, args, current);\n        this.optionCompletions(completions, args, argv, current);\n        this.choicesFromOptionsCompletions(completions, args, argv, current);\n        this.choicesFromPositionalsCompletions(completions, args, argv, current);\n        done(null, completions);\n    }\n    commandCompletions(completions, args, current) {\n        const parentCommands = this.yargs\n            .getInternalMethods()\n            .getContext().commands;\n        if (!current.match(/^-/) &&\n            parentCommands[parentCommands.length - 1] !== current &&\n            !this.previousArgHasChoices(args)) {\n            this.usage.getCommands().forEach(usageCommand => {\n                const commandName = parseCommand(usageCommand[0]).cmd;\n                if (args.indexOf(commandName) === -1) {\n                    if (!this.zshShell) {\n                        completions.push(commandName);\n                    }\n                    else {\n                        const desc = usageCommand[1] || '';\n                        completions.push(commandName.replace(/:/g, '\\\\:') + ':' + desc);\n                    }\n                }\n            });\n        }\n    }\n    optionCompletions(completions, args, argv, current) {\n        if ((current.match(/^-/) || (current === '' && completions.length === 0)) &&\n            !this.previousArgHasChoices(args)) {\n            const options = this.yargs.getOptions();\n            const positionalKeys = this.yargs.getGroups()[this.usage.getPositionalGroupName()] || [];\n            Object.keys(options.key).forEach(key => {\n                const negable = !!options.configuration['boolean-negation'] &&\n                    options.boolean.includes(key);\n                const isPositionalKey = positionalKeys.includes(key);\n                if (!isPositionalKey &&\n                    !options.hiddenOptions.includes(key) &&\n                    !this.argsContainKey(args, key, negable)) {\n                    this.completeOptionKey(key, completions, current, negable && !!options.default[key]);\n                }\n            });\n        }\n    }\n    choicesFromOptionsCompletions(completions, args, argv, current) {\n        if (this.previousArgHasChoices(args)) {\n            const choices = this.getPreviousArgChoices(args);\n            if (choices && choices.length > 0) {\n                completions.push(...choices.map(c => c.replace(/:/g, '\\\\:')));\n            }\n        }\n    }\n    choicesFromPositionalsCompletions(completions, args, argv, current) {\n        if (current === '' &&\n            completions.length > 0 &&\n            this.previousArgHasChoices(args)) {\n            return;\n        }\n        const positionalKeys = this.yargs.getGroups()[this.usage.getPositionalGroupName()] || [];\n        const offset = Math.max(this.indexAfterLastReset, this.yargs.getInternalMethods().getContext().commands.length +\n            1);\n        const positionalKey = positionalKeys[argv._.length - offset - 1];\n        if (!positionalKey) {\n            return;\n        }\n        const choices = this.yargs.getOptions().choices[positionalKey] || [];\n        for (const choice of choices) {\n            if (choice.startsWith(current)) {\n                completions.push(choice.replace(/:/g, '\\\\:'));\n            }\n        }\n    }\n    getPreviousArgChoices(args) {\n        if (args.length < 1)\n            return;\n        let previousArg = args[args.length - 1];\n        let filter = '';\n        if (!previousArg.startsWith('-') && args.length > 1) {\n            filter = previousArg;\n            previousArg = args[args.length - 2];\n        }\n        if (!previousArg.startsWith('-'))\n            return;\n        const previousArgKey = previousArg.replace(/^-+/, '');\n        const options = this.yargs.getOptions();\n        const possibleAliases = [\n            previousArgKey,\n            ...(this.yargs.getAliases()[previousArgKey] || []),\n        ];\n        let choices;\n        for (const possibleAlias of possibleAliases) {\n            if (Object.prototype.hasOwnProperty.call(options.key, possibleAlias) &&\n                Array.isArray(options.choices[possibleAlias])) {\n                choices = options.choices[possibleAlias];\n                break;\n            }\n        }\n        if (choices) {\n            return choices.filter(choice => !filter || choice.startsWith(filter));\n        }\n    }\n    previousArgHasChoices(args) {\n        const choices = this.getPreviousArgChoices(args);\n        return choices !== undefined && choices.length > 0;\n    }\n    argsContainKey(args, key, negable) {\n        const argsContains = (s) => args.indexOf((/^[^0-9]$/.test(s) ? '-' : '--') + s) !== -1;\n        if (argsContains(key))\n            return true;\n        if (negable && argsContains(`no-${key}`))\n            return true;\n        if (this.aliases) {\n            for (const alias of this.aliases[key]) {\n                if (argsContains(alias))\n                    return true;\n            }\n        }\n        return false;\n    }\n    completeOptionKey(key, completions, current, negable) {\n        var _a, _b, _c, _d;\n        let keyWithDesc = key;\n        if (this.zshShell) {\n            const descs = this.usage.getDescriptions();\n            const aliasKey = (_b = (_a = this === null || this === void 0 ? void 0 : this.aliases) === null || _a === void 0 ? void 0 : _a[key]) === null || _b === void 0 ? void 0 : _b.find(alias => {\n                const desc = descs[alias];\n                return typeof desc === 'string' && desc.length > 0;\n            });\n            const descFromAlias = aliasKey ? descs[aliasKey] : undefined;\n            const desc = (_d = (_c = descs[key]) !== null && _c !== void 0 ? _c : descFromAlias) !== null && _d !== void 0 ? _d : '';\n            keyWithDesc = `${key.replace(/:/g, '\\\\:')}:${desc\n                .replace('__yargsString__:', '')\n                .replace(/(\\r\\n|\\n|\\r)/gm, ' ')}`;\n        }\n        const startsByTwoDashes = (s) => /^--/.test(s);\n        const isShortOption = (s) => /^[^0-9]$/.test(s);\n        const dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';\n        completions.push(dashes + keyWithDesc);\n        if (negable) {\n            completions.push(dashes + 'no-' + keyWithDesc);\n        }\n    }\n    customCompletion(args, argv, current, done) {\n        assertNotStrictEqual(this.customCompletionFunction, null, this.shim);\n        if (isSyncCompletionFunction(this.customCompletionFunction)) {\n            const result = this.customCompletionFunction(current, argv);\n            if (isPromise(result)) {\n                return result\n                    .then(list => {\n                    this.shim.process.nextTick(() => {\n                        done(null, list);\n                    });\n                })\n                    .catch(err => {\n                    this.shim.process.nextTick(() => {\n                        done(err, undefined);\n                    });\n                });\n            }\n            return done(null, result);\n        }\n        else if (isFallbackCompletionFunction(this.customCompletionFunction)) {\n            return this.customCompletionFunction(current, argv, (onCompleted = done) => this.defaultCompletion(args, argv, current, onCompleted), completions => {\n                done(null, completions);\n            });\n        }\n        else {\n            return this.customCompletionFunction(current, argv, completions => {\n                done(null, completions);\n            });\n        }\n    }\n    getCompletion(args, done) {\n        const current = args.length ? args[args.length - 1] : '';\n        const argv = this.yargs.parse(args, true);\n        const completionFunction = this.customCompletionFunction\n            ? (argv) => this.customCompletion(args, argv, current, done)\n            : (argv) => this.defaultCompletion(args, argv, current, done);\n        return isPromise(argv)\n            ? argv.then(completionFunction)\n            : completionFunction(argv);\n    }\n    generateCompletionScript($0, cmd) {\n        let script = this.zshShell\n            ? templates.completionZshTemplate\n            : templates.completionShTemplate;\n        const name = this.shim.path.basename($0);\n        if ($0.match(/\\.js$/))\n            $0 = `./${$0}`;\n        script = script.replace(/{{app_name}}/g, name);\n        script = script.replace(/{{completion_command}}/g, cmd);\n        return script.replace(/{{app_path}}/g, $0);\n    }\n    registerFunction(fn) {\n        this.customCompletionFunction = fn;\n    }\n    setParsed(parsed) {\n        this.aliases = parsed.aliases;\n    }\n}\nexport function completion(yargs, usage, command, shim) {\n    return new Completion(yargs, usage, command, shim);\n}\nfunction isSyncCompletionFunction(completionFunction) {\n    return completionFunction.length < 3;\n}\nfunction isFallbackCompletionFunction(completionFunction) {\n    return completionFunction.length > 3;\n}\n",
  "export function levenshtein(a, b) {\n    if (a.length === 0)\n        return b.length;\n    if (b.length === 0)\n        return a.length;\n    const matrix = [];\n    let i;\n    for (i = 0; i <= b.length; i++) {\n        matrix[i] = [i];\n    }\n    let j;\n    for (j = 0; j <= a.length; j++) {\n        matrix[0][j] = j;\n    }\n    for (i = 1; i <= b.length; i++) {\n        for (j = 1; j <= a.length; j++) {\n            if (b.charAt(i - 1) === a.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            }\n            else {\n                if (i > 1 &&\n                    j > 1 &&\n                    b.charAt(i - 2) === a.charAt(j - 1) &&\n                    b.charAt(i - 1) === a.charAt(j - 2)) {\n                    matrix[i][j] = matrix[i - 2][j - 2] + 1;\n                }\n                else {\n                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1));\n                }\n            }\n        }\n    }\n    return matrix[b.length][a.length];\n}\n",
  "import { argsert } from './argsert.js';\nimport { assertNotStrictEqual, } from './typings/common-types.js';\nimport { levenshtein as distance } from './utils/levenshtein.js';\nimport { objFilter } from './utils/obj-filter.js';\nconst specialKeys = ['$0', '--', '_'];\nexport function validation(yargs, usage, shim) {\n    const __ = shim.y18n.__;\n    const __n = shim.y18n.__n;\n    const self = {};\n    self.nonOptionCount = function nonOptionCount(argv) {\n        const demandedCommands = yargs.getDemandedCommands();\n        const positionalCount = argv._.length + (argv['--'] ? argv['--'].length : 0);\n        const _s = positionalCount - yargs.getInternalMethods().getContext().commands.length;\n        if (demandedCommands._ &&\n            (_s < demandedCommands._.min || _s > demandedCommands._.max)) {\n            if (_s < demandedCommands._.min) {\n                if (demandedCommands._.minMsg !== undefined) {\n                    usage.fail(demandedCommands._.minMsg\n                        ? demandedCommands._.minMsg\n                            .replace(/\\$0/g, _s.toString())\n                            .replace(/\\$1/, demandedCommands._.min.toString())\n                        : null);\n                }\n                else {\n                    usage.fail(__n('Not enough non-option arguments: got %s, need at least %s', 'Not enough non-option arguments: got %s, need at least %s', _s, _s.toString(), demandedCommands._.min.toString()));\n                }\n            }\n            else if (_s > demandedCommands._.max) {\n                if (demandedCommands._.maxMsg !== undefined) {\n                    usage.fail(demandedCommands._.maxMsg\n                        ? demandedCommands._.maxMsg\n                            .replace(/\\$0/g, _s.toString())\n                            .replace(/\\$1/, demandedCommands._.max.toString())\n                        : null);\n                }\n                else {\n                    usage.fail(__n('Too many non-option arguments: got %s, maximum of %s', 'Too many non-option arguments: got %s, maximum of %s', _s, _s.toString(), demandedCommands._.max.toString()));\n                }\n            }\n        }\n    };\n    self.positionalCount = function positionalCount(required, observed) {\n        if (observed < required) {\n            usage.fail(__n('Not enough non-option arguments: got %s, need at least %s', 'Not enough non-option arguments: got %s, need at least %s', observed, observed + '', required + ''));\n        }\n    };\n    self.requiredArguments = function requiredArguments(argv, demandedOptions) {\n        let missing = null;\n        for (const key of Object.keys(demandedOptions)) {\n            if (!Object.prototype.hasOwnProperty.call(argv, key) ||\n                typeof argv[key] === 'undefined') {\n                missing = missing || {};\n                missing[key] = demandedOptions[key];\n            }\n        }\n        if (missing) {\n            const customMsgs = [];\n            for (const key of Object.keys(missing)) {\n                const msg = missing[key];\n                if (msg && customMsgs.indexOf(msg) < 0) {\n                    customMsgs.push(msg);\n                }\n            }\n            const customMsg = customMsgs.length ? `\\n${customMsgs.join('\\n')}` : '';\n            usage.fail(__n('Missing required argument: %s', 'Missing required arguments: %s', Object.keys(missing).length, Object.keys(missing).join(', ') + customMsg));\n        }\n    };\n    self.unknownArguments = function unknownArguments(argv, aliases, positionalMap, isDefaultCommand, checkPositionals = true) {\n        var _a;\n        const commandKeys = yargs\n            .getInternalMethods()\n            .getCommandInstance()\n            .getCommands();\n        const unknown = [];\n        const currentContext = yargs.getInternalMethods().getContext();\n        Object.keys(argv).forEach(key => {\n            if (!specialKeys.includes(key) &&\n                !Object.prototype.hasOwnProperty.call(positionalMap, key) &&\n                !Object.prototype.hasOwnProperty.call(yargs.getInternalMethods().getParseContext(), key) &&\n                !self.isValidAndSomeAliasIsNotNew(key, aliases)) {\n                unknown.push(key);\n            }\n        });\n        if (checkPositionals &&\n            (currentContext.commands.length > 0 ||\n                commandKeys.length > 0 ||\n                isDefaultCommand)) {\n            argv._.slice(currentContext.commands.length).forEach(key => {\n                if (!commandKeys.includes('' + key)) {\n                    unknown.push('' + key);\n                }\n            });\n        }\n        if (checkPositionals) {\n            const demandedCommands = yargs.getDemandedCommands();\n            const maxNonOptDemanded = ((_a = demandedCommands._) === null || _a === void 0 ? void 0 : _a.max) || 0;\n            const expected = currentContext.commands.length + maxNonOptDemanded;\n            if (expected < argv._.length) {\n                argv._.slice(expected).forEach(key => {\n                    key = String(key);\n                    if (!currentContext.commands.includes(key) &&\n                        !unknown.includes(key)) {\n                        unknown.push(key);\n                    }\n                });\n            }\n        }\n        if (unknown.length) {\n            usage.fail(__n('Unknown argument: %s', 'Unknown arguments: %s', unknown.length, unknown.map(s => (s.trim() ? s : `\"${s}\"`)).join(', ')));\n        }\n    };\n    self.unknownCommands = function unknownCommands(argv) {\n        const commandKeys = yargs\n            .getInternalMethods()\n            .getCommandInstance()\n            .getCommands();\n        const unknown = [];\n        const currentContext = yargs.getInternalMethods().getContext();\n        if (currentContext.commands.length > 0 || commandKeys.length > 0) {\n            argv._.slice(currentContext.commands.length).forEach(key => {\n                if (!commandKeys.includes('' + key)) {\n                    unknown.push('' + key);\n                }\n            });\n        }\n        if (unknown.length > 0) {\n            usage.fail(__n('Unknown command: %s', 'Unknown commands: %s', unknown.length, unknown.join(', ')));\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    self.isValidAndSomeAliasIsNotNew = function isValidAndSomeAliasIsNotNew(key, aliases) {\n        if (!Object.prototype.hasOwnProperty.call(aliases, key)) {\n            return false;\n        }\n        const newAliases = yargs.parsed.newAliases;\n        return [key, ...aliases[key]].some(a => !Object.prototype.hasOwnProperty.call(newAliases, a) || !newAliases[key]);\n    };\n    self.limitedChoices = function limitedChoices(argv) {\n        const options = yargs.getOptions();\n        const invalid = {};\n        if (!Object.keys(options.choices).length)\n            return;\n        Object.keys(argv).forEach(key => {\n            if (specialKeys.indexOf(key) === -1 &&\n                Object.prototype.hasOwnProperty.call(options.choices, key)) {\n                [].concat(argv[key]).forEach(value => {\n                    if (options.choices[key].indexOf(value) === -1 &&\n                        value !== undefined) {\n                        invalid[key] = (invalid[key] || []).concat(value);\n                    }\n                });\n            }\n        });\n        const invalidKeys = Object.keys(invalid);\n        if (!invalidKeys.length)\n            return;\n        let msg = __('Invalid values:');\n        invalidKeys.forEach(key => {\n            msg += `\\n  ${__('Argument: %s, Given: %s, Choices: %s', key, usage.stringifiedValues(invalid[key]), usage.stringifiedValues(options.choices[key]))}`;\n        });\n        usage.fail(msg);\n    };\n    let implied = {};\n    self.implies = function implies(key, value) {\n        argsert('<string|object> [array|number|string]', [key, value], arguments.length);\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                self.implies(k, key[k]);\n            });\n        }\n        else {\n            yargs.global(key);\n            if (!implied[key]) {\n                implied[key] = [];\n            }\n            if (Array.isArray(value)) {\n                value.forEach(i => self.implies(key, i));\n            }\n            else {\n                assertNotStrictEqual(value, undefined, shim);\n                implied[key].push(value);\n            }\n        }\n    };\n    self.getImplied = function getImplied() {\n        return implied;\n    };\n    function keyExists(argv, val) {\n        const num = Number(val);\n        val = isNaN(num) ? val : num;\n        if (typeof val === 'number') {\n            val = argv._.length >= val;\n        }\n        else if (val.match(/^--no-.+/)) {\n            val = val.match(/^--no-(.+)/)[1];\n            val = !Object.prototype.hasOwnProperty.call(argv, val);\n        }\n        else {\n            val = Object.prototype.hasOwnProperty.call(argv, val);\n        }\n        return val;\n    }\n    self.implications = function implications(argv) {\n        const implyFail = [];\n        Object.keys(implied).forEach(key => {\n            const origKey = key;\n            (implied[key] || []).forEach(value => {\n                let key = origKey;\n                const origValue = value;\n                key = keyExists(argv, key);\n                value = keyExists(argv, value);\n                if (key && !value) {\n                    implyFail.push(` ${origKey} -> ${origValue}`);\n                }\n            });\n        });\n        if (implyFail.length) {\n            let msg = `${__('Implications failed:')}\\n`;\n            implyFail.forEach(value => {\n                msg += value;\n            });\n            usage.fail(msg);\n        }\n    };\n    let conflicting = {};\n    self.conflicts = function conflicts(key, value) {\n        argsert('<string|object> [array|string]', [key, value], arguments.length);\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                self.conflicts(k, key[k]);\n            });\n        }\n        else {\n            yargs.global(key);\n            if (!conflicting[key]) {\n                conflicting[key] = [];\n            }\n            if (Array.isArray(value)) {\n                value.forEach(i => self.conflicts(key, i));\n            }\n            else {\n                conflicting[key].push(value);\n            }\n        }\n    };\n    self.getConflicting = () => conflicting;\n    self.conflicting = function conflictingFn(argv) {\n        Object.keys(argv).forEach(key => {\n            if (conflicting[key]) {\n                conflicting[key].forEach(value => {\n                    if (value && argv[key] !== undefined && argv[value] !== undefined) {\n                        usage.fail(__('Arguments %s and %s are mutually exclusive', key, value));\n                    }\n                });\n            }\n        });\n        if (yargs.getInternalMethods().getParserConfiguration()['strip-dashed']) {\n            Object.keys(conflicting).forEach(key => {\n                conflicting[key].forEach(value => {\n                    if (value &&\n                        argv[shim.Parser.camelCase(key)] !== undefined &&\n                        argv[shim.Parser.camelCase(value)] !== undefined) {\n                        usage.fail(__('Arguments %s and %s are mutually exclusive', key, value));\n                    }\n                });\n            });\n        }\n    };\n    self.recommendCommands = function recommendCommands(cmd, potentialCommands) {\n        const threshold = 3;\n        potentialCommands = potentialCommands.sort((a, b) => b.length - a.length);\n        let recommended = null;\n        let bestDistance = Infinity;\n        for (let i = 0, candidate; (candidate = potentialCommands[i]) !== undefined; i++) {\n            const d = distance(cmd, candidate);\n            if (d <= threshold && d < bestDistance) {\n                bestDistance = d;\n                recommended = candidate;\n            }\n        }\n        if (recommended)\n            usage.fail(__('Did you mean %s?', recommended));\n    };\n    self.reset = function reset(localLookup) {\n        implied = objFilter(implied, k => !localLookup[k]);\n        conflicting = objFilter(conflicting, k => !localLookup[k]);\n        return self;\n    };\n    const frozens = [];\n    self.freeze = function freeze() {\n        frozens.push({\n            implied,\n            conflicting,\n        });\n    };\n    self.unfreeze = function unfreeze() {\n        const frozen = frozens.pop();\n        assertNotStrictEqual(frozen, undefined, shim);\n        ({ implied, conflicting } = frozen);\n    };\n    return self;\n}\n",
  "import { YError } from '../yerror.js';\nlet previouslyVisitedConfigs = [];\nlet shim;\nexport function applyExtends(config, cwd, mergeExtends, _shim) {\n    shim = _shim;\n    let defaultConfig = {};\n    if (Object.prototype.hasOwnProperty.call(config, 'extends')) {\n        if (typeof config.extends !== 'string')\n            return defaultConfig;\n        const isPath = /\\.json|\\..*rc$/.test(config.extends);\n        let pathToDefault = null;\n        if (!isPath) {\n            try {\n                pathToDefault = require.resolve(config.extends);\n            }\n            catch (_err) {\n                return config;\n            }\n        }\n        else {\n            pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n        }\n        checkForCircularExtends(pathToDefault);\n        previouslyVisitedConfigs.push(pathToDefault);\n        defaultConfig = isPath\n            ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8'))\n            : require(config.extends);\n        delete config.extends;\n        defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);\n    }\n    previouslyVisitedConfigs = [];\n    return mergeExtends\n        ? mergeDeep(defaultConfig, config)\n        : Object.assign({}, defaultConfig, config);\n}\nfunction checkForCircularExtends(cfgPath) {\n    if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n        throw new YError(`Circular extended configurations: '${cfgPath}'.`);\n    }\n}\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n    return shim.path.resolve(cwd, pathToExtend);\n}\nfunction mergeDeep(config1, config2) {\n    const target = {};\n    function isObject(obj) {\n        return obj && typeof obj === 'object' && !Array.isArray(obj);\n    }\n    Object.assign(target, config1);\n    for (const key of Object.keys(config2)) {\n        if (isObject(config2[key]) && isObject(target[key])) {\n            target[key] = mergeDeep(config1[key], config2[key]);\n        }\n        else {\n            target[key] = config2[key];\n        }\n    }\n    return target;\n}\n",
  "import { YError } from '../yerror.js';\nlet previouslyVisitedConfigs = [];\nlet shim;\nexport function applyExtends(config, cwd, mergeExtends, _shim) {\n    shim = _shim;\n    let defaultConfig = {};\n    if (Object.prototype.hasOwnProperty.call(config, 'extends')) {\n        if (typeof config.extends !== 'string')\n            return defaultConfig;\n        const isPath = /\\.json|\\..*rc$/.test(config.extends);\n        let pathToDefault = null;\n        if (!isPath) {\n            try {\n                pathToDefault = require.resolve(config.extends);\n            }\n            catch (_err) {\n                return config;\n            }\n        }\n        else {\n            pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n        }\n        checkForCircularExtends(pathToDefault);\n        previouslyVisitedConfigs.push(pathToDefault);\n        defaultConfig = isPath\n            ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8'))\n            : require(config.extends);\n        delete config.extends;\n        defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);\n    }\n    previouslyVisitedConfigs = [];\n    return mergeExtends\n        ? mergeDeep(defaultConfig, config)\n        : Object.assign({}, defaultConfig, config);\n}\nfunction checkForCircularExtends(cfgPath) {\n    if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n        throw new YError(`Circular extended configurations: '${cfgPath}'.`);\n    }\n}\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n    return shim.path.resolve(cwd, pathToExtend);\n}\nfunction mergeDeep(config1, config2) {\n    const target = {};\n    function isObject(obj) {\n        return obj && typeof obj === 'object' && !Array.isArray(obj);\n    }\n    Object.assign(target, config1);\n    for (const key of Object.keys(config2)) {\n        if (isObject(config2[key]) && isObject(target[key])) {\n            target[key] = mergeDeep(config1[key], config2[key]);\n        }\n        else {\n            target[key] = config2[key];\n        }\n    }\n    return target;\n}\n",
  "var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _YargsInstance_command, _YargsInstance_cwd, _YargsInstance_context, _YargsInstance_completion, _YargsInstance_completionCommand, _YargsInstance_defaultShowHiddenOpt, _YargsInstance_exitError, _YargsInstance_detectLocale, _YargsInstance_emittedWarnings, _YargsInstance_exitProcess, _YargsInstance_frozens, _YargsInstance_globalMiddleware, _YargsInstance_groups, _YargsInstance_hasOutput, _YargsInstance_helpOpt, _YargsInstance_isGlobalContext, _YargsInstance_logger, _YargsInstance_output, _YargsInstance_options, _YargsInstance_parentRequire, _YargsInstance_parserConfig, _YargsInstance_parseFn, _YargsInstance_parseContext, _YargsInstance_pkgs, _YargsInstance_preservedGroups, _YargsInstance_processArgs, _YargsInstance_recommendCommands, _YargsInstance_shim, _YargsInstance_strict, _YargsInstance_strictCommands, _YargsInstance_strictOptions, _YargsInstance_usage, _YargsInstance_usageConfig, _YargsInstance_versionOpt, _YargsInstance_validation;\nimport { command as Command, } from './command.js';\nimport { assertNotStrictEqual, assertSingleKey, objectKeys, } from './typings/common-types.js';\nimport { YError } from './yerror.js';\nimport { usage as Usage } from './usage.js';\nimport { argsert } from './argsert.js';\nimport { completion as Completion, } from './completion.js';\nimport { validation as Validation, } from './validation.js';\nimport { objFilter } from './utils/obj-filter.js';\nimport { applyExtends } from './utils/apply-extends.js';\nimport { applyMiddleware, GlobalMiddleware, } from './middleware.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { maybeAsyncResult } from './utils/maybe-async-result.js';\nimport setBlocking from './utils/set-blocking.js';\nexport function YargsFactory(_shim) {\n    return (processArgs = [], cwd = _shim.process.cwd(), parentRequire) => {\n        const yargs = new YargsInstance(processArgs, cwd, parentRequire, _shim);\n        Object.defineProperty(yargs, 'argv', {\n            get: () => {\n                return yargs.parse();\n            },\n            enumerable: true,\n        });\n        yargs.help();\n        yargs.version();\n        return yargs;\n    };\n}\nconst kCopyDoubleDash = Symbol('copyDoubleDash');\nconst kCreateLogger = Symbol('copyDoubleDash');\nconst kDeleteFromParserHintObject = Symbol('deleteFromParserHintObject');\nconst kEmitWarning = Symbol('emitWarning');\nconst kFreeze = Symbol('freeze');\nconst kGetDollarZero = Symbol('getDollarZero');\nconst kGetParserConfiguration = Symbol('getParserConfiguration');\nconst kGetUsageConfiguration = Symbol('getUsageConfiguration');\nconst kGuessLocale = Symbol('guessLocale');\nconst kGuessVersion = Symbol('guessVersion');\nconst kParsePositionalNumbers = Symbol('parsePositionalNumbers');\nconst kPkgUp = Symbol('pkgUp');\nconst kPopulateParserHintArray = Symbol('populateParserHintArray');\nconst kPopulateParserHintSingleValueDictionary = Symbol('populateParserHintSingleValueDictionary');\nconst kPopulateParserHintArrayDictionary = Symbol('populateParserHintArrayDictionary');\nconst kPopulateParserHintDictionary = Symbol('populateParserHintDictionary');\nconst kSanitizeKey = Symbol('sanitizeKey');\nconst kSetKey = Symbol('setKey');\nconst kUnfreeze = Symbol('unfreeze');\nconst kValidateAsync = Symbol('validateAsync');\nconst kGetCommandInstance = Symbol('getCommandInstance');\nconst kGetContext = Symbol('getContext');\nconst kGetHasOutput = Symbol('getHasOutput');\nconst kGetLoggerInstance = Symbol('getLoggerInstance');\nconst kGetParseContext = Symbol('getParseContext');\nconst kGetUsageInstance = Symbol('getUsageInstance');\nconst kGetValidationInstance = Symbol('getValidationInstance');\nconst kHasParseCallback = Symbol('hasParseCallback');\nconst kIsGlobalContext = Symbol('isGlobalContext');\nconst kPostProcess = Symbol('postProcess');\nconst kRebase = Symbol('rebase');\nconst kReset = Symbol('reset');\nconst kRunYargsParserAndExecuteCommands = Symbol('runYargsParserAndExecuteCommands');\nconst kRunValidation = Symbol('runValidation');\nconst kSetHasOutput = Symbol('setHasOutput');\nconst kTrackManuallySetKeys = Symbol('kTrackManuallySetKeys');\nexport class YargsInstance {\n    constructor(processArgs = [], cwd, parentRequire, shim) {\n        this.customScriptName = false;\n        this.parsed = false;\n        _YargsInstance_command.set(this, void 0);\n        _YargsInstance_cwd.set(this, void 0);\n        _YargsInstance_context.set(this, { commands: [], fullCommands: [] });\n        _YargsInstance_completion.set(this, null);\n        _YargsInstance_completionCommand.set(this, null);\n        _YargsInstance_defaultShowHiddenOpt.set(this, 'show-hidden');\n        _YargsInstance_exitError.set(this, null);\n        _YargsInstance_detectLocale.set(this, true);\n        _YargsInstance_emittedWarnings.set(this, {});\n        _YargsInstance_exitProcess.set(this, true);\n        _YargsInstance_frozens.set(this, []);\n        _YargsInstance_globalMiddleware.set(this, void 0);\n        _YargsInstance_groups.set(this, {});\n        _YargsInstance_hasOutput.set(this, false);\n        _YargsInstance_helpOpt.set(this, null);\n        _YargsInstance_isGlobalContext.set(this, true);\n        _YargsInstance_logger.set(this, void 0);\n        _YargsInstance_output.set(this, '');\n        _YargsInstance_options.set(this, void 0);\n        _YargsInstance_parentRequire.set(this, void 0);\n        _YargsInstance_parserConfig.set(this, {});\n        _YargsInstance_parseFn.set(this, null);\n        _YargsInstance_parseContext.set(this, null);\n        _YargsInstance_pkgs.set(this, {});\n        _YargsInstance_preservedGroups.set(this, {});\n        _YargsInstance_processArgs.set(this, void 0);\n        _YargsInstance_recommendCommands.set(this, false);\n        _YargsInstance_shim.set(this, void 0);\n        _YargsInstance_strict.set(this, false);\n        _YargsInstance_strictCommands.set(this, false);\n        _YargsInstance_strictOptions.set(this, false);\n        _YargsInstance_usage.set(this, void 0);\n        _YargsInstance_usageConfig.set(this, {});\n        _YargsInstance_versionOpt.set(this, null);\n        _YargsInstance_validation.set(this, void 0);\n        __classPrivateFieldSet(this, _YargsInstance_shim, shim, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_processArgs, processArgs, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_cwd, cwd, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_parentRequire, parentRequire, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_globalMiddleware, new GlobalMiddleware(this), \"f\");\n        this.$0 = this[kGetDollarZero]();\n        this[kReset]();\n        __classPrivateFieldSet(this, _YargsInstance_command, __classPrivateFieldGet(this, _YargsInstance_command, \"f\"), \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_usage, __classPrivateFieldGet(this, _YargsInstance_usage, \"f\"), \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_validation, __classPrivateFieldGet(this, _YargsInstance_validation, \"f\"), \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_options, __classPrivateFieldGet(this, _YargsInstance_options, \"f\"), \"f\");\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").showHiddenOpt = __classPrivateFieldGet(this, _YargsInstance_defaultShowHiddenOpt, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_logger, this[kCreateLogger](), \"f\");\n    }\n    addHelpOpt(opt, msg) {\n        const defaultHelpOpt = 'help';\n        argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n        if (__classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\")) {\n            this[kDeleteFromParserHintObject](__classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\"));\n            __classPrivateFieldSet(this, _YargsInstance_helpOpt, null, \"f\");\n        }\n        if (opt === false && msg === undefined)\n            return this;\n        __classPrivateFieldSet(this, _YargsInstance_helpOpt, typeof opt === 'string' ? opt : defaultHelpOpt, \"f\");\n        this.boolean(__classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\"));\n        this.describe(__classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\"), msg || __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").deferY18nLookup('Show help'));\n        return this;\n    }\n    help(opt, msg) {\n        return this.addHelpOpt(opt, msg);\n    }\n    addShowHiddenOpt(opt, msg) {\n        argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n        if (opt === false && msg === undefined)\n            return this;\n        const showHiddenOpt = typeof opt === 'string' ? opt : __classPrivateFieldGet(this, _YargsInstance_defaultShowHiddenOpt, \"f\");\n        this.boolean(showHiddenOpt);\n        this.describe(showHiddenOpt, msg || __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").deferY18nLookup('Show hidden options'));\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").showHiddenOpt = showHiddenOpt;\n        return this;\n    }\n    showHidden(opt, msg) {\n        return this.addShowHiddenOpt(opt, msg);\n    }\n    alias(key, value) {\n        argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n        this[kPopulateParserHintArrayDictionary](this.alias.bind(this), 'alias', key, value);\n        return this;\n    }\n    array(keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        this[kPopulateParserHintArray]('array', keys);\n        this[kTrackManuallySetKeys](keys);\n        return this;\n    }\n    boolean(keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        this[kPopulateParserHintArray]('boolean', keys);\n        this[kTrackManuallySetKeys](keys);\n        return this;\n    }\n    check(f, global) {\n        argsert('<function> [boolean]', [f, global], arguments.length);\n        this.middleware((argv, _yargs) => {\n            return maybeAsyncResult(() => {\n                return f(argv, _yargs.getOptions());\n            }, (result) => {\n                if (!result) {\n                    __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").fail(__classPrivateFieldGet(this, _YargsInstance_shim, \"f\").y18n.__('Argument check failed: %s', f.toString()));\n                }\n                else if (typeof result === 'string' || result instanceof Error) {\n                    __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").fail(result.toString(), result);\n                }\n                return argv;\n            }, (err) => {\n                __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").fail(err.message ? err.message : err.toString(), err);\n                return argv;\n            });\n        }, false, global);\n        return this;\n    }\n    choices(key, value) {\n        argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n        this[kPopulateParserHintArrayDictionary](this.choices.bind(this), 'choices', key, value);\n        return this;\n    }\n    coerce(keys, value) {\n        argsert('<object|string|array> [function]', [keys, value], arguments.length);\n        if (Array.isArray(keys)) {\n            if (!value) {\n                throw new YError('coerce callback must be provided');\n            }\n            for (const key of keys) {\n                this.coerce(key, value);\n            }\n            return this;\n        }\n        else if (typeof keys === 'object') {\n            for (const key of Object.keys(keys)) {\n                this.coerce(key, keys[key]);\n            }\n            return this;\n        }\n        if (!value) {\n            throw new YError('coerce callback must be provided');\n        }\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").key[keys] = true;\n        __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").addCoerceMiddleware((argv, yargs) => {\n            let aliases;\n            const shouldCoerce = Object.prototype.hasOwnProperty.call(argv, keys);\n            if (!shouldCoerce) {\n                return argv;\n            }\n            return maybeAsyncResult(() => {\n                aliases = yargs.getAliases();\n                return value(argv[keys]);\n            }, (result) => {\n                argv[keys] = result;\n                const stripAliased = yargs\n                    .getInternalMethods()\n                    .getParserConfiguration()['strip-aliased'];\n                if (aliases[keys] && stripAliased !== true) {\n                    for (const alias of aliases[keys]) {\n                        argv[alias] = result;\n                    }\n                }\n                return argv;\n            }, (err) => {\n                throw new YError(err.message);\n            });\n        }, keys);\n        return this;\n    }\n    conflicts(key1, key2) {\n        argsert('<string|object> [string|array]', [key1, key2], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").conflicts(key1, key2);\n        return this;\n    }\n    config(key = 'config', msg, parseFn) {\n        argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length);\n        if (typeof key === 'object' && !Array.isArray(key)) {\n            key = applyExtends(key, __classPrivateFieldGet(this, _YargsInstance_cwd, \"f\"), this[kGetParserConfiguration]()['deep-merge-config'] || false, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").configObjects = (__classPrivateFieldGet(this, _YargsInstance_options, \"f\").configObjects || []).concat(key);\n            return this;\n        }\n        if (typeof msg === 'function') {\n            parseFn = msg;\n            msg = undefined;\n        }\n        this.describe(key, msg || __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").deferY18nLookup('Path to JSON config file'));\n        (Array.isArray(key) ? key : [key]).forEach(k => {\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").config[k] = parseFn || true;\n        });\n        return this;\n    }\n    completion(cmd, desc, fn) {\n        argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length);\n        if (typeof desc === 'function') {\n            fn = desc;\n            desc = undefined;\n        }\n        __classPrivateFieldSet(this, _YargsInstance_completionCommand, cmd || __classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\") || 'completion', \"f\");\n        if (!desc && desc !== false) {\n            desc = 'generate completion script';\n        }\n        this.command(__classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\"), desc);\n        if (fn)\n            __classPrivateFieldGet(this, _YargsInstance_completion, \"f\").registerFunction(fn);\n        return this;\n    }\n    command(cmd, description, builder, handler, middlewares, deprecated) {\n        argsert('<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]', [cmd, description, builder, handler, middlewares, deprecated], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_command, \"f\").addHandler(cmd, description, builder, handler, middlewares, deprecated);\n        return this;\n    }\n    commands(cmd, description, builder, handler, middlewares, deprecated) {\n        return this.command(cmd, description, builder, handler, middlewares, deprecated);\n    }\n    commandDir(dir, opts) {\n        argsert('<string> [object]', [dir, opts], arguments.length);\n        const req = __classPrivateFieldGet(this, _YargsInstance_parentRequire, \"f\") || __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").require;\n        __classPrivateFieldGet(this, _YargsInstance_command, \"f\").addDirectory(dir, req, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getCallerFile(), opts);\n        return this;\n    }\n    count(keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        this[kPopulateParserHintArray]('count', keys);\n        this[kTrackManuallySetKeys](keys);\n        return this;\n    }\n    default(key, value, defaultDescription) {\n        argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length);\n        if (defaultDescription) {\n            assertSingleKey(key, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").defaultDescription[key] = defaultDescription;\n        }\n        if (typeof value === 'function') {\n            assertSingleKey(key, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n            if (!__classPrivateFieldGet(this, _YargsInstance_options, \"f\").defaultDescription[key])\n                __classPrivateFieldGet(this, _YargsInstance_options, \"f\").defaultDescription[key] =\n                    __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").functionDescription(value);\n            value = value.call();\n        }\n        this[kPopulateParserHintSingleValueDictionary](this.default.bind(this), 'default', key, value);\n        return this;\n    }\n    defaults(key, value, defaultDescription) {\n        return this.default(key, value, defaultDescription);\n    }\n    demandCommand(min = 1, max, minMsg, maxMsg) {\n        argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length);\n        if (typeof max !== 'number') {\n            minMsg = max;\n            max = Infinity;\n        }\n        this.global('_', false);\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").demandedCommands._ = {\n            min,\n            max,\n            minMsg,\n            maxMsg,\n        };\n        return this;\n    }\n    demand(keys, max, msg) {\n        if (Array.isArray(max)) {\n            max.forEach(key => {\n                assertNotStrictEqual(msg, true, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n                this.demandOption(key, msg);\n            });\n            max = Infinity;\n        }\n        else if (typeof max !== 'number') {\n            msg = max;\n            max = Infinity;\n        }\n        if (typeof keys === 'number') {\n            assertNotStrictEqual(msg, true, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n            this.demandCommand(keys, max, msg, msg);\n        }\n        else if (Array.isArray(keys)) {\n            keys.forEach(key => {\n                assertNotStrictEqual(msg, true, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n                this.demandOption(key, msg);\n            });\n        }\n        else {\n            if (typeof msg === 'string') {\n                this.demandOption(keys, msg);\n            }\n            else if (msg === true || typeof msg === 'undefined') {\n                this.demandOption(keys);\n            }\n        }\n        return this;\n    }\n    demandOption(keys, msg) {\n        argsert('<object|string|array> [string]', [keys, msg], arguments.length);\n        this[kPopulateParserHintSingleValueDictionary](this.demandOption.bind(this), 'demandedOptions', keys, msg);\n        return this;\n    }\n    deprecateOption(option, message) {\n        argsert('<string> [string|boolean]', [option, message], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").deprecatedOptions[option] = message;\n        return this;\n    }\n    describe(keys, description) {\n        argsert('<object|string|array> [string]', [keys, description], arguments.length);\n        this[kSetKey](keys, true);\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").describe(keys, description);\n        return this;\n    }\n    detectLocale(detect) {\n        argsert('<boolean>', [detect], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_detectLocale, detect, \"f\");\n        return this;\n    }\n    env(prefix) {\n        argsert('[string|boolean]', [prefix], arguments.length);\n        if (prefix === false)\n            delete __classPrivateFieldGet(this, _YargsInstance_options, \"f\").envPrefix;\n        else\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").envPrefix = prefix || '';\n        return this;\n    }\n    epilogue(msg) {\n        argsert('<string>', [msg], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").epilog(msg);\n        return this;\n    }\n    epilog(msg) {\n        return this.epilogue(msg);\n    }\n    example(cmd, description) {\n        argsert('<string|array> [string]', [cmd, description], arguments.length);\n        if (Array.isArray(cmd)) {\n            cmd.forEach(exampleParams => this.example(...exampleParams));\n        }\n        else {\n            __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").example(cmd, description);\n        }\n        return this;\n    }\n    exit(code, err) {\n        __classPrivateFieldSet(this, _YargsInstance_hasOutput, true, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_exitError, err, \"f\");\n        if (__classPrivateFieldGet(this, _YargsInstance_exitProcess, \"f\"))\n            __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").process.exit(code);\n    }\n    exitProcess(enabled = true) {\n        argsert('[boolean]', [enabled], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_exitProcess, enabled, \"f\");\n        return this;\n    }\n    fail(f) {\n        argsert('<function|boolean>', [f], arguments.length);\n        if (typeof f === 'boolean' && f !== false) {\n            throw new YError(\"Invalid first argument. Expected function or boolean 'false'\");\n        }\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").failFn(f);\n        return this;\n    }\n    getAliases() {\n        return this.parsed ? this.parsed.aliases : {};\n    }\n    async getCompletion(args, done) {\n        argsert('<array> [function]', [args, done], arguments.length);\n        if (!done) {\n            return new Promise((resolve, reject) => {\n                __classPrivateFieldGet(this, _YargsInstance_completion, \"f\").getCompletion(args, (err, completions) => {\n                    if (err)\n                        reject(err);\n                    else\n                        resolve(completions);\n                });\n            });\n        }\n        else {\n            return __classPrivateFieldGet(this, _YargsInstance_completion, \"f\").getCompletion(args, done);\n        }\n    }\n    getDemandedOptions() {\n        argsert([], 0);\n        return __classPrivateFieldGet(this, _YargsInstance_options, \"f\").demandedOptions;\n    }\n    getDemandedCommands() {\n        argsert([], 0);\n        return __classPrivateFieldGet(this, _YargsInstance_options, \"f\").demandedCommands;\n    }\n    getDeprecatedOptions() {\n        argsert([], 0);\n        return __classPrivateFieldGet(this, _YargsInstance_options, \"f\").deprecatedOptions;\n    }\n    getDetectLocale() {\n        return __classPrivateFieldGet(this, _YargsInstance_detectLocale, \"f\");\n    }\n    getExitProcess() {\n        return __classPrivateFieldGet(this, _YargsInstance_exitProcess, \"f\");\n    }\n    getGroups() {\n        return Object.assign({}, __classPrivateFieldGet(this, _YargsInstance_groups, \"f\"), __classPrivateFieldGet(this, _YargsInstance_preservedGroups, \"f\"));\n    }\n    getHelp() {\n        __classPrivateFieldSet(this, _YargsInstance_hasOutput, true, \"f\");\n        if (!__classPrivateFieldGet(this, _YargsInstance_usage, \"f\").hasCachedHelpMessage()) {\n            if (!this.parsed) {\n                const parse = this[kRunYargsParserAndExecuteCommands](__classPrivateFieldGet(this, _YargsInstance_processArgs, \"f\"), undefined, undefined, 0, true);\n                if (isPromise(parse)) {\n                    return parse.then(() => {\n                        return __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").help();\n                    });\n                }\n            }\n            const builderResponse = __classPrivateFieldGet(this, _YargsInstance_command, \"f\").runDefaultBuilderOn(this);\n            if (isPromise(builderResponse)) {\n                return builderResponse.then(() => {\n                    return __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").help();\n                });\n            }\n        }\n        return Promise.resolve(__classPrivateFieldGet(this, _YargsInstance_usage, \"f\").help());\n    }\n    getOptions() {\n        return __classPrivateFieldGet(this, _YargsInstance_options, \"f\");\n    }\n    getStrict() {\n        return __classPrivateFieldGet(this, _YargsInstance_strict, \"f\");\n    }\n    getStrictCommands() {\n        return __classPrivateFieldGet(this, _YargsInstance_strictCommands, \"f\");\n    }\n    getStrictOptions() {\n        return __classPrivateFieldGet(this, _YargsInstance_strictOptions, \"f\");\n    }\n    global(globals, global) {\n        argsert('<string|array> [boolean]', [globals, global], arguments.length);\n        globals = [].concat(globals);\n        if (global !== false) {\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").local = __classPrivateFieldGet(this, _YargsInstance_options, \"f\").local.filter(l => globals.indexOf(l) === -1);\n        }\n        else {\n            globals.forEach(g => {\n                if (!__classPrivateFieldGet(this, _YargsInstance_options, \"f\").local.includes(g))\n                    __classPrivateFieldGet(this, _YargsInstance_options, \"f\").local.push(g);\n            });\n        }\n        return this;\n    }\n    group(opts, groupName) {\n        argsert('<string|array> <string>', [opts, groupName], arguments.length);\n        const existing = __classPrivateFieldGet(this, _YargsInstance_preservedGroups, \"f\")[groupName] || __classPrivateFieldGet(this, _YargsInstance_groups, \"f\")[groupName];\n        if (__classPrivateFieldGet(this, _YargsInstance_preservedGroups, \"f\")[groupName]) {\n            delete __classPrivateFieldGet(this, _YargsInstance_preservedGroups, \"f\")[groupName];\n        }\n        const seen = {};\n        __classPrivateFieldGet(this, _YargsInstance_groups, \"f\")[groupName] = (existing || []).concat(opts).filter(key => {\n            if (seen[key])\n                return false;\n            return (seen[key] = true);\n        });\n        return this;\n    }\n    hide(key) {\n        argsert('<string>', [key], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").hiddenOptions.push(key);\n        return this;\n    }\n    implies(key, value) {\n        argsert('<string|object> [number|string|array]', [key, value], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").implies(key, value);\n        return this;\n    }\n    locale(locale) {\n        argsert('[string]', [locale], arguments.length);\n        if (locale === undefined) {\n            this[kGuessLocale]();\n            return __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").y18n.getLocale();\n        }\n        __classPrivateFieldSet(this, _YargsInstance_detectLocale, false, \"f\");\n        __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").y18n.setLocale(locale);\n        return this;\n    }\n    middleware(callback, applyBeforeValidation, global) {\n        return __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").addMiddleware(callback, !!applyBeforeValidation, global);\n    }\n    nargs(key, value) {\n        argsert('<string|object|array> [number]', [key, value], arguments.length);\n        this[kPopulateParserHintSingleValueDictionary](this.nargs.bind(this), 'narg', key, value);\n        return this;\n    }\n    normalize(keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        this[kPopulateParserHintArray]('normalize', keys);\n        return this;\n    }\n    number(keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        this[kPopulateParserHintArray]('number', keys);\n        this[kTrackManuallySetKeys](keys);\n        return this;\n    }\n    option(key, opt) {\n        argsert('<string|object> [object]', [key, opt], arguments.length);\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                this.options(k, key[k]);\n            });\n        }\n        else {\n            if (typeof opt !== 'object') {\n                opt = {};\n            }\n            this[kTrackManuallySetKeys](key);\n            if (__classPrivateFieldGet(this, _YargsInstance_versionOpt, \"f\") && (key === 'version' || (opt === null || opt === void 0 ? void 0 : opt.alias) === 'version')) {\n                this[kEmitWarning]([\n                    '\"version\" is a reserved word.',\n                    'Please do one of the following:',\n                    '- Disable version with `yargs.version(false)` if using \"version\" as an option',\n                    '- Use the built-in `yargs.version` method instead (if applicable)',\n                    '- Use a different option key',\n                    'https://yargs.js.org/docs/#api-reference-version',\n                ].join('\\n'), undefined, 'versionWarning');\n            }\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").key[key] = true;\n            if (opt.alias)\n                this.alias(key, opt.alias);\n            const deprecate = opt.deprecate || opt.deprecated;\n            if (deprecate) {\n                this.deprecateOption(key, deprecate);\n            }\n            const demand = opt.demand || opt.required || opt.require;\n            if (demand) {\n                this.demand(key, demand);\n            }\n            if (opt.demandOption) {\n                this.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined);\n            }\n            if (opt.conflicts) {\n                this.conflicts(key, opt.conflicts);\n            }\n            if ('default' in opt) {\n                this.default(key, opt.default);\n            }\n            if (opt.implies !== undefined) {\n                this.implies(key, opt.implies);\n            }\n            if (opt.nargs !== undefined) {\n                this.nargs(key, opt.nargs);\n            }\n            if (opt.config) {\n                this.config(key, opt.configParser);\n            }\n            if (opt.normalize) {\n                this.normalize(key);\n            }\n            if (opt.choices) {\n                this.choices(key, opt.choices);\n            }\n            if (opt.coerce) {\n                this.coerce(key, opt.coerce);\n            }\n            if (opt.group) {\n                this.group(key, opt.group);\n            }\n            if (opt.boolean || opt.type === 'boolean') {\n                this.boolean(key);\n                if (opt.alias)\n                    this.boolean(opt.alias);\n            }\n            if (opt.array || opt.type === 'array') {\n                this.array(key);\n                if (opt.alias)\n                    this.array(opt.alias);\n            }\n            if (opt.number || opt.type === 'number') {\n                this.number(key);\n                if (opt.alias)\n                    this.number(opt.alias);\n            }\n            if (opt.string || opt.type === 'string') {\n                this.string(key);\n                if (opt.alias)\n                    this.string(opt.alias);\n            }\n            if (opt.count || opt.type === 'count') {\n                this.count(key);\n            }\n            if (typeof opt.global === 'boolean') {\n                this.global(key, opt.global);\n            }\n            if (opt.defaultDescription) {\n                __classPrivateFieldGet(this, _YargsInstance_options, \"f\").defaultDescription[key] = opt.defaultDescription;\n            }\n            if (opt.skipValidation) {\n                this.skipValidation(key);\n            }\n            const desc = opt.describe || opt.description || opt.desc;\n            const descriptions = __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").getDescriptions();\n            if (!Object.prototype.hasOwnProperty.call(descriptions, key) ||\n                typeof desc === 'string') {\n                this.describe(key, desc);\n            }\n            if (opt.hidden) {\n                this.hide(key);\n            }\n            if (opt.requiresArg) {\n                this.requiresArg(key);\n            }\n        }\n        return this;\n    }\n    options(key, opt) {\n        return this.option(key, opt);\n    }\n    parse(args, shortCircuit, _parseFn) {\n        argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length);\n        this[kFreeze]();\n        if (typeof args === 'undefined') {\n            args = __classPrivateFieldGet(this, _YargsInstance_processArgs, \"f\");\n        }\n        if (typeof shortCircuit === 'object') {\n            __classPrivateFieldSet(this, _YargsInstance_parseContext, shortCircuit, \"f\");\n            shortCircuit = _parseFn;\n        }\n        if (typeof shortCircuit === 'function') {\n            __classPrivateFieldSet(this, _YargsInstance_parseFn, shortCircuit, \"f\");\n            shortCircuit = false;\n        }\n        if (!shortCircuit)\n            __classPrivateFieldSet(this, _YargsInstance_processArgs, args, \"f\");\n        if (__classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\"))\n            __classPrivateFieldSet(this, _YargsInstance_exitProcess, false, \"f\");\n        const parsed = this[kRunYargsParserAndExecuteCommands](args, !!shortCircuit);\n        const tmpParsed = this.parsed;\n        __classPrivateFieldGet(this, _YargsInstance_completion, \"f\").setParsed(this.parsed);\n        if (isPromise(parsed)) {\n            return parsed\n                .then(argv => {\n                if (__classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\"))\n                    __classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\").call(this, __classPrivateFieldGet(this, _YargsInstance_exitError, \"f\"), argv, __classPrivateFieldGet(this, _YargsInstance_output, \"f\"));\n                return argv;\n            })\n                .catch(err => {\n                if (__classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\")) {\n                    __classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\")(err, this.parsed.argv, __classPrivateFieldGet(this, _YargsInstance_output, \"f\"));\n                }\n                throw err;\n            })\n                .finally(() => {\n                this[kUnfreeze]();\n                this.parsed = tmpParsed;\n            });\n        }\n        else {\n            if (__classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\"))\n                __classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\").call(this, __classPrivateFieldGet(this, _YargsInstance_exitError, \"f\"), parsed, __classPrivateFieldGet(this, _YargsInstance_output, \"f\"));\n            this[kUnfreeze]();\n            this.parsed = tmpParsed;\n        }\n        return parsed;\n    }\n    parseAsync(args, shortCircuit, _parseFn) {\n        const maybePromise = this.parse(args, shortCircuit, _parseFn);\n        return !isPromise(maybePromise)\n            ? Promise.resolve(maybePromise)\n            : maybePromise;\n    }\n    parseSync(args, shortCircuit, _parseFn) {\n        const maybePromise = this.parse(args, shortCircuit, _parseFn);\n        if (isPromise(maybePromise)) {\n            throw new YError('.parseSync() must not be used with asynchronous builders, handlers, or middleware');\n        }\n        return maybePromise;\n    }\n    parserConfiguration(config) {\n        argsert('<object>', [config], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_parserConfig, config, \"f\");\n        return this;\n    }\n    pkgConf(key, rootPath) {\n        argsert('<string> [string]', [key, rootPath], arguments.length);\n        let conf = null;\n        const obj = this[kPkgUp](rootPath || __classPrivateFieldGet(this, _YargsInstance_cwd, \"f\"));\n        if (obj[key] && typeof obj[key] === 'object') {\n            conf = applyExtends(obj[key], rootPath || __classPrivateFieldGet(this, _YargsInstance_cwd, \"f\"), this[kGetParserConfiguration]()['deep-merge-config'] || false, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").configObjects = (__classPrivateFieldGet(this, _YargsInstance_options, \"f\").configObjects || []).concat(conf);\n        }\n        return this;\n    }\n    positional(key, opts) {\n        argsert('<string> <object>', [key, opts], arguments.length);\n        const supportedOpts = [\n            'default',\n            'defaultDescription',\n            'implies',\n            'normalize',\n            'choices',\n            'conflicts',\n            'coerce',\n            'type',\n            'describe',\n            'desc',\n            'description',\n            'alias',\n        ];\n        opts = objFilter(opts, (k, v) => {\n            if (k === 'type' && !['string', 'number', 'boolean'].includes(v))\n                return false;\n            return supportedOpts.includes(k);\n        });\n        const fullCommand = __classPrivateFieldGet(this, _YargsInstance_context, \"f\").fullCommands[__classPrivateFieldGet(this, _YargsInstance_context, \"f\").fullCommands.length - 1];\n        const parseOptions = fullCommand\n            ? __classPrivateFieldGet(this, _YargsInstance_command, \"f\").cmdToParseOptions(fullCommand)\n            : {\n                array: [],\n                alias: {},\n                default: {},\n                demand: {},\n            };\n        objectKeys(parseOptions).forEach(pk => {\n            const parseOption = parseOptions[pk];\n            if (Array.isArray(parseOption)) {\n                if (parseOption.indexOf(key) !== -1)\n                    opts[pk] = true;\n            }\n            else {\n                if (parseOption[key] && !(pk in opts))\n                    opts[pk] = parseOption[key];\n            }\n        });\n        this.group(key, __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").getPositionalGroupName());\n        return this.option(key, opts);\n    }\n    recommendCommands(recommend = true) {\n        argsert('[boolean]', [recommend], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_recommendCommands, recommend, \"f\");\n        return this;\n    }\n    required(keys, max, msg) {\n        return this.demand(keys, max, msg);\n    }\n    require(keys, max, msg) {\n        return this.demand(keys, max, msg);\n    }\n    requiresArg(keys) {\n        argsert('<array|string|object> [number]', [keys], arguments.length);\n        if (typeof keys === 'string' && __classPrivateFieldGet(this, _YargsInstance_options, \"f\").narg[keys]) {\n            return this;\n        }\n        else {\n            this[kPopulateParserHintSingleValueDictionary](this.requiresArg.bind(this), 'narg', keys, NaN);\n        }\n        return this;\n    }\n    showCompletionScript($0, cmd) {\n        argsert('[string] [string]', [$0, cmd], arguments.length);\n        $0 = $0 || this.$0;\n        __classPrivateFieldGet(this, _YargsInstance_logger, \"f\").log(__classPrivateFieldGet(this, _YargsInstance_completion, \"f\").generateCompletionScript($0, cmd || __classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\") || 'completion'));\n        return this;\n    }\n    showHelp(level) {\n        argsert('[string|function]', [level], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_hasOutput, true, \"f\");\n        if (!__classPrivateFieldGet(this, _YargsInstance_usage, \"f\").hasCachedHelpMessage()) {\n            if (!this.parsed) {\n                const parse = this[kRunYargsParserAndExecuteCommands](__classPrivateFieldGet(this, _YargsInstance_processArgs, \"f\"), undefined, undefined, 0, true);\n                if (isPromise(parse)) {\n                    parse.then(() => {\n                        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").showHelp(level);\n                    });\n                    return this;\n                }\n            }\n            const builderResponse = __classPrivateFieldGet(this, _YargsInstance_command, \"f\").runDefaultBuilderOn(this);\n            if (isPromise(builderResponse)) {\n                builderResponse.then(() => {\n                    __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").showHelp(level);\n                });\n                return this;\n            }\n        }\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").showHelp(level);\n        return this;\n    }\n    scriptName(scriptName) {\n        this.customScriptName = true;\n        this.$0 = scriptName;\n        return this;\n    }\n    showHelpOnFail(enabled, message) {\n        argsert('[boolean|string] [string]', [enabled, message], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").showHelpOnFail(enabled, message);\n        return this;\n    }\n    showVersion(level) {\n        argsert('[string|function]', [level], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").showVersion(level);\n        return this;\n    }\n    skipValidation(keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        this[kPopulateParserHintArray]('skipValidation', keys);\n        return this;\n    }\n    strict(enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_strict, enabled !== false, \"f\");\n        return this;\n    }\n    strictCommands(enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_strictCommands, enabled !== false, \"f\");\n        return this;\n    }\n    strictOptions(enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_strictOptions, enabled !== false, \"f\");\n        return this;\n    }\n    string(keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        this[kPopulateParserHintArray]('string', keys);\n        this[kTrackManuallySetKeys](keys);\n        return this;\n    }\n    terminalWidth() {\n        argsert([], 0);\n        return __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").process.stdColumns;\n    }\n    updateLocale(obj) {\n        return this.updateStrings(obj);\n    }\n    updateStrings(obj) {\n        argsert('<object>', [obj], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_detectLocale, false, \"f\");\n        __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").y18n.updateLocale(obj);\n        return this;\n    }\n    usage(msg, description, builder, handler) {\n        argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length);\n        if (description !== undefined) {\n            assertNotStrictEqual(msg, null, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n            if ((msg || '').match(/^\\$0( |$)/)) {\n                return this.command(msg, description, builder, handler);\n            }\n            else {\n                throw new YError('.usage() description must start with $0 if being used as alias for .command()');\n            }\n        }\n        else {\n            __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").usage(msg);\n            return this;\n        }\n    }\n    usageConfiguration(config) {\n        argsert('<object>', [config], arguments.length);\n        __classPrivateFieldSet(this, _YargsInstance_usageConfig, config, \"f\");\n        return this;\n    }\n    version(opt, msg, ver) {\n        const defaultVersionOpt = 'version';\n        argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length);\n        if (__classPrivateFieldGet(this, _YargsInstance_versionOpt, \"f\")) {\n            this[kDeleteFromParserHintObject](__classPrivateFieldGet(this, _YargsInstance_versionOpt, \"f\"));\n            __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").version(undefined);\n            __classPrivateFieldSet(this, _YargsInstance_versionOpt, null, \"f\");\n        }\n        if (arguments.length === 0) {\n            ver = this[kGuessVersion]();\n            opt = defaultVersionOpt;\n        }\n        else if (arguments.length === 1) {\n            if (opt === false) {\n                return this;\n            }\n            ver = opt;\n            opt = defaultVersionOpt;\n        }\n        else if (arguments.length === 2) {\n            ver = msg;\n            msg = undefined;\n        }\n        __classPrivateFieldSet(this, _YargsInstance_versionOpt, typeof opt === 'string' ? opt : defaultVersionOpt, \"f\");\n        msg = msg || __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").deferY18nLookup('Show version number');\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").version(ver || undefined);\n        this.boolean(__classPrivateFieldGet(this, _YargsInstance_versionOpt, \"f\"));\n        this.describe(__classPrivateFieldGet(this, _YargsInstance_versionOpt, \"f\"), msg);\n        return this;\n    }\n    wrap(cols) {\n        argsert('<number|null|undefined>', [cols], arguments.length);\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").wrap(cols);\n        return this;\n    }\n    [(_YargsInstance_command = new WeakMap(), _YargsInstance_cwd = new WeakMap(), _YargsInstance_context = new WeakMap(), _YargsInstance_completion = new WeakMap(), _YargsInstance_completionCommand = new WeakMap(), _YargsInstance_defaultShowHiddenOpt = new WeakMap(), _YargsInstance_exitError = new WeakMap(), _YargsInstance_detectLocale = new WeakMap(), _YargsInstance_emittedWarnings = new WeakMap(), _YargsInstance_exitProcess = new WeakMap(), _YargsInstance_frozens = new WeakMap(), _YargsInstance_globalMiddleware = new WeakMap(), _YargsInstance_groups = new WeakMap(), _YargsInstance_hasOutput = new WeakMap(), _YargsInstance_helpOpt = new WeakMap(), _YargsInstance_isGlobalContext = new WeakMap(), _YargsInstance_logger = new WeakMap(), _YargsInstance_output = new WeakMap(), _YargsInstance_options = new WeakMap(), _YargsInstance_parentRequire = new WeakMap(), _YargsInstance_parserConfig = new WeakMap(), _YargsInstance_parseFn = new WeakMap(), _YargsInstance_parseContext = new WeakMap(), _YargsInstance_pkgs = new WeakMap(), _YargsInstance_preservedGroups = new WeakMap(), _YargsInstance_processArgs = new WeakMap(), _YargsInstance_recommendCommands = new WeakMap(), _YargsInstance_shim = new WeakMap(), _YargsInstance_strict = new WeakMap(), _YargsInstance_strictCommands = new WeakMap(), _YargsInstance_strictOptions = new WeakMap(), _YargsInstance_usage = new WeakMap(), _YargsInstance_usageConfig = new WeakMap(), _YargsInstance_versionOpt = new WeakMap(), _YargsInstance_validation = new WeakMap(), kCopyDoubleDash)](argv) {\n        if (!argv._ || !argv['--'])\n            return argv;\n        argv._.push.apply(argv._, argv['--']);\n        try {\n            delete argv['--'];\n        }\n        catch (_err) { }\n        return argv;\n    }\n    [kCreateLogger]() {\n        return {\n            log: (...args) => {\n                if (!this[kHasParseCallback]())\n                    console.log(...args);\n                __classPrivateFieldSet(this, _YargsInstance_hasOutput, true, \"f\");\n                if (__classPrivateFieldGet(this, _YargsInstance_output, \"f\").length)\n                    __classPrivateFieldSet(this, _YargsInstance_output, __classPrivateFieldGet(this, _YargsInstance_output, \"f\") + '\\n', \"f\");\n                __classPrivateFieldSet(this, _YargsInstance_output, __classPrivateFieldGet(this, _YargsInstance_output, \"f\") + args.join(' '), \"f\");\n            },\n            error: (...args) => {\n                if (!this[kHasParseCallback]())\n                    console.error(...args);\n                __classPrivateFieldSet(this, _YargsInstance_hasOutput, true, \"f\");\n                if (__classPrivateFieldGet(this, _YargsInstance_output, \"f\").length)\n                    __classPrivateFieldSet(this, _YargsInstance_output, __classPrivateFieldGet(this, _YargsInstance_output, \"f\") + '\\n', \"f\");\n                __classPrivateFieldSet(this, _YargsInstance_output, __classPrivateFieldGet(this, _YargsInstance_output, \"f\") + args.join(' '), \"f\");\n            },\n        };\n    }\n    [kDeleteFromParserHintObject](optionKey) {\n        objectKeys(__classPrivateFieldGet(this, _YargsInstance_options, \"f\")).forEach((hintKey) => {\n            if (((key) => key === 'configObjects')(hintKey))\n                return;\n            const hint = __classPrivateFieldGet(this, _YargsInstance_options, \"f\")[hintKey];\n            if (Array.isArray(hint)) {\n                if (hint.includes(optionKey))\n                    hint.splice(hint.indexOf(optionKey), 1);\n            }\n            else if (typeof hint === 'object') {\n                delete hint[optionKey];\n            }\n        });\n        delete __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").getDescriptions()[optionKey];\n    }\n    [kEmitWarning](warning, type, deduplicationId) {\n        if (!__classPrivateFieldGet(this, _YargsInstance_emittedWarnings, \"f\")[deduplicationId]) {\n            __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").process.emitWarning(warning, type);\n            __classPrivateFieldGet(this, _YargsInstance_emittedWarnings, \"f\")[deduplicationId] = true;\n        }\n    }\n    [kFreeze]() {\n        __classPrivateFieldGet(this, _YargsInstance_frozens, \"f\").push({\n            options: __classPrivateFieldGet(this, _YargsInstance_options, \"f\"),\n            configObjects: __classPrivateFieldGet(this, _YargsInstance_options, \"f\").configObjects.slice(0),\n            exitProcess: __classPrivateFieldGet(this, _YargsInstance_exitProcess, \"f\"),\n            groups: __classPrivateFieldGet(this, _YargsInstance_groups, \"f\"),\n            strict: __classPrivateFieldGet(this, _YargsInstance_strict, \"f\"),\n            strictCommands: __classPrivateFieldGet(this, _YargsInstance_strictCommands, \"f\"),\n            strictOptions: __classPrivateFieldGet(this, _YargsInstance_strictOptions, \"f\"),\n            completionCommand: __classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\"),\n            output: __classPrivateFieldGet(this, _YargsInstance_output, \"f\"),\n            exitError: __classPrivateFieldGet(this, _YargsInstance_exitError, \"f\"),\n            hasOutput: __classPrivateFieldGet(this, _YargsInstance_hasOutput, \"f\"),\n            parsed: this.parsed,\n            parseFn: __classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\"),\n            parseContext: __classPrivateFieldGet(this, _YargsInstance_parseContext, \"f\"),\n        });\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").freeze();\n        __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").freeze();\n        __classPrivateFieldGet(this, _YargsInstance_command, \"f\").freeze();\n        __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").freeze();\n    }\n    [kGetDollarZero]() {\n        let $0 = '';\n        let default$0;\n        if (/\\b(node|iojs|electron)(\\.exe)?$/.test(__classPrivateFieldGet(this, _YargsInstance_shim, \"f\").process.argv()[0])) {\n            default$0 = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").process.argv().slice(1, 2);\n        }\n        else {\n            default$0 = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").process.argv().slice(0, 1);\n        }\n        $0 = default$0\n            .map(x => {\n            const b = this[kRebase](__classPrivateFieldGet(this, _YargsInstance_cwd, \"f\"), x);\n            return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x;\n        })\n            .join(' ')\n            .trim();\n        if (__classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getEnv('_') &&\n            __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getProcessArgvBin() === __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getEnv('_')) {\n            $0 = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\")\n                .getEnv('_')\n                .replace(`${__classPrivateFieldGet(this, _YargsInstance_shim, \"f\").path.dirname(__classPrivateFieldGet(this, _YargsInstance_shim, \"f\").process.execPath())}/`, '');\n        }\n        return $0;\n    }\n    [kGetParserConfiguration]() {\n        return __classPrivateFieldGet(this, _YargsInstance_parserConfig, \"f\");\n    }\n    [kGetUsageConfiguration]() {\n        return __classPrivateFieldGet(this, _YargsInstance_usageConfig, \"f\");\n    }\n    [kGuessLocale]() {\n        if (!__classPrivateFieldGet(this, _YargsInstance_detectLocale, \"f\"))\n            return;\n        const locale = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getEnv('LC_ALL') ||\n            __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getEnv('LC_MESSAGES') ||\n            __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getEnv('LANG') ||\n            __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").getEnv('LANGUAGE') ||\n            'en_US';\n        this.locale(locale.replace(/[.:].*/, ''));\n    }\n    [kGuessVersion]() {\n        const obj = this[kPkgUp]();\n        return obj.version || 'unknown';\n    }\n    [kParsePositionalNumbers](argv) {\n        const args = argv['--'] ? argv['--'] : argv._;\n        for (let i = 0, arg; (arg = args[i]) !== undefined; i++) {\n            if (__classPrivateFieldGet(this, _YargsInstance_shim, \"f\").Parser.looksLikeNumber(arg) &&\n                Number.isSafeInteger(Math.floor(parseFloat(`${arg}`)))) {\n                args[i] = Number(arg);\n            }\n        }\n        return argv;\n    }\n    [kPkgUp](rootPath) {\n        const npath = rootPath || '*';\n        if (__classPrivateFieldGet(this, _YargsInstance_pkgs, \"f\")[npath])\n            return __classPrivateFieldGet(this, _YargsInstance_pkgs, \"f\")[npath];\n        let obj = {};\n        try {\n            let startDir = rootPath || __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").mainFilename;\n            if (!rootPath && __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").path.extname(startDir)) {\n                startDir = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").path.dirname(startDir);\n            }\n            const pkgJsonPath = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").findUp(startDir, (dir, names) => {\n                if (names.includes('package.json')) {\n                    return 'package.json';\n                }\n                else {\n                    return undefined;\n                }\n            });\n            assertNotStrictEqual(pkgJsonPath, undefined, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n            obj = JSON.parse(__classPrivateFieldGet(this, _YargsInstance_shim, \"f\").readFileSync(pkgJsonPath, 'utf8'));\n        }\n        catch (_noop) { }\n        __classPrivateFieldGet(this, _YargsInstance_pkgs, \"f\")[npath] = obj || {};\n        return __classPrivateFieldGet(this, _YargsInstance_pkgs, \"f\")[npath];\n    }\n    [kPopulateParserHintArray](type, keys) {\n        keys = [].concat(keys);\n        keys.forEach(key => {\n            key = this[kSanitizeKey](key);\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\")[type].push(key);\n        });\n    }\n    [kPopulateParserHintSingleValueDictionary](builder, type, key, value) {\n        this[kPopulateParserHintDictionary](builder, type, key, value, (type, key, value) => {\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\")[type][key] = value;\n        });\n    }\n    [kPopulateParserHintArrayDictionary](builder, type, key, value) {\n        this[kPopulateParserHintDictionary](builder, type, key, value, (type, key, value) => {\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\")[type][key] = (__classPrivateFieldGet(this, _YargsInstance_options, \"f\")[type][key] || []).concat(value);\n        });\n    }\n    [kPopulateParserHintDictionary](builder, type, key, value, singleKeyHandler) {\n        if (Array.isArray(key)) {\n            key.forEach(k => {\n                builder(k, value);\n            });\n        }\n        else if (((key) => typeof key === 'object')(key)) {\n            for (const k of objectKeys(key)) {\n                builder(k, key[k]);\n            }\n        }\n        else {\n            singleKeyHandler(type, this[kSanitizeKey](key), value);\n        }\n    }\n    [kSanitizeKey](key) {\n        if (key === '__proto__')\n            return '___proto___';\n        return key;\n    }\n    [kSetKey](key, set) {\n        this[kPopulateParserHintSingleValueDictionary](this[kSetKey].bind(this), 'key', key, set);\n        return this;\n    }\n    [kUnfreeze]() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const frozen = __classPrivateFieldGet(this, _YargsInstance_frozens, \"f\").pop();\n        assertNotStrictEqual(frozen, undefined, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\"));\n        let configObjects;\n        (_a = this, _b = this, _c = this, _d = this, _e = this, _f = this, _g = this, _h = this, _j = this, _k = this, _l = this, _m = this, {\n            options: ({ set value(_o) { __classPrivateFieldSet(_a, _YargsInstance_options, _o, \"f\"); } }).value,\n            configObjects,\n            exitProcess: ({ set value(_o) { __classPrivateFieldSet(_b, _YargsInstance_exitProcess, _o, \"f\"); } }).value,\n            groups: ({ set value(_o) { __classPrivateFieldSet(_c, _YargsInstance_groups, _o, \"f\"); } }).value,\n            output: ({ set value(_o) { __classPrivateFieldSet(_d, _YargsInstance_output, _o, \"f\"); } }).value,\n            exitError: ({ set value(_o) { __classPrivateFieldSet(_e, _YargsInstance_exitError, _o, \"f\"); } }).value,\n            hasOutput: ({ set value(_o) { __classPrivateFieldSet(_f, _YargsInstance_hasOutput, _o, \"f\"); } }).value,\n            parsed: this.parsed,\n            strict: ({ set value(_o) { __classPrivateFieldSet(_g, _YargsInstance_strict, _o, \"f\"); } }).value,\n            strictCommands: ({ set value(_o) { __classPrivateFieldSet(_h, _YargsInstance_strictCommands, _o, \"f\"); } }).value,\n            strictOptions: ({ set value(_o) { __classPrivateFieldSet(_j, _YargsInstance_strictOptions, _o, \"f\"); } }).value,\n            completionCommand: ({ set value(_o) { __classPrivateFieldSet(_k, _YargsInstance_completionCommand, _o, \"f\"); } }).value,\n            parseFn: ({ set value(_o) { __classPrivateFieldSet(_l, _YargsInstance_parseFn, _o, \"f\"); } }).value,\n            parseContext: ({ set value(_o) { __classPrivateFieldSet(_m, _YargsInstance_parseContext, _o, \"f\"); } }).value,\n        } = frozen);\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").configObjects = configObjects;\n        __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").unfreeze();\n        __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").unfreeze();\n        __classPrivateFieldGet(this, _YargsInstance_command, \"f\").unfreeze();\n        __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").unfreeze();\n    }\n    [kValidateAsync](validation, argv) {\n        return maybeAsyncResult(argv, result => {\n            validation(result);\n            return result;\n        });\n    }\n    getInternalMethods() {\n        return {\n            getCommandInstance: this[kGetCommandInstance].bind(this),\n            getContext: this[kGetContext].bind(this),\n            getHasOutput: this[kGetHasOutput].bind(this),\n            getLoggerInstance: this[kGetLoggerInstance].bind(this),\n            getParseContext: this[kGetParseContext].bind(this),\n            getParserConfiguration: this[kGetParserConfiguration].bind(this),\n            getUsageConfiguration: this[kGetUsageConfiguration].bind(this),\n            getUsageInstance: this[kGetUsageInstance].bind(this),\n            getValidationInstance: this[kGetValidationInstance].bind(this),\n            hasParseCallback: this[kHasParseCallback].bind(this),\n            isGlobalContext: this[kIsGlobalContext].bind(this),\n            postProcess: this[kPostProcess].bind(this),\n            reset: this[kReset].bind(this),\n            runValidation: this[kRunValidation].bind(this),\n            runYargsParserAndExecuteCommands: this[kRunYargsParserAndExecuteCommands].bind(this),\n            setHasOutput: this[kSetHasOutput].bind(this),\n        };\n    }\n    [kGetCommandInstance]() {\n        return __classPrivateFieldGet(this, _YargsInstance_command, \"f\");\n    }\n    [kGetContext]() {\n        return __classPrivateFieldGet(this, _YargsInstance_context, \"f\");\n    }\n    [kGetHasOutput]() {\n        return __classPrivateFieldGet(this, _YargsInstance_hasOutput, \"f\");\n    }\n    [kGetLoggerInstance]() {\n        return __classPrivateFieldGet(this, _YargsInstance_logger, \"f\");\n    }\n    [kGetParseContext]() {\n        return __classPrivateFieldGet(this, _YargsInstance_parseContext, \"f\") || {};\n    }\n    [kGetUsageInstance]() {\n        return __classPrivateFieldGet(this, _YargsInstance_usage, \"f\");\n    }\n    [kGetValidationInstance]() {\n        return __classPrivateFieldGet(this, _YargsInstance_validation, \"f\");\n    }\n    [kHasParseCallback]() {\n        return !!__classPrivateFieldGet(this, _YargsInstance_parseFn, \"f\");\n    }\n    [kIsGlobalContext]() {\n        return __classPrivateFieldGet(this, _YargsInstance_isGlobalContext, \"f\");\n    }\n    [kPostProcess](argv, populateDoubleDash, calledFromCommand, runGlobalMiddleware) {\n        if (calledFromCommand)\n            return argv;\n        if (isPromise(argv))\n            return argv;\n        if (!populateDoubleDash) {\n            argv = this[kCopyDoubleDash](argv);\n        }\n        const parsePositionalNumbers = this[kGetParserConfiguration]()['parse-positional-numbers'] ||\n            this[kGetParserConfiguration]()['parse-positional-numbers'] === undefined;\n        if (parsePositionalNumbers) {\n            argv = this[kParsePositionalNumbers](argv);\n        }\n        if (runGlobalMiddleware) {\n            argv = applyMiddleware(argv, this, __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").getMiddleware(), false);\n        }\n        return argv;\n    }\n    [kReset](aliases = {}) {\n        __classPrivateFieldSet(this, _YargsInstance_options, __classPrivateFieldGet(this, _YargsInstance_options, \"f\") || {}, \"f\");\n        const tmpOptions = {};\n        tmpOptions.local = __classPrivateFieldGet(this, _YargsInstance_options, \"f\").local || [];\n        tmpOptions.configObjects = __classPrivateFieldGet(this, _YargsInstance_options, \"f\").configObjects || [];\n        const localLookup = {};\n        tmpOptions.local.forEach(l => {\n            localLookup[l] = true;\n            (aliases[l] || []).forEach(a => {\n                localLookup[a] = true;\n            });\n        });\n        Object.assign(__classPrivateFieldGet(this, _YargsInstance_preservedGroups, \"f\"), Object.keys(__classPrivateFieldGet(this, _YargsInstance_groups, \"f\")).reduce((acc, groupName) => {\n            const keys = __classPrivateFieldGet(this, _YargsInstance_groups, \"f\")[groupName].filter(key => !(key in localLookup));\n            if (keys.length > 0) {\n                acc[groupName] = keys;\n            }\n            return acc;\n        }, {}));\n        __classPrivateFieldSet(this, _YargsInstance_groups, {}, \"f\");\n        const arrayOptions = [\n            'array',\n            'boolean',\n            'string',\n            'skipValidation',\n            'count',\n            'normalize',\n            'number',\n            'hiddenOptions',\n        ];\n        const objectOptions = [\n            'narg',\n            'key',\n            'alias',\n            'default',\n            'defaultDescription',\n            'config',\n            'choices',\n            'demandedOptions',\n            'demandedCommands',\n            'deprecatedOptions',\n        ];\n        arrayOptions.forEach(k => {\n            tmpOptions[k] = (__classPrivateFieldGet(this, _YargsInstance_options, \"f\")[k] || []).filter((k) => !localLookup[k]);\n        });\n        objectOptions.forEach((k) => {\n            tmpOptions[k] = objFilter(__classPrivateFieldGet(this, _YargsInstance_options, \"f\")[k], k => !localLookup[k]);\n        });\n        tmpOptions.envPrefix = __classPrivateFieldGet(this, _YargsInstance_options, \"f\").envPrefix;\n        __classPrivateFieldSet(this, _YargsInstance_options, tmpOptions, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_usage, __classPrivateFieldGet(this, _YargsInstance_usage, \"f\")\n            ? __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").reset(localLookup)\n            : Usage(this, __classPrivateFieldGet(this, _YargsInstance_shim, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_validation, __classPrivateFieldGet(this, _YargsInstance_validation, \"f\")\n            ? __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").reset(localLookup)\n            : Validation(this, __classPrivateFieldGet(this, _YargsInstance_usage, \"f\"), __classPrivateFieldGet(this, _YargsInstance_shim, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_command, __classPrivateFieldGet(this, _YargsInstance_command, \"f\")\n            ? __classPrivateFieldGet(this, _YargsInstance_command, \"f\").reset()\n            : Command(__classPrivateFieldGet(this, _YargsInstance_usage, \"f\"), __classPrivateFieldGet(this, _YargsInstance_validation, \"f\"), __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\"), __classPrivateFieldGet(this, _YargsInstance_shim, \"f\")), \"f\");\n        if (!__classPrivateFieldGet(this, _YargsInstance_completion, \"f\"))\n            __classPrivateFieldSet(this, _YargsInstance_completion, Completion(this, __classPrivateFieldGet(this, _YargsInstance_usage, \"f\"), __classPrivateFieldGet(this, _YargsInstance_command, \"f\"), __classPrivateFieldGet(this, _YargsInstance_shim, \"f\")), \"f\");\n        __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").reset();\n        __classPrivateFieldSet(this, _YargsInstance_completionCommand, null, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_output, '', \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_exitError, null, \"f\");\n        __classPrivateFieldSet(this, _YargsInstance_hasOutput, false, \"f\");\n        this.parsed = false;\n        return this;\n    }\n    [kRebase](base, dir) {\n        return __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").path.relative(base, dir);\n    }\n    [kRunYargsParserAndExecuteCommands](args, shortCircuit, calledFromCommand, commandIndex = 0, helpOnly = false) {\n        let skipValidation = !!calledFromCommand || helpOnly;\n        args = args || __classPrivateFieldGet(this, _YargsInstance_processArgs, \"f\");\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").__ = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").y18n.__;\n        __classPrivateFieldGet(this, _YargsInstance_options, \"f\").configuration = this[kGetParserConfiguration]();\n        const populateDoubleDash = !!__classPrivateFieldGet(this, _YargsInstance_options, \"f\").configuration['populate--'];\n        const config = Object.assign({}, __classPrivateFieldGet(this, _YargsInstance_options, \"f\").configuration, {\n            'populate--': true,\n        });\n        const parsed = __classPrivateFieldGet(this, _YargsInstance_shim, \"f\").Parser.detailed(args, Object.assign({}, __classPrivateFieldGet(this, _YargsInstance_options, \"f\"), {\n            configuration: { 'parse-positional-numbers': false, ...config },\n        }));\n        const argv = Object.assign(parsed.argv, __classPrivateFieldGet(this, _YargsInstance_parseContext, \"f\"));\n        let argvPromise = undefined;\n        const aliases = parsed.aliases;\n        let helpOptSet = false;\n        let versionOptSet = false;\n        Object.keys(argv).forEach(key => {\n            if (key === __classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\") && argv[key]) {\n                helpOptSet = true;\n            }\n            else if (key === __classPrivateFieldGet(this, _YargsInstance_versionOpt, \"f\") && argv[key]) {\n                versionOptSet = true;\n            }\n        });\n        argv.$0 = this.$0;\n        this.parsed = parsed;\n        if (commandIndex === 0) {\n            __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").clearCachedHelpMessage();\n        }\n        try {\n            this[kGuessLocale]();\n            if (shortCircuit) {\n                return this[kPostProcess](argv, populateDoubleDash, !!calledFromCommand, false);\n            }\n            if (__classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\")) {\n                const helpCmds = [__classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\")]\n                    .concat(aliases[__classPrivateFieldGet(this, _YargsInstance_helpOpt, \"f\")] || [])\n                    .filter(k => k.length > 1);\n                if (helpCmds.includes('' + argv._[argv._.length - 1])) {\n                    argv._.pop();\n                    helpOptSet = true;\n                }\n            }\n            __classPrivateFieldSet(this, _YargsInstance_isGlobalContext, false, \"f\");\n            const handlerKeys = __classPrivateFieldGet(this, _YargsInstance_command, \"f\").getCommands();\n            const requestCompletions = __classPrivateFieldGet(this, _YargsInstance_completion, \"f\").completionKey in argv;\n            const skipRecommendation = helpOptSet || requestCompletions || helpOnly;\n            if (argv._.length) {\n                if (handlerKeys.length) {\n                    let firstUnknownCommand;\n                    for (let i = commandIndex || 0, cmd; argv._[i] !== undefined; i++) {\n                        cmd = String(argv._[i]);\n                        if (handlerKeys.includes(cmd) && cmd !== __classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\")) {\n                            const innerArgv = __classPrivateFieldGet(this, _YargsInstance_command, \"f\").runCommand(cmd, this, parsed, i + 1, helpOnly, helpOptSet || versionOptSet || helpOnly);\n                            return this[kPostProcess](innerArgv, populateDoubleDash, !!calledFromCommand, false);\n                        }\n                        else if (!firstUnknownCommand &&\n                            cmd !== __classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\")) {\n                            firstUnknownCommand = cmd;\n                            break;\n                        }\n                    }\n                    if (!__classPrivateFieldGet(this, _YargsInstance_command, \"f\").hasDefaultCommand() &&\n                        __classPrivateFieldGet(this, _YargsInstance_recommendCommands, \"f\") &&\n                        firstUnknownCommand &&\n                        !skipRecommendation) {\n                        __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").recommendCommands(firstUnknownCommand, handlerKeys);\n                    }\n                }\n                if (__classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\") &&\n                    argv._.includes(__classPrivateFieldGet(this, _YargsInstance_completionCommand, \"f\")) &&\n                    !requestCompletions) {\n                    if (__classPrivateFieldGet(this, _YargsInstance_exitProcess, \"f\"))\n                        setBlocking(true);\n                    this.showCompletionScript();\n                    this.exit(0);\n                }\n            }\n            if (__classPrivateFieldGet(this, _YargsInstance_command, \"f\").hasDefaultCommand() && !skipRecommendation) {\n                const innerArgv = __classPrivateFieldGet(this, _YargsInstance_command, \"f\").runCommand(null, this, parsed, 0, helpOnly, helpOptSet || versionOptSet || helpOnly);\n                return this[kPostProcess](innerArgv, populateDoubleDash, !!calledFromCommand, false);\n            }\n            if (requestCompletions) {\n                if (__classPrivateFieldGet(this, _YargsInstance_exitProcess, \"f\"))\n                    setBlocking(true);\n                args = [].concat(args);\n                const completionArgs = args.slice(args.indexOf(`--${__classPrivateFieldGet(this, _YargsInstance_completion, \"f\").completionKey}`) + 1);\n                __classPrivateFieldGet(this, _YargsInstance_completion, \"f\").getCompletion(completionArgs, (err, completions) => {\n                    if (err)\n                        throw new YError(err.message);\n                    (completions || []).forEach(completion => {\n                        __classPrivateFieldGet(this, _YargsInstance_logger, \"f\").log(completion);\n                    });\n                    this.exit(0);\n                });\n                return this[kPostProcess](argv, !populateDoubleDash, !!calledFromCommand, false);\n            }\n            if (!__classPrivateFieldGet(this, _YargsInstance_hasOutput, \"f\")) {\n                if (helpOptSet) {\n                    if (__classPrivateFieldGet(this, _YargsInstance_exitProcess, \"f\"))\n                        setBlocking(true);\n                    skipValidation = true;\n                    this.showHelp('log');\n                    this.exit(0);\n                }\n                else if (versionOptSet) {\n                    if (__classPrivateFieldGet(this, _YargsInstance_exitProcess, \"f\"))\n                        setBlocking(true);\n                    skipValidation = true;\n                    __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").showVersion('log');\n                    this.exit(0);\n                }\n            }\n            if (!skipValidation && __classPrivateFieldGet(this, _YargsInstance_options, \"f\").skipValidation.length > 0) {\n                skipValidation = Object.keys(argv).some(key => __classPrivateFieldGet(this, _YargsInstance_options, \"f\").skipValidation.indexOf(key) >= 0 && argv[key] === true);\n            }\n            if (!skipValidation) {\n                if (parsed.error)\n                    throw new YError(parsed.error.message);\n                if (!requestCompletions) {\n                    const validation = this[kRunValidation](aliases, {}, parsed.error);\n                    if (!calledFromCommand) {\n                        argvPromise = applyMiddleware(argv, this, __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").getMiddleware(), true);\n                    }\n                    argvPromise = this[kValidateAsync](validation, argvPromise !== null && argvPromise !== void 0 ? argvPromise : argv);\n                    if (isPromise(argvPromise) && !calledFromCommand) {\n                        argvPromise = argvPromise.then(() => {\n                            return applyMiddleware(argv, this, __classPrivateFieldGet(this, _YargsInstance_globalMiddleware, \"f\").getMiddleware(), false);\n                        });\n                    }\n                }\n            }\n        }\n        catch (err) {\n            if (err instanceof YError)\n                __classPrivateFieldGet(this, _YargsInstance_usage, \"f\").fail(err.message, err);\n            else\n                throw err;\n        }\n        return this[kPostProcess](argvPromise !== null && argvPromise !== void 0 ? argvPromise : argv, populateDoubleDash, !!calledFromCommand, true);\n    }\n    [kRunValidation](aliases, positionalMap, parseErrors, isDefaultCommand) {\n        const demandedOptions = { ...this.getDemandedOptions() };\n        return (argv) => {\n            if (parseErrors)\n                throw new YError(parseErrors.message);\n            __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").nonOptionCount(argv);\n            __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").requiredArguments(argv, demandedOptions);\n            let failedStrictCommands = false;\n            if (__classPrivateFieldGet(this, _YargsInstance_strictCommands, \"f\")) {\n                failedStrictCommands = __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").unknownCommands(argv);\n            }\n            if (__classPrivateFieldGet(this, _YargsInstance_strict, \"f\") && !failedStrictCommands) {\n                __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").unknownArguments(argv, aliases, positionalMap, !!isDefaultCommand);\n            }\n            else if (__classPrivateFieldGet(this, _YargsInstance_strictOptions, \"f\")) {\n                __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").unknownArguments(argv, aliases, {}, false, false);\n            }\n            __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").limitedChoices(argv);\n            __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").implications(argv);\n            __classPrivateFieldGet(this, _YargsInstance_validation, \"f\").conflicting(argv);\n        };\n    }\n    [kSetHasOutput]() {\n        __classPrivateFieldSet(this, _YargsInstance_hasOutput, true, \"f\");\n    }\n    [kTrackManuallySetKeys](keys) {\n        if (typeof keys === 'string') {\n            __classPrivateFieldGet(this, _YargsInstance_options, \"f\").key[keys] = true;\n        }\n        else {\n            for (const k of keys) {\n                __classPrivateFieldGet(this, _YargsInstance_options, \"f\").key[k] = true;\n            }\n        }\n    }\n}\nexport function isYargsInstance(y) {\n    return !!y && typeof y.getInternalMethods === 'function';\n}\n",
  "'use strict';\n\n// Bootstraps yargs for ESM:\nimport esmPlatformShim from './lib/platform-shims/esm.mjs';\nimport {YargsFactory} from './build/lib/yargs-factory.js';\n\nconst Yargs = YargsFactory(esmPlatformShim);\nexport default Yargs;\n",
  "#!/usr/bin/env node\n\n// A command parser for the composer CLI that takes the following arguments:\n//       --help     Show help                                             [boolean]\n//       --version  Show version number                                   [boolean]\n//   -i, --input    Specify the input file                                 [string]\n//   -m, --markup   Specify the markup text (instead of a file)            [string]\n//   -o, --output   Specify the output file                                [string]\n//   -a, --ast      Output the AST instead of the compiled text           [boolean]\n\nimport yargs from 'yargs';\nimport fs from 'fs';\nimport { hideBin } from 'yargs/helpers';\nimport { compile } from './compiler/compile';\nimport pkg from '../package.json';\nimport { parseAnsieMarkdown } from './parser';\n\nfunction readStdinWithTimeout(timeout: number): Promise<string> {\n    return new Promise((resolve, reject) => {\n        let inputData = '';\n\n        // Set a timeout to abort reading\n        const timer = setTimeout(() => {\n            process.stdin.pause();\n            resolve('');\n        }, timeout);\n\n        process.stdin.on('data', data => {\n            inputData += data;\n        });\n\n        process.stdin.on('end', () => {\n            clearTimeout(timer);\n            resolve(inputData);\n        });\n\n        process.stdin.on('error', err => {\n            clearTimeout(timer);\n            reject(err);\n        });\n\n        process.stdin.resume();\n    });\n}\n\nasync function handleInput() {\n    const stdInput = await readStdinWithTimeout(10);\n\n    const y = yargs(hideBin(process.argv))\n        .scriptName('ansie')\n        .version(pkg.version)\n        .usage('Usage: ansie [markup] -i [input] -o [output]')\n        .positional('markup', {\n            alias: 'm',\n            type: 'string',\n            description: 'Specify the markup text (instead of a file)',\n        })\n        .option('input', {\n            alias: 'i',\n            type: 'string',\n            description: 'Specify the input file',\n        })\n        .option('output', {\n            alias: 'o',\n            type: 'string',\n            description: 'Specify the output file',\n        })\n        .option('ast', {\n            alias: 'a',\n            type: 'boolean',\n            description: 'Output the AST instead of the compiled text',\n        })\n        .check(argv => {\n            const markup = argv._.join(' ');\n            if (argv.input && markup.length > 0) {\n                throw new Error(\n                    'You must specify either --input or markup as a positional argument, not both',\n                );\n            }\n\n            if (!argv.input && !markup && !stdInput) {\n                throw new Error(\n                    'You must specify either --input or --markup so that the compiler knows what to compile',\n                );\n            }\n\n            if (argv.input) {\n                if (!fs.existsSync(argv.input)) {\n                    throw new Error(\n                        `The input file ${argv.input} does not exist`,\n                    );\n                }\n            }\n\n            return true;\n        });\n\n    const argv = await y.argv;\n    if (argv['help']) {\n        y.showHelp();\n    } else if (argv['version']) {\n        console.log(pkg.version);\n    } else {\n        let input = '';\n        if (argv.input) {\n            // Read the input file into the string `input`\n            input = fs.readFileSync(argv.input, 'utf8');\n        } else if (argv._.length > 0) {\n            input = argv._.join(' ');\n        } else if (stdInput) {\n            input = stdInput;\n        }\n\n        if (input) {\n            let output = '';\n            if (argv.ast) {\n                output = JSON.stringify(parseAnsieMarkdown(input), null, 4);\n            } else {\n                output = compile({ markup: input }) || '';\n            }\n\n            if (output) {\n                if (argv.output) {\n                    fs.writeFileSync(argv.output, output);\n                } else {\n                    console.log(output);\n                }\n            } else {\n                throw new Error('No output was generated');\n            }\n        }\n    }\n}\n\nhandleInput()\n    .then(() => process.exit(0))\n    .catch(e => {\n        console.error(e);\n        process.exit(1);\n    });\n",
  "import type { AnsieStyle } from '../themes/themes';\n\n/**\n * This file contains all the types used by the parser and compiler.\n *\n * ‼️ IMPORTANT ‼️\n * IT'S IMPORTANT THAT THIS FILE IS NOT DEPENDENT ON ANY OTHER FILES IN THE PROJECT.\n *\n * This file is used by the parser and compiler.  It should not be dependent on any other\n * files in the project.  This is to avoid circular dependencies and any complexities that\n * may arise from them.\n * \n/**\n * The canonical list of supported tags.  We should never be referring\n * to tags as raw strings.  Instead, we should be using this enum.  This\n * will help us avoid typos and make it easier to refactor later.\n */\nexport enum ValidTags {\n    'h1' = 'h1',\n    'h2' = 'h2',\n    'h3' = 'h3',\n    'body' = 'body',\n    'span' = 'span',\n    'p' = 'p',\n    'div' = 'div',\n    'text' = 'text',\n    'li' = 'li',\n    'br' = 'br',\n}\n\n/**\n * A list of all the valid tags.  This is used by the parser to validate\n * the tags before returning the AST.\n * @internal\n */\nexport const ValidTagsList = Object.keys(ValidTags);\n\n/**\n * A type guard to determine if a given tag is a valid tag.\n * @param tag\n * @returns\n * @internal\n */\nexport type ValidTagsType = keyof typeof ValidTags;\n\n/**\n * @internal\n */\nexport const ColorAttributeValues = [\n    'black',\n    'red',\n    'green',\n    'yellow',\n    'blue',\n    'magenta',\n    'cyan',\n    'white',\n    'default',\n    'brightblack',\n    'brightred',\n    'brightgreen',\n    'brightyellow',\n    'brightblue',\n    'brightmagenta',\n    'brightcyan',\n    'gray',\n];\n\n/**\n * A list of all the valid boolean attribute values.  This is used by the parser to validate\n * the attributes for each tag before returning the AST.\n * @internal\n */\nconst booleanValues = ['true', 'false', 'yes', 'no', 'y', 'n', '1', '0'];\n\n/**\n * @internal\n */\nexport type BaseAnsieNode = {\n    node: ValidTags;\n    content?: AnsieNode | AnsieNode[];\n};\n\n////// Space Attributes - These are the attributes that can be associated with semantic elements that have a concept of spacing such as <div> and <p>\n\n/**\n * @internal\n */\nexport const SpaceAttributes = {\n    margin: ['number'],\n    marginTop: ['number'],\n    marginBottom: ['number'],\n    marginLeft: ['number'],\n    marginRight: ['number'],\n};\n\n/**\n * @internal\n */\nexport type SpaceAttributesInterface = {\n    [key in keyof typeof SpaceAttributes]?: string;\n};\n\n/**\n * @internal\n */\nexport type SpaceNodeBase = BaseAnsieNode & SpaceAttributesInterface;\n\n///// Text Attributes - These are the attributes that can be associated with text-based semantic elements such as <span> and <p>\nexport const TextAttributes = {\n    fg: ColorAttributeValues,\n    bg: ColorAttributeValues,\n    bold: [...booleanValues],\n    italics: [...booleanValues],\n    underline: [...booleanValues, 'single', 'double', 'none'],\n};\n\n/**\n * @internal\n */\nexport type TextAttributesInterface = {\n    [key in keyof typeof TextAttributes]?: string;\n};\n\n/**\n * @internal\n */\nexport type TextNodeBase = BaseAnsieNode & TextAttributesInterface;\n\n///////\n\n///// List Attributes - These are the attributes that can be associated with text-based semantic elements such as <span> and <p>\n/**\n * @internal\n */\nexport const ListAttributes = {\n    bullet: ['*', '-', '+'],\n    indent: ['number'],\n};\n\n/**\n * @internal\n */\nexport type ListAttributesKeysType = keyof typeof ListAttributes;\n\n/**\n * @internal\n */\nexport type ListAttributesInterface = {\n    [key in ListAttributesKeysType]?: string;\n};\n\n/**\n * @internal\n */\nexport type ListItemNodeBase = BaseAnsieNode & ListAttributesInterface;\n///////\n\n///// Raw Attributes - These are the attributes that can be associated with text-based semantic elements such as <span> and <p>\n/**\n * @internal\n */\nexport const RawTextAttributes = {\n    value: ['string'],\n};\n\n/**\n * @internal\n */\nexport type RawTextAttributesKeysType = keyof typeof RawTextAttributes;\n\n/**\n * @internal\n */\nexport type RawTextAttributesInterface = {\n    [key in RawTextAttributesKeysType]?: string;\n};\n///////\n\n/**\n * A union of all the valid attribute keys.\n * @internal\n */\nexport type AllAttributeKeys =\n    | keyof typeof TextAttributes\n    | keyof typeof SpaceAttributes\n    | keyof typeof ListAttributes\n    | keyof typeof RawTextAttributes;\n\n///////\n\n/**\n * A list of all the valid attribute keys.  This is used by the parser to validate\n * the attributes for each tag before returning the AST.\n * @internal\n */\nexport const AllAttributeKeysList = [\n    ...Object.keys(SpaceAttributes),\n    ...Object.keys(TextAttributes),\n    ...Object.keys(ListAttributes),\n    ...Object.keys(RawTextAttributes),\n];\n\n/**\n * A type guard to determine if a given key is a valid attribute.\n * @param key\n * @returns\n * @internal\n */\nexport function isAttribute(key: string): key is AllAttributeKeys {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return AllAttributeKeysList.includes(key as any);\n}\n\n/**\n * This is a map of all the valid attributes for each tag.  This is used by the parser to\n * validate the attributes for each tag before returning the AST.\n * @internal\n */\nexport const TagAttributeMap = {\n    [ValidTags.h1]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.h2]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.h3]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.body]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.span]: {\n        ...TextAttributes,\n    },\n    [ValidTags.p]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.div]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.li]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n        ...ListAttributes,\n    },\n    [ValidTags.text]: {},\n    [ValidTags.br]: {\n        ...SpaceAttributes,\n    },\n};\n\n/**\n * A union of all the valid attribute values.\n * @internal\n */\nexport type AnsieNode = BaseAnsieNode &\n    SpaceAttributesInterface &\n    TextAttributesInterface &\n    ListAttributesInterface &\n    RawTextAttributesInterface;\n\nexport type Ast = AnsieNode[];\n\n/**\n * Wrap a node in the AST to provide rendering overridable methods.  It takes\n * a raw node from the AST produced by the parser.  This is then overridden by\n * the various node implementations to provide specialized rendering for each\n * node type.  For example, a <p> tag will render differently than a <span> tag.\n *\n * The _raw property is the original AST node.  It also provides\n * @internal\n */\nexport abstract class AnsieNodeImpl {\n    _raw: AnsieNode;\n    _style: AnsieStyle;\n\n    constructor(node: AnsieNode, style: AnsieStyle) {\n        this._raw = node;\n        this._style = style;\n    }\n\n    get node(): ValidTags {\n        return this._raw.node;\n    }\n\n    /**\n     * Returns the attributes for this node.  This is a subset of the raw node\n     * that only contains the attributes.  Attributes are anything that is not\n     * \"node\" or \"content\".\n     */\n    get attributes(): Record<AllAttributeKeys, string> {\n        return Object.entries(this._raw).reduce(\n            (acc, [key, value]) => {\n                if (isAttribute(key) && typeof value === 'string') {\n                    acc[key] = value;\n                }\n                return acc;\n            },\n            {} as Record<AllAttributeKeys, string>,\n        );\n    }\n\n    /**\n     * Returns a specific attribute value.\n     * @param key\n     * @returns\n     */\n    attr(key: AllAttributeKeys): string | undefined {\n        return this._raw[key];\n    }\n\n    abstract renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }): string;\n    abstract renderEnd({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }): string;\n}\n\n/**\n * Represents a compiler error.\n * @internal\n */\nexport class CompilerError implements Error {\n    name: string = 'CompilerError';\n    message: string;\n    fatal: boolean;\n\n    markupNode: AnsieNode;\n    markupStack: AnsieNode[];\n\n    /**\n     * Creates a new instance of CompilerError.\n     * @param message The error message.\n     * @param markupNode The markup node associated with the error.\n     * @param markupStack The stack of markup nodes leading to the error.\n     * @param fatal Indicates whether the error is fatal or not. Default is false.\n     */\n    constructor(\n        message: string,\n        markupNode: AnsieNode,\n        markupStack: AnsieNode[],\n        fatal: boolean = false,\n    ) {\n        this.message = message;\n        this.markupNode = markupNode;\n        this.markupStack = markupStack;\n        this.fatal = fatal;\n    }\n\n    /**\n     * Returns a string representation of the CompilerError.\n     * @returns The string representation of the CompilerError.\n     */\n    toString() {\n        return `${this.name}: ${this.message} (${this.markupNode.node}, ${this.markupStack.map(node => node.node).join(', ')})`;\n    }\n\n    /**\n     * Determines whether the error can be continued or not.\n     * @returns True if the error can be continued, false otherwise.\n     */\n    continue() {\n        return !this.fatal;\n    }\n}\n\nexport type CompilerFormat = 'ansi' | 'markup';\n",
  "/* eslint-disable */\n// Generated by Peggy 3.0.2.\n//\n// https://peggyjs.org/\n\nimport { TagAttributeMap } from '../compiler/types';\n\nfunction add(obj, props) {\n    for (const [k, v] of Object.entries(props)) {\n        if (v) {\n            obj[k] = v;\n        }\n    }\n    return obj;\n}\n\nfunction clumpStrings(vals) {\n    const ret = [];\n    let lastStr = '';\n    for (const val of vals) {\n        if (typeof val === 'string') {\n            lastStr += val;\n        } else {\n            if (lastStr) {\n                ret.push(lastStr);\n                lastStr = '';\n            }\n            ret.push(val);\n        }\n    }\n    if (lastStr) {\n        ret.push(lastStr);\n    }\n    return ret;\n}\n\nfunction peg$subclass(child, parent) {\n    function C() {\n        this.constructor = child;\n    }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    // istanbul ignore next Check is a necessary evil to support older environments\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = 'SyntaxError';\n    return self;\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\nfunction peg$padEnd(str, targetLength, padString) {\n    padString = padString || ' ';\n    if (str.length > targetLength) {\n        return str;\n    }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n}\n\npeg$SyntaxError.prototype.format = function (sources) {\n    var str = 'Error: ' + this.message;\n    if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n            if (sources[k].source === this.location.source) {\n                src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n                break;\n            }\n        }\n        var s = this.location.start;\n        var offset_s =\n            this.location.source &&\n            typeof this.location.source.offset === 'function'\n                ? this.location.source.offset(s)\n                : s;\n        var loc =\n            this.location.source + ':' + offset_s.line + ':' + offset_s.column;\n        if (src) {\n            var e = this.location.end;\n            var filler = peg$padEnd('', offset_s.line.toString().length, ' ');\n            var line = src[s.line - 1];\n            var last = s.line === e.line ? e.column : line.length + 1;\n            var hatLen = last - s.column || 1;\n            str +=\n                '\\n --> ' +\n                loc +\n                '\\n' +\n                filler +\n                ' |\\n' +\n                offset_s.line +\n                ' | ' +\n                line +\n                '\\n' +\n                filler +\n                ' | ' +\n                peg$padEnd('', s.column - 1, ' ') +\n                peg$padEnd('', hatLen, '^');\n        } else {\n            str += '\\n at ' + loc;\n        }\n    }\n    return str;\n};\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n        literal: function (expectation) {\n            return '\"' + literalEscape(expectation.text) + '\"';\n        },\n\n        class: function (expectation) {\n            var escapedParts = expectation.parts.map(function (part) {\n                return Array.isArray(part)\n                    ? classEscape(part[0]) + '-' + classEscape(part[1])\n                    : classEscape(part);\n            });\n\n            return (\n                '[' +\n                (expectation.inverted ? '^' : '') +\n                escapedParts.join('') +\n                ']'\n            );\n        },\n\n        any: function () {\n            return 'any character';\n        },\n\n        end: function () {\n            return 'end of input';\n        },\n\n        other: function (expectation) {\n            return expectation.description;\n        },\n    };\n\n    function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n        return s\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\"/g, '\\\\\"')\n            .replace(/\\0/g, '\\\\0')\n            .replace(/\\t/g, '\\\\t')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/[\\x00-\\x0F]/g, function (ch) {\n                return '\\\\x0' + hex(ch);\n            })\n            .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n                return '\\\\x' + hex(ch);\n            });\n    }\n\n    function classEscape(s) {\n        return s\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\]/g, '\\\\]')\n            .replace(/\\^/g, '\\\\^')\n            .replace(/-/g, '\\\\-')\n            .replace(/\\0/g, '\\\\0')\n            .replace(/\\t/g, '\\\\t')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/[\\x00-\\x0F]/g, function (ch) {\n                return '\\\\x0' + hex(ch);\n            })\n            .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n                return '\\\\x' + hex(ch);\n            });\n    }\n\n    function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n        var descriptions = expected.map(describeExpectation);\n        var i, j;\n\n        descriptions.sort();\n\n        if (descriptions.length > 0) {\n            for (i = 1, j = 1; i < descriptions.length; i++) {\n                if (descriptions[i - 1] !== descriptions[i]) {\n                    descriptions[j] = descriptions[i];\n                    j++;\n                }\n            }\n            descriptions.length = j;\n        }\n\n        switch (descriptions.length) {\n            case 1:\n                return descriptions[0];\n\n            case 2:\n                return descriptions[0] + ' or ' + descriptions[1];\n\n            default:\n                return (\n                    descriptions.slice(0, -1).join(', ') +\n                    ', or ' +\n                    descriptions[descriptions.length - 1]\n                );\n        }\n    }\n\n    function describeFound(found) {\n        return found ? '\"' + literalEscape(found) + '\"' : 'end of input';\n    }\n\n    return (\n        'Expected ' +\n        describeExpected(expected) +\n        ' but ' +\n        describeFound(found) +\n        ' found.'\n    );\n};\n\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { document: peg$parsedocument };\n    var peg$startRuleFunction = peg$parsedocument;\n\n    var peg$c0 = '\\t';\n    var peg$c1 = '\\n';\n    var peg$c2 = '\\r';\n    var peg$c3 = '.';\n    var peg$c4 = '-';\n    var peg$c5 = '_';\n    var peg$c6 = ':';\n    var peg$c7 = ' ';\n    var peg$c8 = '\"';\n    var peg$c9 = \"'\";\n    var peg$c10 = '<!--';\n    var peg$c11 = '--';\n    var peg$c12 = '-->';\n    var peg$c13 = '<![CDATA[';\n    var peg$c14 = ']]>';\n    var peg$c15 = '=';\n    var peg$c16 = '1.0';\n    var peg$c17 = 'standalone';\n    var peg$c18 = 'yes';\n    var peg$c19 = 'no';\n    var peg$c20 = '<';\n    var peg$c21 = '>';\n    var peg$c22 = '</';\n    var peg$c23 = '/>';\n\n    var peg$r0 = /^[ -\\uD7FF]/;\n    var peg$r1 = /^[\\uE000-\\uFFFD]/;\n    var peg$r2 = /^[\\uD800-\\uDBFF]/;\n    var peg$r3 = /^[\\uDC00-\\uDFFF]/;\n    var peg$r4 = /^[ \\t\\r\\n]/;\n    var peg$r5 = /^[^%&\"]/;\n    var peg$r6 = /^[^%&']/;\n    var peg$r7 = /^[^<&\"]/;\n    var peg$r8 = /^[^<&']/;\n    var peg$r9 = /^[^\"]/;\n    var peg$r10 = /^[^']/;\n    var peg$r11 = /^[\\-()+,.\\/:=?;!*#@$_% \\r\\na-zA-Z0-9]/;\n    var peg$r12 = /^[^<&]/;\n    var peg$r13 = /^[A-Za-z\\xC0-\\xD6]/;\n    var peg$r14 = /^[\\xD8-\\xF6\\xF8-\\xFF\\u0100-\\u0131]/;\n    var peg$r15 = /^[\\u0134-\\u013E\\u0141-\\u0148\\u014A-\\u017E]/;\n    var peg$r16 = /^[\\u0180-\\u01C3\\u01CD-\\u01F0\\u01F4-\\u01F5]/;\n    var peg$r17 = /^[\\u01FA-\\u0217\\u0250-\\u02A8\\u02BB-\\u02C1]/;\n    var peg$r18 = /^[\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1]/;\n    var peg$r19 = /^[\\u03A3-\\u03CE\\u03D0-\\u03D6\\u03DA\\u03DC]/;\n    var peg$r20 = /^[\\u03DE\\u03E0\\u03E2-\\u03F3\\u0401-\\u040C]/;\n    var peg$r21 = /^[\\u040E-\\u044F\\u0451-\\u045C\\u045E-\\u0481]/;\n    var peg$r22 = /^[\\u0490-\\u04C4\\u04C7-\\u04C8\\u04CB-\\u04CC]/;\n    var peg$r23 = /^[\\u04D0-\\u04EB\\u04EE-\\u04F5\\u04F8-\\u04F9]/;\n    var peg$r24 = /^[\\u0531-\\u0556\\u0559\\u0561-\\u0586]/;\n    var peg$r25 = /^[\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A]/;\n    var peg$r26 = /^[\\u0641-\\u064A\\u0671-\\u06B7\\u06BA-\\u06BE]/;\n    var peg$r27 = /^[\\u06C0-\\u06CE\\u06D0-\\u06D3\\u06D5\\u06E5-\\u06E6]/;\n    var peg$r28 = /^[\\u0905-\\u0939\\u093D\\u0958-\\u0961\\u0985-\\u098C]/;\n    var peg$r29 = /^[\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0]/;\n    var peg$r30 = /^[\\u09B2\\u09B6-\\u09B9\\u09DC-\\u09DD\\u09DF-\\u09E1]/;\n    var peg$r31 = /^[\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10]/;\n    var peg$r32 = /^[\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33]/;\n    var peg$r33 = /^[\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C]/;\n    var peg$r34 = /^[\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8B\\u0A8D]/;\n    var peg$r35 = /^[\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0]/;\n    var peg$r36 = /^[\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AE0]/;\n    var peg$r37 = /^[\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28]/;\n    var peg$r38 = /^[\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B36-\\u0B39]/;\n    var peg$r39 = /^[\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61]/;\n    var peg$r40 = /^[\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95]/;\n    var peg$r41 = /^[\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F]/;\n    var peg$r42 = /^[\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB5]/;\n    var peg$r43 = /^[\\u0BB7-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10]/;\n    var peg$r44 = /^[\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39]/;\n    var peg$r45 = /^[\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90]/;\n    var peg$r46 = /^[\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9]/;\n    var peg$r47 = /^[\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10]/;\n    var peg$r48 = /^[\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D60-\\u0D61]/;\n    var peg$r49 = /^[\\u0E01-\\u0E2E\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45]/;\n    var peg$r50 = /^[\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A]/;\n    var peg$r51 = /^[\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3]/;\n    var peg$r52 = /^[\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EAE\\u0EB0]/;\n    var peg$r53 = /^[\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0F40-\\u0F47]/;\n    var peg$r54 = /^[\\u0F49-\\u0F69\\u10A0-\\u10C5\\u10D0-\\u10F6\\u1100]/;\n    var peg$r55 = /^[\\u1102-\\u1103\\u1105-\\u1107\\u1109\\u110B-\\u110C]/;\n    var peg$r56 = /^[\\u110E-\\u1112\\u113C\\u113E\\u1140\\u114C\\u114E]/;\n    var peg$r57 = /^[\\u1150\\u1154-\\u1155\\u1159\\u115F-\\u1161\\u1163]/;\n    var peg$r58 = /^[\\u1165\\u1167\\u1169\\u116D-\\u116E\\u1172-\\u1173]/;\n    var peg$r59 = /^[\\u1175\\u119E\\u11A8\\u11AB\\u11AE-\\u11AF]/;\n    var peg$r60 = /^[\\u11B7-\\u11B8\\u11BA\\u11BC-\\u11C2\\u11EB\\u11F0]/;\n    var peg$r61 = /^[\\u11F9\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15]/;\n    var peg$r62 = /^[\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D]/;\n    var peg$r63 = /^[\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D]/;\n    var peg$r64 = /^[\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4]/;\n    var peg$r65 = /^[\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB]/;\n    var peg$r66 = /^[\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126]/;\n    var peg$r67 = /^[\\u212A-\\u212B\\u212E\\u2180-\\u2182\\u3041-\\u3094]/;\n    var peg$r68 = /^[\\u30A1-\\u30FA\\u3105-\\u312C\\uAC00-\\uD7A3]/;\n    var peg$r69 = /^[\\u4E00-\\u9FA5\\u3007\\u3021-\\u3029]/;\n    var peg$r70 = /^[\\u0300-\\u0345\\u0360-\\u0361\\u0483-\\u0486]/;\n    var peg$r71 = /^[\\u0591-\\u05A1\\u05A3-\\u05B9\\u05BB-\\u05BD\\u05BF]/;\n    var peg$r72 = /^[\\u05C1-\\u05C2\\u05C4\\u064B-\\u0652\\u0670]/;\n    var peg$r73 = /^[\\u06D6-\\u06DC\\u06DD-\\u06DF\\u06E0-\\u06E4]/;\n    var peg$r74 = /^[\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0901-\\u0903]/;\n    var peg$r75 = /^[\\u093C\\u093E-\\u094C\\u094D\\u0951-\\u0954]/;\n    var peg$r76 = /^[\\u0962-\\u0963\\u0981-\\u0983\\u09BC\\u09BE]/;\n    var peg$r77 = /^[\\u09BF\\u09C0-\\u09C4\\u09C7-\\u09C8\\u09CB-\\u09CD]/;\n    var peg$r78 = /^[\\u09D7\\u09E2-\\u09E3\\u0A02\\u0A3C\\u0A3E\\u0A3F]/;\n    var peg$r79 = /^[\\u0A40-\\u0A42\\u0A47-\\u0A48\\u0A4B-\\u0A4D]/;\n    var peg$r80 = /^[\\u0A70-\\u0A71\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5]/;\n    var peg$r81 = /^[\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0B01-\\u0B03\\u0B3C]/;\n    var peg$r82 = /^[\\u0B3E-\\u0B43\\u0B47-\\u0B48\\u0B4B-\\u0B4D]/;\n    var peg$r83 = /^[\\u0B56-\\u0B57\\u0B82-\\u0B83\\u0BBE-\\u0BC2]/;\n    var peg$r84 = /^[\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C01-\\u0C03]/;\n    var peg$r85 = /^[\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D]/;\n    var peg$r86 = /^[\\u0C55-\\u0C56\\u0C82-\\u0C83\\u0CBE-\\u0CC4]/;\n    var peg$r87 = /^[\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5-\\u0CD6]/;\n    var peg$r88 = /^[\\u0D02-\\u0D03\\u0D3E-\\u0D43\\u0D46-\\u0D48]/;\n    var peg$r89 = /^[\\u0D4A-\\u0D4D\\u0D57\\u0E31\\u0E34-\\u0E3A]/;\n    var peg$r90 = /^[\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC]/;\n    var peg$r91 = /^[\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39]/;\n    var peg$r92 = /^[\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86-\\u0F8B]/;\n    var peg$r93 = /^[\\u0F90-\\u0F95\\u0F97\\u0F99-\\u0FAD\\u0FB1-\\u0FB7]/;\n    var peg$r94 = /^[\\u0FB9\\u20D0-\\u20DC\\u20E1\\u302A-\\u302F]/;\n    var peg$r95 = /^[\\u3099\\u309A]/;\n    var peg$r96 = /^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]/;\n    var peg$r97 = /^[\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F]/;\n    var peg$r98 = /^[\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE7-\\u0BEF]/;\n    var peg$r99 = /^[\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F]/;\n    var peg$r100 = /^[\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29]/;\n    var peg$r101 = /^[\\xB7\\u02D0\\u02D1\\u0387\\u0640\\u0E46]/;\n    var peg$r102 = /^[\\u0EC6\\u3005\\u3031-\\u3035\\u309D-\\u309E]/;\n    var peg$r103 = /^[\\u30FC-\\u30FE]/;\n\n    var peg$e0 = peg$literalExpectation('\\t', false);\n    var peg$e1 = peg$literalExpectation('\\n', false);\n    var peg$e2 = peg$literalExpectation('\\r', false);\n    var peg$e3 = peg$classExpectation([[' ', '\\uD7FF']], false, false);\n    var peg$e4 = peg$classExpectation([['\\uE000', '\\uFFFD']], false, false);\n    var peg$e5 = peg$classExpectation([['\\uD800', '\\uDBFF']], false, false);\n    var peg$e6 = peg$classExpectation([['\\uDC00', '\\uDFFF']], false, false);\n    var peg$e7 = peg$classExpectation([' ', '\\t', '\\r', '\\n'], false, false);\n    var peg$e8 = peg$literalExpectation('.', false);\n    var peg$e9 = peg$literalExpectation('-', false);\n    var peg$e10 = peg$literalExpectation('_', false);\n    var peg$e11 = peg$literalExpectation(':', false);\n    var peg$e12 = peg$literalExpectation(' ', false);\n    var peg$e13 = peg$literalExpectation('\"', false);\n    var peg$e14 = peg$classExpectation(['%', '&', '\"'], true, false);\n    var peg$e15 = peg$literalExpectation(\"'\", false);\n    var peg$e16 = peg$classExpectation(['%', '&', \"'\"], true, false);\n    var peg$e17 = peg$classExpectation(['<', '&', '\"'], true, false);\n    var peg$e18 = peg$classExpectation(['<', '&', \"'\"], true, false);\n    var peg$e19 = peg$classExpectation(['\"'], true, false);\n    var peg$e20 = peg$classExpectation([\"'\"], true, false);\n    var peg$e21 = peg$classExpectation(\n        [\n            '-',\n            '(',\n            ')',\n            '+',\n            ',',\n            '.',\n            '/',\n            ':',\n            '=',\n            '?',\n            ';',\n            '!',\n            '*',\n            '#',\n            '@',\n            '$',\n            '_',\n            '%',\n            ' ',\n            '\\r',\n            '\\n',\n            ['a', 'z'],\n            ['A', 'Z'],\n            ['0', '9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e22 = peg$classExpectation(['<', '&'], true, false);\n    var peg$e23 = peg$literalExpectation('<!--', false);\n    var peg$e24 = peg$literalExpectation('--', false);\n    var peg$e25 = peg$literalExpectation('-->', false);\n    var peg$e26 = peg$literalExpectation('<![CDATA[', false);\n    var peg$e27 = peg$literalExpectation(']]>', false);\n    var peg$e28 = peg$literalExpectation('=', false);\n    var peg$e29 = peg$literalExpectation('1.0', false);\n    var peg$e30 = peg$literalExpectation('standalone', false);\n    var peg$e31 = peg$literalExpectation('yes', false);\n    var peg$e32 = peg$literalExpectation('no', false);\n    var peg$e33 = peg$literalExpectation('<', false);\n    var peg$e34 = peg$literalExpectation('>', false);\n    var peg$e35 = peg$literalExpectation('</', false);\n    var peg$e36 = peg$literalExpectation('/>', false);\n    var peg$e37 = peg$classExpectation(\n        [\n            ['A', 'Z'],\n            ['a', 'z'],\n            ['\\xC0', '\\xD6'],\n        ],\n        false,\n        false,\n    );\n    var peg$e38 = peg$classExpectation(\n        [\n            ['\\xD8', '\\xF6'],\n            ['\\xF8', '\\xFF'],\n            ['\\u0100', '\\u0131'],\n        ],\n        false,\n        false,\n    );\n    var peg$e39 = peg$classExpectation(\n        [\n            ['\\u0134', '\\u013E'],\n            ['\\u0141', '\\u0148'],\n            ['\\u014A', '\\u017E'],\n        ],\n        false,\n        false,\n    );\n    var peg$e40 = peg$classExpectation(\n        [\n            ['\\u0180', '\\u01C3'],\n            ['\\u01CD', '\\u01F0'],\n            ['\\u01F4', '\\u01F5'],\n        ],\n        false,\n        false,\n    );\n    var peg$e41 = peg$classExpectation(\n        [\n            ['\\u01FA', '\\u0217'],\n            ['\\u0250', '\\u02A8'],\n            ['\\u02BB', '\\u02C1'],\n        ],\n        false,\n        false,\n    );\n    var peg$e42 = peg$classExpectation(\n        ['\\u0386', ['\\u0388', '\\u038A'], '\\u038C', ['\\u038E', '\\u03A1']],\n        false,\n        false,\n    );\n    var peg$e43 = peg$classExpectation(\n        [['\\u03A3', '\\u03CE'], ['\\u03D0', '\\u03D6'], '\\u03DA', '\\u03DC'],\n        false,\n        false,\n    );\n    var peg$e44 = peg$classExpectation(\n        ['\\u03DE', '\\u03E0', ['\\u03E2', '\\u03F3'], ['\\u0401', '\\u040C']],\n        false,\n        false,\n    );\n    var peg$e45 = peg$classExpectation(\n        [\n            ['\\u040E', '\\u044F'],\n            ['\\u0451', '\\u045C'],\n            ['\\u045E', '\\u0481'],\n        ],\n        false,\n        false,\n    );\n    var peg$e46 = peg$classExpectation(\n        [\n            ['\\u0490', '\\u04C4'],\n            ['\\u04C7', '\\u04C8'],\n            ['\\u04CB', '\\u04CC'],\n        ],\n        false,\n        false,\n    );\n    var peg$e47 = peg$classExpectation(\n        [\n            ['\\u04D0', '\\u04EB'],\n            ['\\u04EE', '\\u04F5'],\n            ['\\u04F8', '\\u04F9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e48 = peg$classExpectation(\n        [['\\u0531', '\\u0556'], '\\u0559', ['\\u0561', '\\u0586']],\n        false,\n        false,\n    );\n    var peg$e49 = peg$classExpectation(\n        [\n            ['\\u05D0', '\\u05EA'],\n            ['\\u05F0', '\\u05F2'],\n            ['\\u0621', '\\u063A'],\n        ],\n        false,\n        false,\n    );\n    var peg$e50 = peg$classExpectation(\n        [\n            ['\\u0641', '\\u064A'],\n            ['\\u0671', '\\u06B7'],\n            ['\\u06BA', '\\u06BE'],\n        ],\n        false,\n        false,\n    );\n    var peg$e51 = peg$classExpectation(\n        [\n            ['\\u06C0', '\\u06CE'],\n            ['\\u06D0', '\\u06D3'],\n            '\\u06D5',\n            ['\\u06E5', '\\u06E6'],\n        ],\n        false,\n        false,\n    );\n    var peg$e52 = peg$classExpectation(\n        [\n            ['\\u0905', '\\u0939'],\n            '\\u093D',\n            ['\\u0958', '\\u0961'],\n            ['\\u0985', '\\u098C'],\n        ],\n        false,\n        false,\n    );\n    var peg$e53 = peg$classExpectation(\n        [\n            ['\\u098F', '\\u0990'],\n            ['\\u0993', '\\u09A8'],\n            ['\\u09AA', '\\u09B0'],\n        ],\n        false,\n        false,\n    );\n    var peg$e54 = peg$classExpectation(\n        [\n            '\\u09B2',\n            ['\\u09B6', '\\u09B9'],\n            ['\\u09DC', '\\u09DD'],\n            ['\\u09DF', '\\u09E1'],\n        ],\n        false,\n        false,\n    );\n    var peg$e55 = peg$classExpectation(\n        [\n            ['\\u09F0', '\\u09F1'],\n            ['\\u0A05', '\\u0A0A'],\n            ['\\u0A0F', '\\u0A10'],\n        ],\n        false,\n        false,\n    );\n    var peg$e56 = peg$classExpectation(\n        [\n            ['\\u0A13', '\\u0A28'],\n            ['\\u0A2A', '\\u0A30'],\n            ['\\u0A32', '\\u0A33'],\n        ],\n        false,\n        false,\n    );\n    var peg$e57 = peg$classExpectation(\n        [\n            ['\\u0A35', '\\u0A36'],\n            ['\\u0A38', '\\u0A39'],\n            ['\\u0A59', '\\u0A5C'],\n        ],\n        false,\n        false,\n    );\n    var peg$e58 = peg$classExpectation(\n        ['\\u0A5E', ['\\u0A72', '\\u0A74'], ['\\u0A85', '\\u0A8B'], '\\u0A8D'],\n        false,\n        false,\n    );\n    var peg$e59 = peg$classExpectation(\n        [\n            ['\\u0A8F', '\\u0A91'],\n            ['\\u0A93', '\\u0AA8'],\n            ['\\u0AAA', '\\u0AB0'],\n        ],\n        false,\n        false,\n    );\n    var peg$e60 = peg$classExpectation(\n        [['\\u0AB2', '\\u0AB3'], ['\\u0AB5', '\\u0AB9'], '\\u0ABD', '\\u0AE0'],\n        false,\n        false,\n    );\n    var peg$e61 = peg$classExpectation(\n        [\n            ['\\u0B05', '\\u0B0C'],\n            ['\\u0B0F', '\\u0B10'],\n            ['\\u0B13', '\\u0B28'],\n        ],\n        false,\n        false,\n    );\n    var peg$e62 = peg$classExpectation(\n        [\n            ['\\u0B2A', '\\u0B30'],\n            ['\\u0B32', '\\u0B33'],\n            ['\\u0B36', '\\u0B39'],\n        ],\n        false,\n        false,\n    );\n    var peg$e63 = peg$classExpectation(\n        ['\\u0B3D', ['\\u0B5C', '\\u0B5D'], ['\\u0B5F', '\\u0B61']],\n        false,\n        false,\n    );\n    var peg$e64 = peg$classExpectation(\n        [\n            ['\\u0B85', '\\u0B8A'],\n            ['\\u0B8E', '\\u0B90'],\n            ['\\u0B92', '\\u0B95'],\n        ],\n        false,\n        false,\n    );\n    var peg$e65 = peg$classExpectation(\n        [['\\u0B99', '\\u0B9A'], '\\u0B9C', ['\\u0B9E', '\\u0B9F']],\n        false,\n        false,\n    );\n    var peg$e66 = peg$classExpectation(\n        [\n            ['\\u0BA3', '\\u0BA4'],\n            ['\\u0BA8', '\\u0BAA'],\n            ['\\u0BAE', '\\u0BB5'],\n        ],\n        false,\n        false,\n    );\n    var peg$e67 = peg$classExpectation(\n        [\n            ['\\u0BB7', '\\u0BB9'],\n            ['\\u0C05', '\\u0C0C'],\n            ['\\u0C0E', '\\u0C10'],\n        ],\n        false,\n        false,\n    );\n    var peg$e68 = peg$classExpectation(\n        [\n            ['\\u0C12', '\\u0C28'],\n            ['\\u0C2A', '\\u0C33'],\n            ['\\u0C35', '\\u0C39'],\n        ],\n        false,\n        false,\n    );\n    var peg$e69 = peg$classExpectation(\n        [\n            ['\\u0C60', '\\u0C61'],\n            ['\\u0C85', '\\u0C8C'],\n            ['\\u0C8E', '\\u0C90'],\n        ],\n        false,\n        false,\n    );\n    var peg$e70 = peg$classExpectation(\n        [\n            ['\\u0C92', '\\u0CA8'],\n            ['\\u0CAA', '\\u0CB3'],\n            ['\\u0CB5', '\\u0CB9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e71 = peg$classExpectation(\n        [\n            '\\u0CDE',\n            ['\\u0CE0', '\\u0CE1'],\n            ['\\u0D05', '\\u0D0C'],\n            ['\\u0D0E', '\\u0D10'],\n        ],\n        false,\n        false,\n    );\n    var peg$e72 = peg$classExpectation(\n        [\n            ['\\u0D12', '\\u0D28'],\n            ['\\u0D2A', '\\u0D39'],\n            ['\\u0D60', '\\u0D61'],\n        ],\n        false,\n        false,\n    );\n    var peg$e73 = peg$classExpectation(\n        [\n            ['\\u0E01', '\\u0E2E'],\n            '\\u0E30',\n            ['\\u0E32', '\\u0E33'],\n            ['\\u0E40', '\\u0E45'],\n        ],\n        false,\n        false,\n    );\n    var peg$e74 = peg$classExpectation(\n        [['\\u0E81', '\\u0E82'], '\\u0E84', ['\\u0E87', '\\u0E88'], '\\u0E8A'],\n        false,\n        false,\n    );\n    var peg$e75 = peg$classExpectation(\n        [\n            '\\u0E8D',\n            ['\\u0E94', '\\u0E97'],\n            ['\\u0E99', '\\u0E9F'],\n            ['\\u0EA1', '\\u0EA3'],\n        ],\n        false,\n        false,\n    );\n    var peg$e76 = peg$classExpectation(\n        [\n            '\\u0EA5',\n            '\\u0EA7',\n            ['\\u0EAA', '\\u0EAB'],\n            ['\\u0EAD', '\\u0EAE'],\n            '\\u0EB0',\n        ],\n        false,\n        false,\n    );\n    var peg$e77 = peg$classExpectation(\n        [\n            ['\\u0EB2', '\\u0EB3'],\n            '\\u0EBD',\n            ['\\u0EC0', '\\u0EC4'],\n            ['\\u0F40', '\\u0F47'],\n        ],\n        false,\n        false,\n    );\n    var peg$e78 = peg$classExpectation(\n        [\n            ['\\u0F49', '\\u0F69'],\n            ['\\u10A0', '\\u10C5'],\n            ['\\u10D0', '\\u10F6'],\n            '\\u1100',\n        ],\n        false,\n        false,\n    );\n    var peg$e79 = peg$classExpectation(\n        [\n            ['\\u1102', '\\u1103'],\n            ['\\u1105', '\\u1107'],\n            '\\u1109',\n            ['\\u110B', '\\u110C'],\n        ],\n        false,\n        false,\n    );\n    var peg$e80 = peg$classExpectation(\n        [\n            ['\\u110E', '\\u1112'],\n            '\\u113C',\n            '\\u113E',\n            '\\u1140',\n            '\\u114C',\n            '\\u114E',\n        ],\n        false,\n        false,\n    );\n    var peg$e81 = peg$classExpectation(\n        [\n            '\\u1150',\n            ['\\u1154', '\\u1155'],\n            '\\u1159',\n            ['\\u115F', '\\u1161'],\n            '\\u1163',\n        ],\n        false,\n        false,\n    );\n    var peg$e82 = peg$classExpectation(\n        [\n            '\\u1165',\n            '\\u1167',\n            '\\u1169',\n            ['\\u116D', '\\u116E'],\n            ['\\u1172', '\\u1173'],\n        ],\n        false,\n        false,\n    );\n    var peg$e83 = peg$classExpectation(\n        ['\\u1175', '\\u119E', '\\u11A8', '\\u11AB', ['\\u11AE', '\\u11AF']],\n        false,\n        false,\n    );\n    var peg$e84 = peg$classExpectation(\n        [\n            ['\\u11B7', '\\u11B8'],\n            '\\u11BA',\n            ['\\u11BC', '\\u11C2'],\n            '\\u11EB',\n            '\\u11F0',\n        ],\n        false,\n        false,\n    );\n    var peg$e85 = peg$classExpectation(\n        [\n            '\\u11F9',\n            ['\\u1E00', '\\u1E9B'],\n            ['\\u1EA0', '\\u1EF9'],\n            ['\\u1F00', '\\u1F15'],\n        ],\n        false,\n        false,\n    );\n    var peg$e86 = peg$classExpectation(\n        [\n            ['\\u1F18', '\\u1F1D'],\n            ['\\u1F20', '\\u1F45'],\n            ['\\u1F48', '\\u1F4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e87 = peg$classExpectation(\n        [\n            ['\\u1F50', '\\u1F57'],\n            '\\u1F59',\n            '\\u1F5B',\n            '\\u1F5D',\n            ['\\u1F5F', '\\u1F7D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e88 = peg$classExpectation(\n        [\n            ['\\u1F80', '\\u1FB4'],\n            ['\\u1FB6', '\\u1FBC'],\n            '\\u1FBE',\n            ['\\u1FC2', '\\u1FC4'],\n        ],\n        false,\n        false,\n    );\n    var peg$e89 = peg$classExpectation(\n        [\n            ['\\u1FC6', '\\u1FCC'],\n            ['\\u1FD0', '\\u1FD3'],\n            ['\\u1FD6', '\\u1FDB'],\n        ],\n        false,\n        false,\n    );\n    var peg$e90 = peg$classExpectation(\n        [\n            ['\\u1FE0', '\\u1FEC'],\n            ['\\u1FF2', '\\u1FF4'],\n            ['\\u1FF6', '\\u1FFC'],\n            '\\u2126',\n        ],\n        false,\n        false,\n    );\n    var peg$e91 = peg$classExpectation(\n        [\n            ['\\u212A', '\\u212B'],\n            '\\u212E',\n            ['\\u2180', '\\u2182'],\n            ['\\u3041', '\\u3094'],\n        ],\n        false,\n        false,\n    );\n    var peg$e92 = peg$classExpectation(\n        [\n            ['\\u30A1', '\\u30FA'],\n            ['\\u3105', '\\u312C'],\n            ['\\uAC00', '\\uD7A3'],\n        ],\n        false,\n        false,\n    );\n    var peg$e93 = peg$classExpectation(\n        [['\\u4E00', '\\u9FA5'], '\\u3007', ['\\u3021', '\\u3029']],\n        false,\n        false,\n    );\n    var peg$e94 = peg$classExpectation(\n        [\n            ['\\u0300', '\\u0345'],\n            ['\\u0360', '\\u0361'],\n            ['\\u0483', '\\u0486'],\n        ],\n        false,\n        false,\n    );\n    var peg$e95 = peg$classExpectation(\n        [\n            ['\\u0591', '\\u05A1'],\n            ['\\u05A3', '\\u05B9'],\n            ['\\u05BB', '\\u05BD'],\n            '\\u05BF',\n        ],\n        false,\n        false,\n    );\n    var peg$e96 = peg$classExpectation(\n        [['\\u05C1', '\\u05C2'], '\\u05C4', ['\\u064B', '\\u0652'], '\\u0670'],\n        false,\n        false,\n    );\n    var peg$e97 = peg$classExpectation(\n        [\n            ['\\u06D6', '\\u06DC'],\n            ['\\u06DD', '\\u06DF'],\n            ['\\u06E0', '\\u06E4'],\n        ],\n        false,\n        false,\n    );\n    var peg$e98 = peg$classExpectation(\n        [\n            ['\\u06E7', '\\u06E8'],\n            ['\\u06EA', '\\u06ED'],\n            ['\\u0901', '\\u0903'],\n        ],\n        false,\n        false,\n    );\n    var peg$e99 = peg$classExpectation(\n        ['\\u093C', ['\\u093E', '\\u094C'], '\\u094D', ['\\u0951', '\\u0954']],\n        false,\n        false,\n    );\n    var peg$e100 = peg$classExpectation(\n        [['\\u0962', '\\u0963'], ['\\u0981', '\\u0983'], '\\u09BC', '\\u09BE'],\n        false,\n        false,\n    );\n    var peg$e101 = peg$classExpectation(\n        [\n            '\\u09BF',\n            ['\\u09C0', '\\u09C4'],\n            ['\\u09C7', '\\u09C8'],\n            ['\\u09CB', '\\u09CD'],\n        ],\n        false,\n        false,\n    );\n    var peg$e102 = peg$classExpectation(\n        [\n            '\\u09D7',\n            ['\\u09E2', '\\u09E3'],\n            '\\u0A02',\n            '\\u0A3C',\n            '\\u0A3E',\n            '\\u0A3F',\n        ],\n        false,\n        false,\n    );\n    var peg$e103 = peg$classExpectation(\n        [\n            ['\\u0A40', '\\u0A42'],\n            ['\\u0A47', '\\u0A48'],\n            ['\\u0A4B', '\\u0A4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e104 = peg$classExpectation(\n        [\n            ['\\u0A70', '\\u0A71'],\n            ['\\u0A81', '\\u0A83'],\n            '\\u0ABC',\n            ['\\u0ABE', '\\u0AC5'],\n        ],\n        false,\n        false,\n    );\n    var peg$e105 = peg$classExpectation(\n        [\n            ['\\u0AC7', '\\u0AC9'],\n            ['\\u0ACB', '\\u0ACD'],\n            ['\\u0B01', '\\u0B03'],\n            '\\u0B3C',\n        ],\n        false,\n        false,\n    );\n    var peg$e106 = peg$classExpectation(\n        [\n            ['\\u0B3E', '\\u0B43'],\n            ['\\u0B47', '\\u0B48'],\n            ['\\u0B4B', '\\u0B4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e107 = peg$classExpectation(\n        [\n            ['\\u0B56', '\\u0B57'],\n            ['\\u0B82', '\\u0B83'],\n            ['\\u0BBE', '\\u0BC2'],\n        ],\n        false,\n        false,\n    );\n    var peg$e108 = peg$classExpectation(\n        [\n            ['\\u0BC6', '\\u0BC8'],\n            ['\\u0BCA', '\\u0BCD'],\n            '\\u0BD7',\n            ['\\u0C01', '\\u0C03'],\n        ],\n        false,\n        false,\n    );\n    var peg$e109 = peg$classExpectation(\n        [\n            ['\\u0C3E', '\\u0C44'],\n            ['\\u0C46', '\\u0C48'],\n            ['\\u0C4A', '\\u0C4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e110 = peg$classExpectation(\n        [\n            ['\\u0C55', '\\u0C56'],\n            ['\\u0C82', '\\u0C83'],\n            ['\\u0CBE', '\\u0CC4'],\n        ],\n        false,\n        false,\n    );\n    var peg$e111 = peg$classExpectation(\n        [\n            ['\\u0CC6', '\\u0CC8'],\n            ['\\u0CCA', '\\u0CCD'],\n            ['\\u0CD5', '\\u0CD6'],\n        ],\n        false,\n        false,\n    );\n    var peg$e112 = peg$classExpectation(\n        [\n            ['\\u0D02', '\\u0D03'],\n            ['\\u0D3E', '\\u0D43'],\n            ['\\u0D46', '\\u0D48'],\n        ],\n        false,\n        false,\n    );\n    var peg$e113 = peg$classExpectation(\n        [['\\u0D4A', '\\u0D4D'], '\\u0D57', '\\u0E31', ['\\u0E34', '\\u0E3A']],\n        false,\n        false,\n    );\n    var peg$e114 = peg$classExpectation(\n        [\n            ['\\u0E47', '\\u0E4E'],\n            '\\u0EB1',\n            ['\\u0EB4', '\\u0EB9'],\n            ['\\u0EBB', '\\u0EBC'],\n        ],\n        false,\n        false,\n    );\n    var peg$e115 = peg$classExpectation(\n        [\n            ['\\u0EC8', '\\u0ECD'],\n            ['\\u0F18', '\\u0F19'],\n            '\\u0F35',\n            '\\u0F37',\n            '\\u0F39',\n        ],\n        false,\n        false,\n    );\n    var peg$e116 = peg$classExpectation(\n        ['\\u0F3E', '\\u0F3F', ['\\u0F71', '\\u0F84'], ['\\u0F86', '\\u0F8B']],\n        false,\n        false,\n    );\n    var peg$e117 = peg$classExpectation(\n        [\n            ['\\u0F90', '\\u0F95'],\n            '\\u0F97',\n            ['\\u0F99', '\\u0FAD'],\n            ['\\u0FB1', '\\u0FB7'],\n        ],\n        false,\n        false,\n    );\n    var peg$e118 = peg$classExpectation(\n        ['\\u0FB9', ['\\u20D0', '\\u20DC'], '\\u20E1', ['\\u302A', '\\u302F']],\n        false,\n        false,\n    );\n    var peg$e119 = peg$classExpectation(['\\u3099', '\\u309A'], false, false);\n    var peg$e120 = peg$classExpectation(\n        [\n            ['0', '9'],\n            ['\\u0660', '\\u0669'],\n            ['\\u06F0', '\\u06F9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e121 = peg$classExpectation(\n        [\n            ['\\u0966', '\\u096F'],\n            ['\\u09E6', '\\u09EF'],\n            ['\\u0A66', '\\u0A6F'],\n        ],\n        false,\n        false,\n    );\n    var peg$e122 = peg$classExpectation(\n        [\n            ['\\u0AE6', '\\u0AEF'],\n            ['\\u0B66', '\\u0B6F'],\n            ['\\u0BE7', '\\u0BEF'],\n        ],\n        false,\n        false,\n    );\n    var peg$e123 = peg$classExpectation(\n        [\n            ['\\u0C66', '\\u0C6F'],\n            ['\\u0CE6', '\\u0CEF'],\n            ['\\u0D66', '\\u0D6F'],\n        ],\n        false,\n        false,\n    );\n    var peg$e124 = peg$classExpectation(\n        [\n            ['\\u0E50', '\\u0E59'],\n            ['\\u0ED0', '\\u0ED9'],\n            ['\\u0F20', '\\u0F29'],\n        ],\n        false,\n        false,\n    );\n    var peg$e125 = peg$classExpectation(\n        ['\\xB7', '\\u02D0', '\\u02D1', '\\u0387', '\\u0640', '\\u0E46'],\n        false,\n        false,\n    );\n    var peg$e126 = peg$classExpectation(\n        ['\\u0EC6', '\\u3005', ['\\u3031', '\\u3035'], ['\\u309D', '\\u309E']],\n        false,\n        false,\n    );\n    var peg$e127 = peg$classExpectation([['\\u30FC', '\\u30FE']], false, false);\n\n    var peg$f0 = function (head, tail) {\n        return [head, ...tail];\n    };\n    var peg$f1 = function (head, tail) {\n        return [head, ...tail];\n    };\n    var peg$f2 = function (vals) {\n        return clumpStrings(vals);\n    };\n    var peg$f3 = function (vals) {\n        return clumpStrings(vals);\n    };\n    var peg$f4 = function (value) {\n        return value\n            ? {\n                  node: 'text',\n                  value,\n              }\n            : null;\n    };\n    var peg$f5 = function (value) {\n        return {\n            node: 'comment',\n            value: value.join(''),\n        };\n    };\n    var peg$f6 = function (value) {\n        return {\n            node: 'text',\n            value,\n        };\n    };\n    var peg$f7 = function (start, c) {\n        start.content = c;\n        return start;\n    };\n    var peg$f8 = function (name, attr) {\n        return {\n            node: processTag(name, attr),\n            ...convertAttr(attr),\n        };\n    };\n    var peg$f9 = function (name) {\n        return {\n            type: 'attribute',\n            name,\n            value: 'true',\n            loc: location(),\n        };\n    };\n    var peg$f10 = function (name, value) {\n        return {\n            type: 'attribute',\n            name,\n            value,\n            loc: location(),\n        };\n    };\n    var peg$f11 = function (n) {\n        names.push(n);\n        return n;\n    };\n    var peg$f12 = function (n) {\n        const other = names.pop();\n        if (other === n) {\n            return true;\n        }\n        const loc = location();\n        loc.start.offset -= n.length;\n        loc.start.column -= n.length;\n        error(`Expected end tag \"${other}\" but got \"${n}\"`, loc);\n    };\n    var peg$f13 = function (c1, content) {\n        const res = [];\n        if (c1) {\n            res.push(c1);\n        }\n        for (const c of content) {\n            res.push(c[0]);\n            if (c[1]) {\n                res.push(c[1]);\n            }\n        }\n        return res;\n    };\n    var peg$f14 = function (name, attr) {\n        return {\n            node: name,\n            ...convertAttr(attr),\n        };\n    };\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if ('startRule' in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\n                'Can\\'t start parsing from rule \"' + options.startRule + '\".',\n            );\n        }\n\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n        return peg$savedPos;\n    }\n\n    function range() {\n        return {\n            source: peg$source,\n            start: peg$savedPos,\n            end: peg$currPos,\n        };\n    }\n\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n        location =\n            location !== undefined\n                ? location\n                : peg$computeLocation(peg$savedPos, peg$currPos);\n\n        throw peg$buildStructuredError(\n            [peg$otherExpectation(description)],\n            input.substring(peg$savedPos, peg$currPos),\n            location,\n        );\n    }\n\n    function error(message, location) {\n        location =\n            location !== undefined\n                ? location\n                : peg$computeLocation(peg$savedPos, peg$currPos);\n\n        throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n        return { type: 'literal', text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return {\n            type: 'class',\n            parts: parts,\n            inverted: inverted,\n            ignoreCase: ignoreCase,\n        };\n    }\n\n    function peg$anyExpectation() {\n        return { type: 'any' };\n    }\n\n    function peg$endExpectation() {\n        return { type: 'end' };\n    }\n\n    function peg$otherExpectation(description) {\n        return { type: 'other', description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n\n        if (details) {\n            return details;\n        } else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column,\n            };\n\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                } else {\n                    details.column++;\n                }\n\n                p++;\n            }\n\n            peg$posDetailsCache[pos] = details;\n\n            return details;\n        }\n    }\n\n    function peg$computeLocation(startPos, endPos, offset) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n\n        var res = {\n            source: peg$source,\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column,\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column,\n            },\n        };\n        if (offset && peg$source && typeof peg$source.offset === 'function') {\n            res.start = peg$source.offset(res.start);\n            res.end = peg$source.offset(res.end);\n        }\n        return res;\n    }\n\n    function peg$fail(expected) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n\n        peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n        return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n        return new peg$SyntaxError(\n            peg$SyntaxError.buildMessage(expected, found),\n            expected,\n            found,\n            location,\n        );\n    }\n\n    function peg$parsedocument() {\n        var s0;\n\n        s0 = peg$parsecontent();\n\n        return s0;\n    }\n\n    function peg$parseChar() {\n        var s0, s1, s2, s3;\n\n        if (input.charCodeAt(peg$currPos) === 9) {\n            s0 = peg$c0;\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 10) {\n                s0 = peg$c1;\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e1);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 13) {\n                    s0 = peg$c2;\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e2);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r0.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e3);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r1.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e4);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            s1 = peg$currPos;\n                            if (peg$r2.test(input.charAt(peg$currPos))) {\n                                s2 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                            } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e5);\n                                }\n                            }\n                            if (s2 !== peg$FAILED) {\n                                if (peg$r3.test(input.charAt(peg$currPos))) {\n                                    s3 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s3 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e6);\n                                    }\n                                }\n                                if (s3 !== peg$FAILED) {\n                                    s2 = [s2, s3];\n                                    s1 = s2;\n                                } else {\n                                    peg$currPos = s1;\n                                    s1 = peg$FAILED;\n                                }\n                            } else {\n                                peg$currPos = s1;\n                                s1 = peg$FAILED;\n                            }\n                            if (s1 !== peg$FAILED) {\n                                s0 = input.substring(s0, peg$currPos);\n                            } else {\n                                s0 = s1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseS() {\n        var s0, s1, s2;\n\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e7);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                if (peg$r4.test(input.charAt(peg$currPos))) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e7);\n                    }\n                }\n            }\n        } else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        } else {\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNameChar() {\n        var s0;\n\n        s0 = peg$parseLetter();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseDigit();\n            if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 46) {\n                    s0 = peg$c3;\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e8);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 45) {\n                        s0 = peg$c4;\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e9);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 95) {\n                            s0 = peg$c5;\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e10);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 58) {\n                                s0 = peg$c6;\n                                peg$currPos++;\n                            } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e11);\n                                }\n                            }\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parseCombiningChar();\n                                if (s0 === peg$FAILED) {\n                                    s0 = peg$parseExtender();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseName() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseLetter();\n        if (s2 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 95) {\n                s2 = peg$c5;\n                peg$currPos++;\n            } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e10);\n                }\n            }\n            if (s2 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 58) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e11);\n                    }\n                }\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseNameChar();\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parseNameChar();\n            }\n            s2 = [s2, s3];\n            s1 = s2;\n        } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        } else {\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNames() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 32) {\n                s4 = peg$c7;\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e12);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseName();\n                if (s5 !== peg$FAILED) {\n                    s3 = s5;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 32) {\n                    s4 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e12);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = peg$parseName();\n                    if (s5 !== peg$FAILED) {\n                        s3 = s5;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            }\n            peg$savedPos = s0;\n            s0 = peg$f0(s1, s2);\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNmtoken() {\n        var s0, s1, s2;\n\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseNameChar();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parseNameChar();\n            }\n        } else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        } else {\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNmtokens() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$parseNmtoken();\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 32) {\n                s4 = peg$c7;\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e12);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseNmtoken();\n                if (s5 !== peg$FAILED) {\n                    s3 = s5;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 32) {\n                    s4 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e12);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = peg$parseNmtoken();\n                    if (s5 !== peg$FAILED) {\n                        s3 = s5;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            }\n            peg$savedPos = s0;\n            s0 = peg$f1(s1, s2);\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseEntityValue() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            if (peg$r5.test(input.charAt(peg$currPos))) {\n                s3 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e14);\n                }\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                if (peg$r5.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e14);\n                    }\n                }\n            }\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f2(s2);\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                if (peg$r6.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e16);\n                    }\n                }\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    if (peg$r6.test(input.charAt(peg$currPos))) {\n                        s3 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e16);\n                        }\n                    }\n                }\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f3(s2);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseAttValue() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            if (peg$r7.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e17);\n                }\n            }\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                if (peg$r7.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e17);\n                    }\n                }\n            }\n            s2 = input.substring(s2, peg$currPos);\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                s0 = s2;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = [];\n                if (peg$r8.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e18);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$r8.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e18);\n                        }\n                    }\n                }\n                s2 = input.substring(s2, peg$currPos);\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s0 = s2;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseSystemLiteral() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            if (peg$r9.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e19);\n                }\n            }\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                if (peg$r9.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e19);\n                    }\n                }\n            }\n            s2 = input.substring(s2, peg$currPos);\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                s0 = s2;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = [];\n                if (peg$r10.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e20);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$r10.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e20);\n                        }\n                    }\n                }\n                s2 = input.substring(s2, peg$currPos);\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s0 = s2;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parsePubidLiteral() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            s4 = peg$parsePubidChar();\n            if (s4 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s4 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n            }\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parsePubidChar();\n                if (s4 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c9;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e15);\n                        }\n                    }\n                }\n            }\n            s2 = input.substring(s2, peg$currPos);\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                s0 = s2;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = [];\n                s4 = peg$parsePubidChar();\n                if (s4 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                        s4 = peg$c8;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e13);\n                        }\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsePubidChar();\n                    if (s4 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 34) {\n                            s4 = peg$c8;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e13);\n                            }\n                        }\n                    }\n                }\n                s2 = input.substring(s2, peg$currPos);\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s0 = s2;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parsePubidChar() {\n        var s0;\n\n        if (peg$r11.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e21);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCharData() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseCDEnd();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n            s4 = undefined;\n        } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n            if (peg$r12.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e22);\n                }\n            }\n            if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parseCDEnd();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n                s4 = undefined;\n            } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n                if (peg$r12.test(input.charAt(peg$currPos))) {\n                    s5 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e22);\n                    }\n                }\n                if (s5 !== peg$FAILED) {\n                    s4 = [s4, s5];\n                    s3 = s4;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n        }\n        s1 = input.substring(s1, peg$currPos);\n        peg$savedPos = s0;\n        s1 = peg$f4(s1);\n        s0 = s1;\n\n        return s0;\n    }\n\n    function peg$parseComment() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c10) {\n            s1 = peg$c10;\n            peg$currPos += 4;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            if (input.substr(peg$currPos, 2) === peg$c11) {\n                s5 = peg$c11;\n                peg$currPos += 2;\n            } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e24);\n                }\n            }\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n                s4 = undefined;\n            } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseChar();\n                if (s5 !== peg$FAILED) {\n                    s3 = s5;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                s4 = peg$currPos;\n                peg$silentFails++;\n                if (input.substr(peg$currPos, 2) === peg$c11) {\n                    s5 = peg$c11;\n                    peg$currPos += 2;\n                } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e24);\n                    }\n                }\n                peg$silentFails--;\n                if (s5 === peg$FAILED) {\n                    s4 = undefined;\n                } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = peg$parseChar();\n                    if (s5 !== peg$FAILED) {\n                        s3 = s5;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            }\n            if (input.substr(peg$currPos, 3) === peg$c12) {\n                s3 = peg$c12;\n                peg$currPos += 3;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e25);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f5(s2);\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseCDSect() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        s1 = peg$parseCDStart();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseCData();\n            s3 = peg$parseCDEnd();\n            if (s3 !== peg$FAILED) {\n                s1 = [s1, s2, s3];\n                s0 = s1;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseCDStart() {\n        var s0;\n\n        if (input.substr(peg$currPos, 9) === peg$c13) {\n            s0 = peg$c13;\n            peg$currPos += 9;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e26);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCData() {\n        var s0, s1, s2, s3;\n\n        s0 = [];\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseCDEnd();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n            s2 = undefined;\n        } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parseChar();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$currPos;\n            s2 = peg$currPos;\n            peg$silentFails++;\n            s3 = peg$parseCDEnd();\n            peg$silentFails--;\n            if (s3 === peg$FAILED) {\n                s2 = undefined;\n            } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseChar();\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCDEnd() {\n        var s0;\n\n        if (input.substr(peg$currPos, 3) === peg$c14) {\n            s0 = peg$c14;\n            peg$currPos += 3;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e27);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseEq() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        s1 = peg$parseS();\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c15;\n            peg$currPos++;\n        } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e28);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parseS();\n            if (s3 === peg$FAILED) {\n                s3 = null;\n            }\n            s1 = [s1, s2, s3];\n            s0 = s1;\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseVersionNum() {\n        var s0;\n\n        if (input.substr(peg$currPos, 3) === peg$c16) {\n            s0 = peg$c16;\n            peg$currPos += 3;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e29);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseMisc() {\n        var s0, s1;\n\n        s0 = peg$parseComment();\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseS();\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$f6(s1);\n            }\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseSDDecl() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n\n        s0 = peg$currPos;\n        s1 = peg$parseS();\n        if (s1 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 10) === peg$c17) {\n                s2 = peg$c17;\n                peg$currPos += 10;\n            } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e30);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseEq();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s5 = peg$c9;\n                        peg$currPos++;\n                    } else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e15);\n                        }\n                    }\n                    if (s5 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c18) {\n                            s6 = peg$c18;\n                            peg$currPos += 3;\n                        } else {\n                            s6 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e31);\n                            }\n                        }\n                        if (s6 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 2) === peg$c19) {\n                                s6 = peg$c19;\n                                peg$currPos += 2;\n                            } else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e32);\n                                }\n                            }\n                        }\n                        if (s6 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 39) {\n                                s7 = peg$c9;\n                                peg$currPos++;\n                            } else {\n                                s7 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e15);\n                                }\n                            }\n                            if (s7 !== peg$FAILED) {\n                                s5 = [s5, s6, s7];\n                                s4 = s5;\n                            } else {\n                                peg$currPos = s4;\n                                s4 = peg$FAILED;\n                            }\n                        } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                    }\n                    if (s4 === peg$FAILED) {\n                        s4 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 34) {\n                            s5 = peg$c8;\n                            peg$currPos++;\n                        } else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e13);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 3) === peg$c18) {\n                                s6 = peg$c18;\n                                peg$currPos += 3;\n                            } else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e31);\n                                }\n                            }\n                            if (s6 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 2) === peg$c19) {\n                                    s6 = peg$c19;\n                                    peg$currPos += 2;\n                                } else {\n                                    s6 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e32);\n                                    }\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 34) {\n                                    s7 = peg$c8;\n                                    peg$currPos++;\n                                } else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e13);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s5 = [s5, s6, s7];\n                                    s4 = s5;\n                                } else {\n                                    peg$currPos = s4;\n                                    s4 = peg$FAILED;\n                                }\n                            } else {\n                                peg$currPos = s4;\n                                s4 = peg$FAILED;\n                            }\n                        } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s1 = [s1, s2, s3, s4];\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseelement() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$parseEmptyElemTag();\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseSTag();\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsecontent();\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parseETag();\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f7(s1, s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseSTag() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseS();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseS();\n        }\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s2 = peg$c20;\n            peg$currPos++;\n        } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e33);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsepushName();\n            if (s3 !== peg$FAILED) {\n                s4 = [];\n                s5 = peg$currPos;\n                s6 = peg$parseS();\n                if (s6 !== peg$FAILED) {\n                    s7 = peg$parseAttribute();\n                    if (s7 === peg$FAILED) {\n                        s7 = peg$parseEmptyAttribute();\n                    }\n                    if (s7 !== peg$FAILED) {\n                        s5 = s7;\n                    } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    s5 = peg$currPos;\n                    s6 = peg$parseS();\n                    if (s6 !== peg$FAILED) {\n                        s7 = peg$parseAttribute();\n                        if (s7 === peg$FAILED) {\n                            s7 = peg$parseEmptyAttribute();\n                        }\n                        if (s7 !== peg$FAILED) {\n                            s5 = s7;\n                        } else {\n                            peg$currPos = s5;\n                            s5 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                    }\n                }\n                s5 = peg$parseS();\n                if (s5 === peg$FAILED) {\n                    s5 = null;\n                }\n                if (input.charCodeAt(peg$currPos) === 62) {\n                    s6 = peg$c21;\n                    peg$currPos++;\n                } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e34);\n                    }\n                }\n                if (s6 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f8(s3, s4);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseEmptyAttribute() {\n        var s0, s1;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f9(s1);\n        }\n        s0 = s1;\n\n        return s0;\n    }\n\n    function peg$parseAttribute() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseEq();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseAttValue();\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f10(s1, s3);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseETag() {\n        var s0, s1, s2, s3, s4, s5, s6;\n\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c22) {\n            s1 = peg$c22;\n            peg$currPos += 2;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e35);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepopName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseS();\n                if (s3 === peg$FAILED) {\n                    s3 = null;\n                }\n                if (input.charCodeAt(peg$currPos) === 62) {\n                    s4 = peg$c21;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e34);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = [];\n                    s6 = peg$parseS();\n                    while (s6 !== peg$FAILED) {\n                        s5.push(s6);\n                        s6 = peg$parseS();\n                    }\n                    s1 = [s1, s2, s3, s4, s5];\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parsepushName() {\n        var s0, s1;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f11(s1);\n        }\n        s0 = s1;\n\n        return s0;\n    }\n\n    function peg$parsepopName() {\n        var s0, s1, s2;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s2 = peg$f12(s1);\n            if (s2) {\n                s2 = undefined;\n            } else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s0 = s1;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parsecontent() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$parseCharData();\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseelement();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parseCDSect();\n            if (s4 === peg$FAILED) {\n                s4 = peg$parseComment();\n            }\n        }\n        if (s4 !== peg$FAILED) {\n            s5 = peg$parseCharData();\n            s4 = [s4, s5];\n            s3 = s4;\n        } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$parseelement();\n            if (s4 === peg$FAILED) {\n                s4 = peg$parseCDSect();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parseComment();\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseCharData();\n                s4 = [s4, s5];\n                s3 = s4;\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f13(s1, s2);\n\n        return s0;\n    }\n\n    function peg$parseEmptyElemTag() {\n        var s0, s1, s2, s3, s4, s5, s6;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s1 = peg$c20;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e33);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseName();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$currPos;\n                s5 = peg$parseS();\n                if (s5 !== peg$FAILED) {\n                    s6 = peg$parseAttribute();\n                    if (s6 !== peg$FAILED) {\n                        s4 = s6;\n                    } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$currPos;\n                    s5 = peg$parseS();\n                    if (s5 !== peg$FAILED) {\n                        s6 = peg$parseAttribute();\n                        if (s6 !== peg$FAILED) {\n                            s4 = s6;\n                        } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                    }\n                }\n                s4 = peg$parseS();\n                if (s4 === peg$FAILED) {\n                    s4 = null;\n                }\n                if (input.substr(peg$currPos, 2) === peg$c23) {\n                    s5 = peg$c23;\n                    peg$currPos += 2;\n                } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e36);\n                    }\n                }\n                if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f14(s2, s3);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseLetter() {\n        var s0;\n\n        s0 = peg$parseBaseChar();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseIdeographic();\n        }\n\n        return s0;\n    }\n\n    function peg$parseBaseChar() {\n        var s0;\n\n        if (peg$r13.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e37);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r14.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e38);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r15.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e39);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r16.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e40);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r17.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e41);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            if (peg$r18.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                            } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e42);\n                                }\n                            }\n                            if (s0 === peg$FAILED) {\n                                if (peg$r19.test(input.charAt(peg$currPos))) {\n                                    s0 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e43);\n                                    }\n                                }\n                                if (s0 === peg$FAILED) {\n                                    if (\n                                        peg$r20.test(input.charAt(peg$currPos))\n                                    ) {\n                                        s0 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                    } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$e44);\n                                        }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                        if (\n                                            peg$r21.test(\n                                                input.charAt(peg$currPos),\n                                            )\n                                        ) {\n                                            s0 = input.charAt(peg$currPos);\n                                            peg$currPos++;\n                                        } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$e45);\n                                            }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                            if (\n                                                peg$r22.test(\n                                                    input.charAt(peg$currPos),\n                                                )\n                                            ) {\n                                                s0 = input.charAt(peg$currPos);\n                                                peg$currPos++;\n                                            } else {\n                                                s0 = peg$FAILED;\n                                                if (peg$silentFails === 0) {\n                                                    peg$fail(peg$e46);\n                                                }\n                                            }\n                                            if (s0 === peg$FAILED) {\n                                                if (\n                                                    peg$r23.test(\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        ),\n                                                    )\n                                                ) {\n                                                    s0 =\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        );\n                                                    peg$currPos++;\n                                                } else {\n                                                    s0 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$e47);\n                                                    }\n                                                }\n                                                if (s0 === peg$FAILED) {\n                                                    if (\n                                                        peg$r24.test(\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            ),\n                                                        )\n                                                    ) {\n                                                        s0 =\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            );\n                                                        peg$currPos++;\n                                                    } else {\n                                                        s0 = peg$FAILED;\n                                                        if (\n                                                            peg$silentFails ===\n                                                            0\n                                                        ) {\n                                                            peg$fail(peg$e48);\n                                                        }\n                                                    }\n                                                    if (s0 === peg$FAILED) {\n                                                        if (\n                                                            peg$r25.test(\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                ),\n                                                            )\n                                                        ) {\n                                                            s0 =\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                );\n                                                            peg$currPos++;\n                                                        } else {\n                                                            s0 = peg$FAILED;\n                                                            if (\n                                                                peg$silentFails ===\n                                                                0\n                                                            ) {\n                                                                peg$fail(\n                                                                    peg$e49,\n                                                                );\n                                                            }\n                                                        }\n                                                        if (s0 === peg$FAILED) {\n                                                            if (\n                                                                peg$r26.test(\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    ),\n                                                                )\n                                                            ) {\n                                                                s0 =\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    );\n                                                                peg$currPos++;\n                                                            } else {\n                                                                s0 = peg$FAILED;\n                                                                if (\n                                                                    peg$silentFails ===\n                                                                    0\n                                                                ) {\n                                                                    peg$fail(\n                                                                        peg$e50,\n                                                                    );\n                                                                }\n                                                            }\n                                                            if (\n                                                                s0 ===\n                                                                peg$FAILED\n                                                            ) {\n                                                                if (\n                                                                    peg$r27.test(\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        ),\n                                                                    )\n                                                                ) {\n                                                                    s0 =\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        );\n                                                                    peg$currPos++;\n                                                                } else {\n                                                                    s0 =\n                                                                        peg$FAILED;\n                                                                    if (\n                                                                        peg$silentFails ===\n                                                                        0\n                                                                    ) {\n                                                                        peg$fail(\n                                                                            peg$e51,\n                                                                        );\n                                                                    }\n                                                                }\n                                                                if (\n                                                                    s0 ===\n                                                                    peg$FAILED\n                                                                ) {\n                                                                    if (\n                                                                        peg$r28.test(\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            ),\n                                                                        )\n                                                                    ) {\n                                                                        s0 =\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            );\n                                                                        peg$currPos++;\n                                                                    } else {\n                                                                        s0 =\n                                                                            peg$FAILED;\n                                                                        if (\n                                                                            peg$silentFails ===\n                                                                            0\n                                                                        ) {\n                                                                            peg$fail(\n                                                                                peg$e52,\n                                                                            );\n                                                                        }\n                                                                    }\n                                                                    if (\n                                                                        s0 ===\n                                                                        peg$FAILED\n                                                                    ) {\n                                                                        if (\n                                                                            peg$r29.test(\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                ),\n                                                                            )\n                                                                        ) {\n                                                                            s0 =\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                );\n                                                                            peg$currPos++;\n                                                                        } else {\n                                                                            s0 =\n                                                                                peg$FAILED;\n                                                                            if (\n                                                                                peg$silentFails ===\n                                                                                0\n                                                                            ) {\n                                                                                peg$fail(\n                                                                                    peg$e53,\n                                                                                );\n                                                                            }\n                                                                        }\n                                                                        if (\n                                                                            s0 ===\n                                                                            peg$FAILED\n                                                                        ) {\n                                                                            if (\n                                                                                peg$r30.test(\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    ),\n                                                                                )\n                                                                            ) {\n                                                                                s0 =\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    );\n                                                                                peg$currPos++;\n                                                                            } else {\n                                                                                s0 =\n                                                                                    peg$FAILED;\n                                                                                if (\n                                                                                    peg$silentFails ===\n                                                                                    0\n                                                                                ) {\n                                                                                    peg$fail(\n                                                                                        peg$e54,\n                                                                                    );\n                                                                                }\n                                                                            }\n                                                                            if (\n                                                                                s0 ===\n                                                                                peg$FAILED\n                                                                            ) {\n                                                                                if (\n                                                                                    peg$r31.test(\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        ),\n                                                                                    )\n                                                                                ) {\n                                                                                    s0 =\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        );\n                                                                                    peg$currPos++;\n                                                                                } else {\n                                                                                    s0 =\n                                                                                        peg$FAILED;\n                                                                                    if (\n                                                                                        peg$silentFails ===\n                                                                                        0\n                                                                                    ) {\n                                                                                        peg$fail(\n                                                                                            peg$e55,\n                                                                                        );\n                                                                                    }\n                                                                                }\n                                                                                if (\n                                                                                    s0 ===\n                                                                                    peg$FAILED\n                                                                                ) {\n                                                                                    if (\n                                                                                        peg$r32.test(\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            ),\n                                                                                        )\n                                                                                    ) {\n                                                                                        s0 =\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            );\n                                                                                        peg$currPos++;\n                                                                                    } else {\n                                                                                        s0 =\n                                                                                            peg$FAILED;\n                                                                                        if (\n                                                                                            peg$silentFails ===\n                                                                                            0\n                                                                                        ) {\n                                                                                            peg$fail(\n                                                                                                peg$e56,\n                                                                                            );\n                                                                                        }\n                                                                                    }\n                                                                                    if (\n                                                                                        s0 ===\n                                                                                        peg$FAILED\n                                                                                    ) {\n                                                                                        if (\n                                                                                            peg$r33.test(\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                ),\n                                                                                            )\n                                                                                        ) {\n                                                                                            s0 =\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                );\n                                                                                            peg$currPos++;\n                                                                                        } else {\n                                                                                            s0 =\n                                                                                                peg$FAILED;\n                                                                                            if (\n                                                                                                peg$silentFails ===\n                                                                                                0\n                                                                                            ) {\n                                                                                                peg$fail(\n                                                                                                    peg$e57,\n                                                                                                );\n                                                                                            }\n                                                                                        }\n                                                                                        if (\n                                                                                            s0 ===\n                                                                                            peg$FAILED\n                                                                                        ) {\n                                                                                            if (\n                                                                                                peg$r34.test(\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    ),\n                                                                                                )\n                                                                                            ) {\n                                                                                                s0 =\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    );\n                                                                                                peg$currPos++;\n                                                                                            } else {\n                                                                                                s0 =\n                                                                                                    peg$FAILED;\n                                                                                                if (\n                                                                                                    peg$silentFails ===\n                                                                                                    0\n                                                                                                ) {\n                                                                                                    peg$fail(\n                                                                                                        peg$e58,\n                                                                                                    );\n                                                                                                }\n                                                                                            }\n                                                                                            if (\n                                                                                                s0 ===\n                                                                                                peg$FAILED\n                                                                                            ) {\n                                                                                                if (\n                                                                                                    peg$r35.test(\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        ),\n                                                                                                    )\n                                                                                                ) {\n                                                                                                    s0 =\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        );\n                                                                                                    peg$currPos++;\n                                                                                                } else {\n                                                                                                    s0 =\n                                                                                                        peg$FAILED;\n                                                                                                    if (\n                                                                                                        peg$silentFails ===\n                                                                                                        0\n                                                                                                    ) {\n                                                                                                        peg$fail(\n                                                                                                            peg$e59,\n                                                                                                        );\n                                                                                                    }\n                                                                                                }\n                                                                                                if (\n                                                                                                    s0 ===\n                                                                                                    peg$FAILED\n                                                                                                ) {\n                                                                                                    if (\n                                                                                                        peg$r36.test(\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            ),\n                                                                                                        )\n                                                                                                    ) {\n                                                                                                        s0 =\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            );\n                                                                                                        peg$currPos++;\n                                                                                                    } else {\n                                                                                                        s0 =\n                                                                                                            peg$FAILED;\n                                                                                                        if (\n                                                                                                            peg$silentFails ===\n                                                                                                            0\n                                                                                                        ) {\n                                                                                                            peg$fail(\n                                                                                                                peg$e60,\n                                                                                                            );\n                                                                                                        }\n                                                                                                    }\n                                                                                                    if (\n                                                                                                        s0 ===\n                                                                                                        peg$FAILED\n                                                                                                    ) {\n                                                                                                        if (\n                                                                                                            peg$r37.test(\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                ),\n                                                                                                            )\n                                                                                                        ) {\n                                                                                                            s0 =\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                );\n                                                                                                            peg$currPos++;\n                                                                                                        } else {\n                                                                                                            s0 =\n                                                                                                                peg$FAILED;\n                                                                                                            if (\n                                                                                                                peg$silentFails ===\n                                                                                                                0\n                                                                                                            ) {\n                                                                                                                peg$fail(\n                                                                                                                    peg$e61,\n                                                                                                                );\n                                                                                                            }\n                                                                                                        }\n                                                                                                        if (\n                                                                                                            s0 ===\n                                                                                                            peg$FAILED\n                                                                                                        ) {\n                                                                                                            if (\n                                                                                                                peg$r38.test(\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    ),\n                                                                                                                )\n                                                                                                            ) {\n                                                                                                                s0 =\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    );\n                                                                                                                peg$currPos++;\n                                                                                                            } else {\n                                                                                                                s0 =\n                                                                                                                    peg$FAILED;\n                                                                                                                if (\n                                                                                                                    peg$silentFails ===\n                                                                                                                    0\n                                                                                                                ) {\n                                                                                                                    peg$fail(\n                                                                                                                        peg$e62,\n                                                                                                                    );\n                                                                                                                }\n                                                                                                            }\n                                                                                                            if (\n                                                                                                                s0 ===\n                                                                                                                peg$FAILED\n                                                                                                            ) {\n                                                                                                                if (\n                                                                                                                    peg$r39.test(\n                                                                                                                        input.charAt(\n                                                                                                                            peg$currPos,\n                                                                                                                        ),\n                                                                                                                    )\n                                                                                                                ) {\n                                                                                                                    s0 =\n                                                                                                                        input.charAt(\n                                                                                                                            peg$currPos,\n                                                                                                                        );\n                                                                                                                    peg$currPos++;\n                                                                                                                } else {\n                                                                                                                    s0 =\n                                                                                                                        peg$FAILED;\n                                                                                                                    if (\n                                                                                                                        peg$silentFails ===\n                                                                                                                        0\n                                                                                                                    ) {\n                                                                                                                        peg$fail(\n                                                                                                                            peg$e63,\n                                                                                                                        );\n                                                                                                                    }\n                                                                                                                }\n                                                                                                                if (\n                                                                                                                    s0 ===\n                                                                                                                    peg$FAILED\n                                                                                                                ) {\n                                                                                                                    if (\n                                                                                                                        peg$r40.test(\n                                                                                                                            input.charAt(\n                                                                                                                                peg$currPos,\n                                                                                                                            ),\n                                                                                                                        )\n                                                                                                                    ) {\n                                                                                                                        s0 =\n                                                                                                                            input.charAt(\n                                                                                                                                peg$currPos,\n                                                                                                                            );\n                                                                                                                        peg$currPos++;\n                                                                                                                    } else {\n                                                                                                                        s0 =\n                                                                                                                            peg$FAILED;\n                                                                                                                        if (\n                                                                                                                            peg$silentFails ===\n                                                                                                                            0\n                                                                                                                        ) {\n                                                                                                                            peg$fail(\n                                                                                                                                peg$e64,\n                                                                                                                            );\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    if (\n                                                                                                                        s0 ===\n                                                                                                                        peg$FAILED\n                                                                                                                    ) {\n                                                                                                                        if (\n                                                                                                                            peg$r41.test(\n                                                                                                                                input.charAt(\n                                                                                                                                    peg$currPos,\n                                                                                                                                ),\n                                                                                                                            )\n                                                                                                                        ) {\n                                                                                                                            s0 =\n                                                                                                                                input.charAt(\n                                                                                                                                    peg$currPos,\n                                                                                                                                );\n                                                                                                                            peg$currPos++;\n                                                                                                                        } else {\n                                                                                                                            s0 =\n                                                                                                                                peg$FAILED;\n                                                                                                                            if (\n                                                                                                                                peg$silentFails ===\n                                                                                                                                0\n                                                                                                                            ) {\n                                                                                                                                peg$fail(\n                                                                                                                                    peg$e65,\n                                                                                                                                );\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                        if (\n                                                                                                                            s0 ===\n                                                                                                                            peg$FAILED\n                                                                                                                        ) {\n                                                                                                                            if (\n                                                                                                                                peg$r42.test(\n                                                                                                                                    input.charAt(\n                                                                                                                                        peg$currPos,\n                                                                                                                                    ),\n                                                                                                                                )\n                                                                                                                            ) {\n                                                                                                                                s0 =\n                                                                                                                                    input.charAt(\n                                                                                                                                        peg$currPos,\n                                                                                                                                    );\n                                                                                                                                peg$currPos++;\n                                                                                                                            } else {\n                                                                                                                                s0 =\n                                                                                                                                    peg$FAILED;\n                                                                                                                                if (\n                                                                                                                                    peg$silentFails ===\n                                                                                                                                    0\n                                                                                                                                ) {\n                                                                                                                                    peg$fail(\n                                                                                                                                        peg$e66,\n                                                                                                                                    );\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                            if (\n                                                                                                                                s0 ===\n                                                                                                                                peg$FAILED\n                                                                                                                            ) {\n                                                                                                                                if (\n                                                                                                                                    peg$r43.test(\n                                                                                                                                        input.charAt(\n                                                                                                                                            peg$currPos,\n                                                                                                                                        ),\n                                                                                                                                    )\n                                                                                                                                ) {\n                                                                                                                                    s0 =\n                                                                                                                                        input.charAt(\n                                                                                                                                            peg$currPos,\n                                                                                                                                        );\n                                                                                                                                    peg$currPos++;\n                                                                                                                                } else {\n                                                                                                                                    s0 =\n                                                                                                                                        peg$FAILED;\n                                                                                                                                    if (\n                                                                                                                                        peg$silentFails ===\n                                                                                                                                        0\n                                                                                                                                    ) {\n                                                                                                                                        peg$fail(\n                                                                                                                                            peg$e67,\n                                                                                                                                        );\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                                if (\n                                                                                                                                    s0 ===\n                                                                                                                                    peg$FAILED\n                                                                                                                                ) {\n                                                                                                                                    if (\n                                                                                                                                        peg$r44.test(\n                                                                                                                                            input.charAt(\n                                                                                                                                                peg$currPos,\n                                                                                                                                            ),\n                                                                                                                                        )\n                                                                                                                                    ) {\n                                                                                                                                        s0 =\n                                                                                                                                            input.charAt(\n                                                                                                                                                peg$currPos,\n                                                                                                                                            );\n                                                                                                                                        peg$currPos++;\n                                                                                                                                    } else {\n                                                                                                                                        s0 =\n                                                                                                                                            peg$FAILED;\n                                                                                                                                        if (\n                                                                                                                                            peg$silentFails ===\n                                                                                                                                            0\n                                                                                                                                        ) {\n                                                                                                                                            peg$fail(\n                                                                                                                                                peg$e68,\n                                                                                                                                            );\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                    if (\n                                                                                                                                        s0 ===\n                                                                                                                                        peg$FAILED\n                                                                                                                                    ) {\n                                                                                                                                        if (\n                                                                                                                                            peg$r45.test(\n                                                                                                                                                input.charAt(\n                                                                                                                                                    peg$currPos,\n                                                                                                                                                ),\n                                                                                                                                            )\n                                                                                                                                        ) {\n                                                                                                                                            s0 =\n                                                                                                                                                input.charAt(\n                                                                                                                                                    peg$currPos,\n                                                                                                                                                );\n                                                                                                                                            peg$currPos++;\n                                                                                                                                        } else {\n                                                                                                                                            s0 =\n                                                                                                                                                peg$FAILED;\n                                                                                                                                            if (\n                                                                                                                                                peg$silentFails ===\n                                                                                                                                                0\n                                                                                                                                            ) {\n                                                                                                                                                peg$fail(\n                                                                                                                                                    peg$e69,\n                                                                                                                                                );\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                        if (\n                                                                                                                                            s0 ===\n                                                                                                                                            peg$FAILED\n                                                                                                                                        ) {\n                                                                                                                                            if (\n                                                                                                                                                peg$r46.test(\n                                                                                                                                                    input.charAt(\n                                                                                                                                                        peg$currPos,\n                                                                                                                                                    ),\n                                                                                                                                                )\n                                                                                                                                            ) {\n                                                                                                                                                s0 =\n                                                                                                                                                    input.charAt(\n                                                                                                                                                        peg$currPos,\n                                                                                                                                                    );\n                                                                                                                                                peg$currPos++;\n                                                                                                                                            } else {\n                                                                                                                                                s0 =\n                                                                                                                                                    peg$FAILED;\n                                                                                                                                                if (\n                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                    0\n                                                                                                                                                ) {\n                                                                                                                                                    peg$fail(\n                                                                                                                                                        peg$e70,\n                                                                                                                                                    );\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                            if (\n                                                                                                                                                s0 ===\n                                                                                                                                                peg$FAILED\n                                                                                                                                            ) {\n                                                                                                                                                if (\n                                                                                                                                                    peg$r47.test(\n                                                                                                                                                        input.charAt(\n                                                                                                                                                            peg$currPos,\n                                                                                                                                                        ),\n                                                                                                                                                    )\n                                                                                                                                                ) {\n                                                                                                                                                    s0 =\n                                                                                                                                                        input.charAt(\n                                                                                                                                                            peg$currPos,\n                                                                                                                                                        );\n                                                                                                                                                    peg$currPos++;\n                                                                                                                                                } else {\n                                                                                                                                                    s0 =\n                                                                                                                                                        peg$FAILED;\n                                                                                                                                                    if (\n                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                        0\n                                                                                                                                                    ) {\n                                                                                                                                                        peg$fail(\n                                                                                                                                                            peg$e71,\n                                                                                                                                                        );\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                                if (\n                                                                                                                                                    s0 ===\n                                                                                                                                                    peg$FAILED\n                                                                                                                                                ) {\n                                                                                                                                                    if (\n                                                                                                                                                        peg$r48.test(\n                                                                                                                                                            input.charAt(\n                                                                                                                                                                peg$currPos,\n                                                                                                                                                            ),\n                                                                                                                                                        )\n                                                                                                                                                    ) {\n                                                                                                                                                        s0 =\n                                                                                                                                                            input.charAt(\n                                                                                                                                                                peg$currPos,\n                                                                                                                                                            );\n                                                                                                                                                        peg$currPos++;\n                                                                                                                                                    } else {\n                                                                                                                                                        s0 =\n                                                                                                                                                            peg$FAILED;\n                                                                                                                                                        if (\n                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                            0\n                                                                                                                                                        ) {\n                                                                                                                                                            peg$fail(\n                                                                                                                                                                peg$e72,\n                                                                                                                                                            );\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                    if (\n                                                                                                                                                        s0 ===\n                                                                                                                                                        peg$FAILED\n                                                                                                                                                    ) {\n                                                                                                                                                        if (\n                                                                                                                                                            peg$r49.test(\n                                                                                                                                                                input.charAt(\n                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                ),\n                                                                                                                                                            )\n                                                                                                                                                        ) {\n                                                                                                                                                            s0 =\n                                                                                                                                                                input.charAt(\n                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                );\n                                                                                                                                                            peg$currPos++;\n                                                                                                                                                        } else {\n                                                                                                                                                            s0 =\n                                                                                                                                                                peg$FAILED;\n                                                                                                                                                            if (\n                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                0\n                                                                                                                                                            ) {\n                                                                                                                                                                peg$fail(\n                                                                                                                                                                    peg$e73,\n                                                                                                                                                                );\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                        if (\n                                                                                                                                                            s0 ===\n                                                                                                                                                            peg$FAILED\n                                                                                                                                                        ) {\n                                                                                                                                                            if (\n                                                                                                                                                                peg$r50.test(\n                                                                                                                                                                    input.charAt(\n                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                    ),\n                                                                                                                                                                )\n                                                                                                                                                            ) {\n                                                                                                                                                                s0 =\n                                                                                                                                                                    input.charAt(\n                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                    );\n                                                                                                                                                                peg$currPos++;\n                                                                                                                                                            } else {\n                                                                                                                                                                s0 =\n                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                if (\n                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                    0\n                                                                                                                                                                ) {\n                                                                                                                                                                    peg$fail(\n                                                                                                                                                                        peg$e74,\n                                                                                                                                                                    );\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                            if (\n                                                                                                                                                                s0 ===\n                                                                                                                                                                peg$FAILED\n                                                                                                                                                            ) {\n                                                                                                                                                                if (\n                                                                                                                                                                    peg$r51.test(\n                                                                                                                                                                        input.charAt(\n                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                        ),\n                                                                                                                                                                    )\n                                                                                                                                                                ) {\n                                                                                                                                                                    s0 =\n                                                                                                                                                                        input.charAt(\n                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                        );\n                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                } else {\n                                                                                                                                                                    s0 =\n                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                    if (\n                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                        0\n                                                                                                                                                                    ) {\n                                                                                                                                                                        peg$fail(\n                                                                                                                                                                            peg$e75,\n                                                                                                                                                                        );\n                                                                                                                                                                    }\n                                                                                                                                                                }\n                                                                                                                                                                if (\n                                                                                                                                                                    s0 ===\n                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                ) {\n                                                                                                                                                                    if (\n                                                                                                                                                                        peg$r52.test(\n                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                            ),\n                                                                                                                                                                        )\n                                                                                                                                                                    ) {\n                                                                                                                                                                        s0 =\n                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                            );\n                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                    } else {\n                                                                                                                                                                        s0 =\n                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                        if (\n                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                            0\n                                                                                                                                                                        ) {\n                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                peg$e76,\n                                                                                                                                                                            );\n                                                                                                                                                                        }\n                                                                                                                                                                    }\n                                                                                                                                                                    if (\n                                                                                                                                                                        s0 ===\n                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                    ) {\n                                                                                                                                                                        if (\n                                                                                                                                                                            peg$r53.test(\n                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                ),\n                                                                                                                                                                            )\n                                                                                                                                                                        ) {\n                                                                                                                                                                            s0 =\n                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                );\n                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                        } else {\n                                                                                                                                                                            s0 =\n                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                            if (\n                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                0\n                                                                                                                                                                            ) {\n                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                    peg$e77,\n                                                                                                                                                                                );\n                                                                                                                                                                            }\n                                                                                                                                                                        }\n                                                                                                                                                                        if (\n                                                                                                                                                                            s0 ===\n                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                        ) {\n                                                                                                                                                                            if (\n                                                                                                                                                                                peg$r54.test(\n                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                    ),\n                                                                                                                                                                                )\n                                                                                                                                                                            ) {\n                                                                                                                                                                                s0 =\n                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                    );\n                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                            } else {\n                                                                                                                                                                                s0 =\n                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                if (\n                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                    0\n                                                                                                                                                                                ) {\n                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                        peg$e78,\n                                                                                                                                                                                    );\n                                                                                                                                                                                }\n                                                                                                                                                                            }\n                                                                                                                                                                            if (\n                                                                                                                                                                                s0 ===\n                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                            ) {\n                                                                                                                                                                                if (\n                                                                                                                                                                                    peg$r55.test(\n                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                        ),\n                                                                                                                                                                                    )\n                                                                                                                                                                                ) {\n                                                                                                                                                                                    s0 =\n                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                        );\n                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                } else {\n                                                                                                                                                                                    s0 =\n                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                    if (\n                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                        0\n                                                                                                                                                                                    ) {\n                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                            peg$e79,\n                                                                                                                                                                                        );\n                                                                                                                                                                                    }\n                                                                                                                                                                                }\n                                                                                                                                                                                if (\n                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                ) {\n                                                                                                                                                                                    if (\n                                                                                                                                                                                        peg$r56.test(\n                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                            ),\n                                                                                                                                                                                        )\n                                                                                                                                                                                    ) {\n                                                                                                                                                                                        s0 =\n                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                            );\n                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                    } else {\n                                                                                                                                                                                        s0 =\n                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                        if (\n                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                            0\n                                                                                                                                                                                        ) {\n                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                peg$e80,\n                                                                                                                                                                                            );\n                                                                                                                                                                                        }\n                                                                                                                                                                                    }\n                                                                                                                                                                                    if (\n                                                                                                                                                                                        s0 ===\n                                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                                    ) {\n                                                                                                                                                                                        if (\n                                                                                                                                                                                            peg$r57.test(\n                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                ),\n                                                                                                                                                                                            )\n                                                                                                                                                                                        ) {\n                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                );\n                                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                                        } else {\n                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                                            if (\n                                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                                0\n                                                                                                                                                                                            ) {\n                                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                                    peg$e81,\n                                                                                                                                                                                                );\n                                                                                                                                                                                            }\n                                                                                                                                                                                        }\n                                                                                                                                                                                        if (\n                                                                                                                                                                                            s0 ===\n                                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                                        ) {\n                                                                                                                                                                                            if (\n                                                                                                                                                                                                peg$r58.test(\n                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                    ),\n                                                                                                                                                                                                )\n                                                                                                                                                                                            ) {\n                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                    );\n                                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                                            } else {\n                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                                if (\n                                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                                    0\n                                                                                                                                                                                                ) {\n                                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                                        peg$e82,\n                                                                                                                                                                                                    );\n                                                                                                                                                                                                }\n                                                                                                                                                                                            }\n                                                                                                                                                                                            if (\n                                                                                                                                                                                                s0 ===\n                                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                                            ) {\n                                                                                                                                                                                                if (\n                                                                                                                                                                                                    peg$r59.test(\n                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                        ),\n                                                                                                                                                                                                    )\n                                                                                                                                                                                                ) {\n                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                        );\n                                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                                } else {\n                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                                    if (\n                                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                                        0\n                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                                            peg$e83,\n                                                                                                                                                                                                        );\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                }\n                                                                                                                                                                                                if (\n                                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                                ) {\n                                                                                                                                                                                                    if (\n                                                                                                                                                                                                        peg$r60.test(\n                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                            ),\n                                                                                                                                                                                                        )\n                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                            );\n                                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                                    } else {\n                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                                        if (\n                                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                                            0\n                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                                peg$e84,\n                                                                                                                                                                                                            );\n                                                                                                                                                                                                        }\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                    if (\n                                                                                                                                                                                                        s0 ===\n                                                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                        if (\n                                                                                                                                                                                                            peg$r61.test(\n                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                ),\n                                                                                                                                                                                                            )\n                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                );\n                                                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                                                        } else {\n                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                                                0\n                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                                                    peg$e85,\n                                                                                                                                                                                                                );\n                                                                                                                                                                                                            }\n                                                                                                                                                                                                        }\n                                                                                                                                                                                                        if (\n                                                                                                                                                                                                            s0 ===\n                                                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                peg$r62.test(\n                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                    ),\n                                                                                                                                                                                                                )\n                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                                                            } else {\n                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                                                    0\n                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                                                        peg$e86,\n                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                }\n                                                                                                                                                                                                            }\n                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                s0 ===\n                                                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                    peg$r63.test(\n                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                        ),\n                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                                                } else {\n                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                                                        0\n                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                                                            peg$e87,\n                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                }\n                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                        peg$r64.test(\n                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                            ),\n                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                                                    } else {\n                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                                                            0\n                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                                                peg$e88,\n                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                        s0 ===\n                                                                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                            peg$r65.test(\n                                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                                ),\n                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                                );\n                                                                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                                                                        } else {\n                                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                                                                0\n                                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                                                                    peg$e89,\n                                                                                                                                                                                                                                );\n                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                            s0 ===\n                                                                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                                peg$r66.test(\n                                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                                    ),\n                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                                                                            } else {\n                                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                                                                    0\n                                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                                                                        peg$e90,\n                                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                                s0 ===\n                                                                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                                    peg$r67.test(\n                                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                                        ),\n                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                                                                } else {\n                                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                                                                        0\n                                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                                                                            peg$e91,\n                                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                                        peg$r68.test(\n                                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                                            ),\n                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                                                                    } else {\n                                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                                                                            0\n                                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                                                                peg$e92,\n                                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                }\n                                                                                                                                                                                                            }\n                                                                                                                                                                                                        }\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                }\n                                                                                                                                                                                            }\n                                                                                                                                                                                        }\n                                                                                                                                                                                    }\n                                                                                                                                                                                }\n                                                                                                                                                                            }\n                                                                                                                                                                        }\n                                                                                                                                                                    }\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseIdeographic() {\n        var s0;\n\n        if (peg$r69.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e93);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCombiningChar() {\n        var s0;\n\n        if (peg$r70.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e94);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r71.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e95);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r72.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e96);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r73.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e97);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r74.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e98);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            if (peg$r75.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                            } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e99);\n                                }\n                            }\n                            if (s0 === peg$FAILED) {\n                                if (peg$r76.test(input.charAt(peg$currPos))) {\n                                    s0 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e100);\n                                    }\n                                }\n                                if (s0 === peg$FAILED) {\n                                    if (\n                                        peg$r77.test(input.charAt(peg$currPos))\n                                    ) {\n                                        s0 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                    } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$e101);\n                                        }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                        if (\n                                            peg$r78.test(\n                                                input.charAt(peg$currPos),\n                                            )\n                                        ) {\n                                            s0 = input.charAt(peg$currPos);\n                                            peg$currPos++;\n                                        } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$e102);\n                                            }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                            if (\n                                                peg$r79.test(\n                                                    input.charAt(peg$currPos),\n                                                )\n                                            ) {\n                                                s0 = input.charAt(peg$currPos);\n                                                peg$currPos++;\n                                            } else {\n                                                s0 = peg$FAILED;\n                                                if (peg$silentFails === 0) {\n                                                    peg$fail(peg$e103);\n                                                }\n                                            }\n                                            if (s0 === peg$FAILED) {\n                                                if (\n                                                    peg$r80.test(\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        ),\n                                                    )\n                                                ) {\n                                                    s0 =\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        );\n                                                    peg$currPos++;\n                                                } else {\n                                                    s0 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$e104);\n                                                    }\n                                                }\n                                                if (s0 === peg$FAILED) {\n                                                    if (\n                                                        peg$r81.test(\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            ),\n                                                        )\n                                                    ) {\n                                                        s0 =\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            );\n                                                        peg$currPos++;\n                                                    } else {\n                                                        s0 = peg$FAILED;\n                                                        if (\n                                                            peg$silentFails ===\n                                                            0\n                                                        ) {\n                                                            peg$fail(peg$e105);\n                                                        }\n                                                    }\n                                                    if (s0 === peg$FAILED) {\n                                                        if (\n                                                            peg$r82.test(\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                ),\n                                                            )\n                                                        ) {\n                                                            s0 =\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                );\n                                                            peg$currPos++;\n                                                        } else {\n                                                            s0 = peg$FAILED;\n                                                            if (\n                                                                peg$silentFails ===\n                                                                0\n                                                            ) {\n                                                                peg$fail(\n                                                                    peg$e106,\n                                                                );\n                                                            }\n                                                        }\n                                                        if (s0 === peg$FAILED) {\n                                                            if (\n                                                                peg$r83.test(\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    ),\n                                                                )\n                                                            ) {\n                                                                s0 =\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    );\n                                                                peg$currPos++;\n                                                            } else {\n                                                                s0 = peg$FAILED;\n                                                                if (\n                                                                    peg$silentFails ===\n                                                                    0\n                                                                ) {\n                                                                    peg$fail(\n                                                                        peg$e107,\n                                                                    );\n                                                                }\n                                                            }\n                                                            if (\n                                                                s0 ===\n                                                                peg$FAILED\n                                                            ) {\n                                                                if (\n                                                                    peg$r84.test(\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        ),\n                                                                    )\n                                                                ) {\n                                                                    s0 =\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        );\n                                                                    peg$currPos++;\n                                                                } else {\n                                                                    s0 =\n                                                                        peg$FAILED;\n                                                                    if (\n                                                                        peg$silentFails ===\n                                                                        0\n                                                                    ) {\n                                                                        peg$fail(\n                                                                            peg$e108,\n                                                                        );\n                                                                    }\n                                                                }\n                                                                if (\n                                                                    s0 ===\n                                                                    peg$FAILED\n                                                                ) {\n                                                                    if (\n                                                                        peg$r85.test(\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            ),\n                                                                        )\n                                                                    ) {\n                                                                        s0 =\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            );\n                                                                        peg$currPos++;\n                                                                    } else {\n                                                                        s0 =\n                                                                            peg$FAILED;\n                                                                        if (\n                                                                            peg$silentFails ===\n                                                                            0\n                                                                        ) {\n                                                                            peg$fail(\n                                                                                peg$e109,\n                                                                            );\n                                                                        }\n                                                                    }\n                                                                    if (\n                                                                        s0 ===\n                                                                        peg$FAILED\n                                                                    ) {\n                                                                        if (\n                                                                            peg$r86.test(\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                ),\n                                                                            )\n                                                                        ) {\n                                                                            s0 =\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                );\n                                                                            peg$currPos++;\n                                                                        } else {\n                                                                            s0 =\n                                                                                peg$FAILED;\n                                                                            if (\n                                                                                peg$silentFails ===\n                                                                                0\n                                                                            ) {\n                                                                                peg$fail(\n                                                                                    peg$e110,\n                                                                                );\n                                                                            }\n                                                                        }\n                                                                        if (\n                                                                            s0 ===\n                                                                            peg$FAILED\n                                                                        ) {\n                                                                            if (\n                                                                                peg$r87.test(\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    ),\n                                                                                )\n                                                                            ) {\n                                                                                s0 =\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    );\n                                                                                peg$currPos++;\n                                                                            } else {\n                                                                                s0 =\n                                                                                    peg$FAILED;\n                                                                                if (\n                                                                                    peg$silentFails ===\n                                                                                    0\n                                                                                ) {\n                                                                                    peg$fail(\n                                                                                        peg$e111,\n                                                                                    );\n                                                                                }\n                                                                            }\n                                                                            if (\n                                                                                s0 ===\n                                                                                peg$FAILED\n                                                                            ) {\n                                                                                if (\n                                                                                    peg$r88.test(\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        ),\n                                                                                    )\n                                                                                ) {\n                                                                                    s0 =\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        );\n                                                                                    peg$currPos++;\n                                                                                } else {\n                                                                                    s0 =\n                                                                                        peg$FAILED;\n                                                                                    if (\n                                                                                        peg$silentFails ===\n                                                                                        0\n                                                                                    ) {\n                                                                                        peg$fail(\n                                                                                            peg$e112,\n                                                                                        );\n                                                                                    }\n                                                                                }\n                                                                                if (\n                                                                                    s0 ===\n                                                                                    peg$FAILED\n                                                                                ) {\n                                                                                    if (\n                                                                                        peg$r89.test(\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            ),\n                                                                                        )\n                                                                                    ) {\n                                                                                        s0 =\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            );\n                                                                                        peg$currPos++;\n                                                                                    } else {\n                                                                                        s0 =\n                                                                                            peg$FAILED;\n                                                                                        if (\n                                                                                            peg$silentFails ===\n                                                                                            0\n                                                                                        ) {\n                                                                                            peg$fail(\n                                                                                                peg$e113,\n                                                                                            );\n                                                                                        }\n                                                                                    }\n                                                                                    if (\n                                                                                        s0 ===\n                                                                                        peg$FAILED\n                                                                                    ) {\n                                                                                        if (\n                                                                                            peg$r90.test(\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                ),\n                                                                                            )\n                                                                                        ) {\n                                                                                            s0 =\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                );\n                                                                                            peg$currPos++;\n                                                                                        } else {\n                                                                                            s0 =\n                                                                                                peg$FAILED;\n                                                                                            if (\n                                                                                                peg$silentFails ===\n                                                                                                0\n                                                                                            ) {\n                                                                                                peg$fail(\n                                                                                                    peg$e114,\n                                                                                                );\n                                                                                            }\n                                                                                        }\n                                                                                        if (\n                                                                                            s0 ===\n                                                                                            peg$FAILED\n                                                                                        ) {\n                                                                                            if (\n                                                                                                peg$r91.test(\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    ),\n                                                                                                )\n                                                                                            ) {\n                                                                                                s0 =\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    );\n                                                                                                peg$currPos++;\n                                                                                            } else {\n                                                                                                s0 =\n                                                                                                    peg$FAILED;\n                                                                                                if (\n                                                                                                    peg$silentFails ===\n                                                                                                    0\n                                                                                                ) {\n                                                                                                    peg$fail(\n                                                                                                        peg$e115,\n                                                                                                    );\n                                                                                                }\n                                                                                            }\n                                                                                            if (\n                                                                                                s0 ===\n                                                                                                peg$FAILED\n                                                                                            ) {\n                                                                                                if (\n                                                                                                    peg$r92.test(\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        ),\n                                                                                                    )\n                                                                                                ) {\n                                                                                                    s0 =\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        );\n                                                                                                    peg$currPos++;\n                                                                                                } else {\n                                                                                                    s0 =\n                                                                                                        peg$FAILED;\n                                                                                                    if (\n                                                                                                        peg$silentFails ===\n                                                                                                        0\n                                                                                                    ) {\n                                                                                                        peg$fail(\n                                                                                                            peg$e116,\n                                                                                                        );\n                                                                                                    }\n                                                                                                }\n                                                                                                if (\n                                                                                                    s0 ===\n                                                                                                    peg$FAILED\n                                                                                                ) {\n                                                                                                    if (\n                                                                                                        peg$r93.test(\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            ),\n                                                                                                        )\n                                                                                                    ) {\n                                                                                                        s0 =\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            );\n                                                                                                        peg$currPos++;\n                                                                                                    } else {\n                                                                                                        s0 =\n                                                                                                            peg$FAILED;\n                                                                                                        if (\n                                                                                                            peg$silentFails ===\n                                                                                                            0\n                                                                                                        ) {\n                                                                                                            peg$fail(\n                                                                                                                peg$e117,\n                                                                                                            );\n                                                                                                        }\n                                                                                                    }\n                                                                                                    if (\n                                                                                                        s0 ===\n                                                                                                        peg$FAILED\n                                                                                                    ) {\n                                                                                                        if (\n                                                                                                            peg$r94.test(\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                ),\n                                                                                                            )\n                                                                                                        ) {\n                                                                                                            s0 =\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                );\n                                                                                                            peg$currPos++;\n                                                                                                        } else {\n                                                                                                            s0 =\n                                                                                                                peg$FAILED;\n                                                                                                            if (\n                                                                                                                peg$silentFails ===\n                                                                                                                0\n                                                                                                            ) {\n                                                                                                                peg$fail(\n                                                                                                                    peg$e118,\n                                                                                                                );\n                                                                                                            }\n                                                                                                        }\n                                                                                                        if (\n                                                                                                            s0 ===\n                                                                                                            peg$FAILED\n                                                                                                        ) {\n                                                                                                            if (\n                                                                                                                peg$r95.test(\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    ),\n                                                                                                                )\n                                                                                                            ) {\n                                                                                                                s0 =\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    );\n                                                                                                                peg$currPos++;\n                                                                                                            } else {\n                                                                                                                s0 =\n                                                                                                                    peg$FAILED;\n                                                                                                                if (\n                                                                                                                    peg$silentFails ===\n                                                                                                                    0\n                                                                                                                ) {\n                                                                                                                    peg$fail(\n                                                                                                                        peg$e119,\n                                                                                                                    );\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseDigit() {\n        var s0;\n\n        if (peg$r96.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e120);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r97.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e121);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r98.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e122);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r99.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e123);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r100.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e124);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseExtender() {\n        var s0;\n\n        if (peg$r101.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e125);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r102.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e126);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r103.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e127);\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    const names = [];\n\n    function checkAttributeRule(attr, rule) {\n        const isType = ['string', 'boolean', 'number'].includes(rule);\n        const isEnum = !isType;\n        if (isType || attr.value !== rule) {\n            // check if this is a type\n            if (isType) {\n                if (rule === 'string') {\n                    if (typeof attr.value !== 'string') {\n                        error(\n                            `Expect ${attr.name} to be a string but got ${attr.value}`,\n                        );\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } else if (rule === 'boolean') {\n                    if (\n                        ![\n                            '1',\n                            '0',\n                            'yes',\n                            'no',\n                            'off',\n                            'on',\n                            'true',\n                            'false',\n                        ].includes(attr.value)\n                    ) {\n                        error(\n                            `Expected \"${attr.name}\" to have a boolean descriptor but got \"${attr.value}\" (Try \"true\", \"false\", \"yes\", \"no\", \"on\", \"off\", \"1\", \"0\"`,\n                        );\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } else if (rule == 'number') {\n                    if (isNaN(Number(attr.value))) {\n                        error(\n                            `Expected \"${attr.name}\" to be a number but got \"${attr.value}\"`,\n                        );\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } else {\n                    error(`Unknown type \"${rule}\"`);\n                    return false;\n                }\n            }\n\n            if (isEnum) {\n                // It doesn't match this enum value but it may match another so\n                //  just return false here.\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function processTag(tag, attribs) {\n        // Check if this is a valid tag\n        if (Object.keys(TagAttributeMap).includes(tag)) {\n            // For each attribute that was given in the parsed text,\n            //\tcheck to see if it is a known attribute and if it\n            //\tmatches the rules defined.\n            attribs.forEach(tagAttr => {\n                // Is the attribute in the list.\n                if (Object.keys(TagAttributeMap[tag]).includes(tagAttr.name)) {\n                    const attrName = tagAttr.name;\n                    const attrValue = tagAttr.value;\n                    const attrRules = TagAttributeMap[tag][attrName];\n                    // If the attribute is in the list, check that the rules\n                    //\tapply to the attribute.\n                    const matched = attrRules.some(r =>\n                        checkAttributeRule(tagAttr, r),\n                    );\n                    if (!matched) {\n                        error(\n                            `Invalid attribute \"${tagAttr.name}\" found in tag \"${tag}\".  Expected [\"${attrRules.join('\", \"')}\"] but got \"${attrValue}\"`,\n                        );\n                    }\n                } else {\n                    error(\n                        `Invalid attribute \"${tagAttr.name}\" found in tag \"${tag}\"`,\n                    );\n                }\n            });\n            return tag;\n        } else {\n            error(`Invalid tag \"${tag}\" found`);\n        }\n    }\n\n    function convertAttr(attr) {\n        const ret = {};\n        for (const { name, value, loc } of attr) {\n            if (ret[name]) {\n                error(`Duplicate attribute \"${name}\"`, loc);\n            }\n            ret[name] = value;\n        }\n        return ret;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n\n        throw peg$buildStructuredError(\n            peg$maxFailExpected,\n            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n            peg$maxFailPos < input.length\n                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),\n        );\n    }\n}\n\nexport { peg$SyntaxError as SyntaxError, peg$parse as parse };\n",
  "export function convertMarkdownToAnsie(input: string) {\n    // Unified regex for bold, italics, and color. Headers are handled separately.\n    const regex = /\\*\\*(.*?)\\*\\*|\\*(.*?)\\*|\\[c=(.*?)\\](.*?)\\[\\/c\\]/g;\n\n    // Replace bold, italics, and color with their respective ANSIE escape codes\n    const translated = input.replace(\n        regex,\n        (match, boldText, italicText, color, colorText) => {\n            if (boldText !== undefined) {\n                return `<span bold>${boldText}</span>`;\n            } else if (italicText !== undefined) {\n                return `<span italics>${italicText}</span>`;\n            } else if (color !== undefined) {\n                return `<span fg=\"${color}\">${colorText}</span>`;\n            }\n            return match; // Fallback, should never reach here.\n        },\n    );\n\n    // Handle headers as a special case, due to the need for multiline matching\n    return translated\n        .split('\\n')\n        .map(line => line.trim()) // Remove leading/trailing whitespace\n        .filter(line => line.length > 0) // Remove empty lines\n        .map(line => {\n            if (line.trim().startsWith('###')) {\n                return line.replace(/^\\s*###\\s(.*?)$/, '<h3>$1</h3>');\n            } else if (line.trim().startsWith('##')) {\n                return line.replace(/^\\s*##\\s(.*?)$/, '<h2>$1</h2>');\n            } else if (line.trim().startsWith('#')) {\n                return line.replace(/^#\\s(.*?)$/, '<h1>$1</h1>');\n            }\n            return line;\n        })\n        .join('\\n'); // Rejoin the lines back into a single string\n}\n",
  "import { parse as rawParse } from './generated-parser.js';\nimport { type Ast } from '../compiler/types';\nimport { convertMarkdownToAnsie } from '../utilities/convert-markdown-to-ansie.js';\n\n/**\n * Parses a string into an AST using a simplified markdown syntax\n * The syntax supported is:\n *\n * - # text -> h1\n * - ## text -> h2\n * - ### text -> h3\n * - **text** -> bold\n * - *text* -> italics\n * - [c=red]text[/c] -> color\n *\n * @param input\n * @returns\n */\nexport function parseAnsieMarkdown(input: string): Ast | null {\n    if (!input) {\n        return null;\n    }\n\n    return parseAnsieMarkup(convertMarkdownToAnsie(input)); // Assuming parseAnsieMarkup is defined elsewhere\n}\n\n/**\n * Assumes that the input string is using the simplified ansie markup syntax - use\n * `parseAnsieMarkdown` if you are unsure if the input is using mixed markdown.\n * @param input\n * @returns\n */\nexport function parseAnsieMarkup(input: string): Ast | null {\n    if (!input) {\n        return null;\n    }\n\n    return rawParse(input) as Ast;\n}\n",
  "export function num(n: unknown) {\n    if (typeof n === 'number') {\n        return n;\n    }\n    if (typeof n === 'string') {\n        return Number(n);\n    }\n    if (typeof n === 'boolean') {\n        return n ? 1 : 0;\n    }\n    return 0;\n}\n",
  "import type { SpaceNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { num } from './num';\n\nexport function getSpacingFromProperties(\n    node: SpaceNodeBase,\n    style?: AnsieStyle,\n): {\n    on: string;\n    off: string;\n} {\n    const left = num(\n        node.marginLeft ?? node.margin ?? style?.spacing?.marginLeft ?? 0,\n    );\n    const right = num(\n        node.marginRight ?? node.margin ?? style?.spacing?.marginRight ?? 0,\n    );\n    const top = num(\n        node.marginTop ?? node.margin ?? style?.spacing?.marginTop ?? 0,\n    );\n    const bottom = num(\n        node.marginBottom ?? node.margin ?? style?.spacing?.marginBottom ?? 0,\n    );\n\n    const vpre = top ? '\\n'.repeat(top) : '';\n    const vpost = bottom ? '\\n'.repeat(bottom) : '';\n    const hpre = left ? ' '.repeat(left) : '';\n    const hpost = right ? ' '.repeat(right) : '';\n\n    return {\n        on: `${vpre}${hpre}`,\n        off: `${hpost}${vpost}`,\n    };\n}\n",
  "import { type CompilerFormat } from '../compiler/types';\nimport { getSpacingFromProperties } from './get-spacing-from-properties';\nimport {\n    type AnsieNode,\n    type SpaceNodeBase,\n    SpaceAttributes,\n} from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\n\n/**\n * Renders the space attributes for a node prepending the appropriate spacing escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderSpaceAttributesStart({\n    node,\n    format,\n    style,\n}: {\n    node: SpaceNodeBase;\n    format: CompilerFormat;\n    style?: AnsieStyle;\n}): string {\n    if (format === 'ansi') {\n        return getSpacingFromProperties(node, style).on;\n    } else if (format === 'markup') {\n        return Object.entries(node)\n            .filter(([key]) => Object.keys(SpaceAttributes).includes(key))\n            .map(([key, value]) => `${key}=\"${value}\"`)\n            .join(' ');\n    } else {\n        return '';\n    }\n}\n/**\n * Renders the space attributes for a node appending the appropriate spacing escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderSpaceAttributesEnd({\n    style,\n    attributes,\n    format,\n}: {\n    attributes: AnsieNode;\n    style?: AnsieStyle;\n    format: CompilerFormat;\n}) {\n    if (format === 'ansi') {\n        return getSpacingFromProperties(attributes, style).off;\n    } else if (format === 'markup') {\n        return '';\n    } else {\n        return '';\n    }\n}\n",
  "// A set of variables that map to the ANSI escape codes for terminal manipulation\n// and colorization.  See https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters\n// for more information.\nexport enum TerminalStyle {\n    // Reset all styles\n    reset = 0,\n\n    // Text Styles\n\n    bold = 1,\n    boldOff = 22,\n\n    italic = 3,\n    italicOff = 23,\n\n    underline = 4,\n    doubleunderline = 21,\n    underlineOff = 24, // this reset both underline and doubleunderline\n\n    inverse = 7,\n    inverseOff = 27,\n\n    hidden = 8,\n    hiddenOff = 28,\n\n    strikethrough = 9,\n    strikethroughOff = 29,\n\n    // *** Foreground Colors\n    fgBlack = 30,\n    fgRed = 31,\n    fgGreen = 32,\n    fgYellow = 33,\n    fgBlue = 34,\n    fgMagenta = 35,\n    fgCyan = 36,\n    fgWhite = 37,\n    fgBrightred = 91,\n    fgBrightgreen = 92,\n    fgBrightyellow = 93,\n    fgBrightblue = 94,\n    fgBrightmagenta = 95,\n    fgBrightcyan = 96,\n    fgBrightwhite = 97,\n    fgGray = 90,\n\n    // Resets foreground color to default\n    fgDefault = 39,\n\n    // *** Background Colors\n    bgBlack = 40,\n    bgRed = 41,\n    bgGreen = 42,\n    bgYellow = 43,\n    bgBlue = 44,\n    bgMagenta = 45,\n    bgCyan = 46,\n    bgWhite = 47,\n    bgBrightred = 101,\n    bgBrightgreen = 102,\n    bgBrightyellow = 103,\n    bgBrightblue = 104,\n    bgBrightmagenta = 105,\n    bgBrightcyan = 106,\n    bgBrightwhite = 107,\n    bgGray = 100,\n\n    // Resets background color to default\n    bgDefault = 49,\n\n    // *** Containers\n    framed = 51,\n    encircled = 52,\n    overline = 53,\n}\n\n// Given a name or array of names, return the ANSI escape code for that name.\nexport function escapeCodeFromName(names: number[]): string {\n    if (names.length === 0) {\n        return '';\n    }\n\n    const codeString = names.join(';');\n    return `\\x1b[${codeString}m`;\n}\n",
  "export function toTitleCase(str: string): string {\n    return str ? str[0].toUpperCase() + str.slice(1) : '';\n}\n",
  "import type { TextNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { TerminalStyle, escapeCodeFromName } from './escape-code-from-name';\nimport { toTitleCase } from './to-title-case';\n\n/**\n * Retrieves the escape codes for the given text attributes.  It will return both the escape codes for turning\n * on and off the text attributes.\n * @param properties The text attributes.\n * @returns An object containing the escape codes for turning on and off the specified text attributes.\n */\nexport function getTextEscapeCodesFromProperties(\n    properties: TextNodeBase,\n    style?: AnsieStyle,\n): {\n    on: string;\n    off: string;\n} {\n    const on: TerminalStyle[] = [];\n    const off: TerminalStyle[] = [];\n\n    const fg = properties.fg ?? style?.font?.color?.fg;\n    const bg = properties.bg ?? style?.font?.color?.bg;\n    const bold = properties.bold ?? style?.font?.bold;\n    const underline = properties.underline ?? style?.font?.underline;\n    const italics = properties.italics ?? style?.font?.italics;\n\n    if (fg) {\n        on.push(colorToTerminalStyle(fg, true));\n        off.push(TerminalStyle.fgDefault);\n    }\n    if (bg) {\n        on.push(colorToTerminalStyle(bg, false));\n        off.push(TerminalStyle.bgDefault);\n    }\n    if (bold) {\n        on.push(TerminalStyle.bold);\n        off.push(TerminalStyle.boldOff);\n    }\n    if (underline) {\n        if (underline === 'single') {\n            on.push(TerminalStyle.underline);\n        } else if (underline === 'double') {\n            on.push(TerminalStyle.doubleunderline);\n        }\n        off.push(TerminalStyle.underlineOff);\n    }\n    if (italics) {\n        on.push(TerminalStyle.italic);\n        off.push(TerminalStyle.italicOff);\n    }\n    return {\n        on: on.length > 0 ? escapeCodeFromName(on) : '',\n        off: off.length > 0 ? escapeCodeFromName(off) : '',\n    };\n}\n\nexport function colorToTerminalStyle(\n    color: string,\n    foreground: boolean,\n): TerminalStyle {\n    if (foreground) {\n        return TerminalStyle[\n            `fg${toTitleCase(color)}` as keyof typeof TerminalStyle\n        ];\n    } else {\n        return TerminalStyle[\n            `bg${toTitleCase(color)}` as keyof typeof TerminalStyle\n        ];\n    }\n}\n",
  "import { type CompilerFormat } from '../compiler/types';\nimport { getTextEscapeCodesFromProperties } from './get-text-escape-codes-from-properties';\nimport { type AnsieNode, isAttribute } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\n\n/**\n * Renders the text attributes for a node prepending the appropriate text escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderTextAttributesStart({\n    style,\n    attributes,\n    format = 'ansi',\n}: {\n    style?: AnsieStyle;\n    attributes: AnsieNode;\n    format?: CompilerFormat;\n}) {\n    if (format === 'ansi') {\n        return getTextEscapeCodesFromProperties(attributes, style).on;\n    } else if (format === 'markup') {\n        return Object.entries(attributes)\n            .filter(([key]) => isAttribute(key))\n            .map(([key, value]) => `${key}=\"${value}\"`)\n            .join(' ');\n    }\n}\n/**\n * Renders the text attributes for a node appending the appropriate text escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderTextAttributesEnd({\n    style,\n    attributes,\n    format = 'ansi',\n}: {\n    style?: AnsieStyle;\n    attributes: AnsieNode;\n    format?: CompilerFormat;\n}) {\n    if (format === 'ansi') {\n        return getTextEscapeCodesFromProperties(attributes, style).off;\n    } else if (format === 'markup') {\n        return '';\n    }\n}\n",
  "import { type AnsieNode, isAttribute } from '../compiler/types';\n\nexport function renderNodeAsMarkupStart(node: AnsieNode) {\n    const attribs = Object.entries(node)\n        .filter(([key]) => isAttribute(key))\n        .map(([key, value]) => `${key}=\"${value}\"`)\n        .join(' ');\n\n    return `<${node.node}${attribs ? ` ${attribs}` : ''}>`;\n}\nexport function renderNodeAsMarkupEnd(node: AnsieNode) {\n    return `</${node.node}>`;\n}\n",
  "import { CompilerError, type CompilerFormat } from '../types';\nimport {\n    type AnsieNode,\n    AnsieNodeImpl,\n    type TextNodeBase,\n    type SpaceNodeBase,\n} from '../types';\n\nimport {\n    renderSpaceAttributesStart,\n    renderSpaceAttributesEnd,\n} from '../../utilities/render-space-attributes';\nimport {\n    renderTextAttributesStart,\n    renderTextAttributesEnd,\n} from '../../utilities/render-text-attributes';\nimport {\n    renderNodeAsMarkupStart,\n    renderNodeAsMarkupEnd,\n} from '../../utilities/render-node-as-markup';\n\nexport class BlockTextNodeImpl\n    extends AnsieNodeImpl\n    implements TextNodeBase, SpaceNodeBase\n{\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderSpaceAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderTextAttributesStart({\n                    style: this._style,\n                    attributes: this._raw,\n                    format,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupStart(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n\n    renderEnd({\n        stack,\n        format = 'ansi',\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return `${renderTextAttributesEnd({ style: this._style, attributes: this._raw, format })}${renderSpaceAttributesEnd({ attributes: this._raw, format, style: this._style })}`;\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupEnd(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n}\n",
  "import { CompilerError, type CompilerFormat } from '../types';\nimport { AnsieNodeImpl, type AnsieNode } from '../types';\n\n//// Break Node - This is a node that represents a line break\n\nexport class BreakNodeImpl extends AnsieNodeImpl implements AnsieNode {\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return '\\n'.repeat(this._style?.spacing?.marginBottom || 1);\n        } else if (format === 'markup') {\n            return '<br/>';\n        }\n\n        throw new CompilerError(\n            `Invalid format: ${format}`,\n            this._raw,\n            stack,\n            false,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderEnd() {\n        return '';\n    }\n}\n",
  "export class RawTextMutator {\n    _str: string;\n\n    static EmojiMap: Record<string, string> = {\n        ':exclamation:': '❗',\n        ':warning:': '⚠️',\n        ':no_entry:': '⛔',\n        ':heavy_check_mark:': '✔️',\n        ':x:': '❌',\n        ':bangbang:': '‼️',\n        ':triangular_flag_on_post:': '🚩',\n        ':fire:': '🔥',\n        ':sos:': '🆘',\n        ':lock:': '🔒',\n        ':key:': '🔑',\n        ':heart:': '❤️',\n        ':broken_heart:': '💔',\n        ':skull_and_crossbones:': '☠️',\n        ':grin:': '😁',\n        ':joy:': '😂',\n        ':heart_eyes:': '😍',\n        ':smirk:': '😏',\n        ':sunglasses:': '😎',\n        ':thumbsup:': '👍',\n        ':thumbsdown:': '👎',\n        ':clap:': '👏',\n        ':pray:': '🙏',\n        ':cry:': '😢',\n        ':sob:': '😭',\n        ':rocket:': '🚀',\n        ':sunny:': '☀️',\n        ':umbrella:': '☔',\n        ':camera:': '📷',\n        ':book:': '📖',\n        ':moneybag:': '💰',\n        ':gift:': '🎁',\n        ':bell:': '🔔',\n        ':hammer:': '🔨',\n        ':thumbsup::skin-tone-2:': '👍🏻',\n        ':thumbsup::skin-tone-3:': '👍🏼',\n        ':thumbsup::skin-tone-4:': '👍🏽',\n        ':thumbsup::skin-tone-5:': '👍🏾',\n        ':thumbsup::skin-tone-6:': '👍🏿',\n    };\n\n    constructor(str: string) {\n        this._str = str;\n    }\n\n    get str(): string {\n        return this.toString();\n    }\n\n    replaceEmoji() {\n        const emojiMatches = this._str.match(/:[a-z_]+:/g);\n        if (emojiMatches) {\n            emojiMatches.forEach(match => {\n                const emoji = RawTextMutator.EmojiMap[match];\n                if (emoji) {\n                    this._str = this._str.replace(match, emoji);\n                }\n            });\n        }\n\n        return this;\n    }\n\n    trimSpaces(options: {\n        left: boolean;\n        right: boolean;\n        allowNewLines: boolean;\n        replaceWithSingleSpace: boolean;\n    }) {\n        // Construct a regex pattern based on the options\n        const whiteSpacePattern = options.allowNewLines\n            ? '[ \\\\t\\\\v\\\\v]'\n            : '\\\\s';\n        const leftPattern = options.left ? `^${whiteSpacePattern}+` : '';\n        const rightPattern = options.right ? `${whiteSpacePattern}+$` : '';\n        const pattern = new RegExp(`${leftPattern}|${rightPattern}`, 'g');\n        this._str = this._str.replace(\n            pattern,\n            options.replaceWithSingleSpace ? ' ' : '',\n        );\n        return this;\n    }\n\n    toString() {\n        return this._str;\n    }\n}\n",
  "import type { CompilerFormat } from '../types';\nimport { AnsieNodeImpl, type AnsieNode } from '../types';\nimport { RawTextMutator } from '../../utilities/raw-text-mutator';\n\nexport class RawTextNodeImpl extends AnsieNodeImpl implements AnsieNode {\n    renderStart({ format }: { stack: AnsieNode[]; format: CompilerFormat }) {\n        const text = this.attr('value') ?? '';\n        if (format === 'markup') {\n            return text;\n        } else {\n            return new RawTextMutator(text)\n                .replaceEmoji()\n                .trimSpaces({\n                    left: true,\n                    right: true,\n                    allowNewLines: false,\n                    replaceWithSingleSpace: true,\n                })\n                .toString();\n        }\n    }\n\n    renderEnd() {\n        return '';\n    }\n}\n",
  "import type { ListItemNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { num } from './num';\n\nexport function getListItemFromProperties(\n    node: ListItemNodeBase,\n    style?: AnsieStyle,\n): {\n    on: string;\n    off: string;\n} {\n    const bullet = node.bullet ? node.bullet : style?.list?.bullet ?? '';\n    const indent = node.indent\n        ? ' '.repeat(num(node.indent))\n        : ' '.repeat(style?.list?.indent ?? 0);\n\n    return {\n        on: `${bullet}${indent}`,\n        off: '',\n    };\n}\n",
  "import type { CompilerFormat } from '../compiler/types';\nimport { ListAttributes, type ListItemNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { getListItemFromProperties } from './get-list-prefix-from-properties';\n\nexport function renderListAttributesStart({\n    node,\n    style,\n    format = 'ansi',\n}: {\n    node: ListItemNodeBase;\n    style?: AnsieStyle;\n    format?: CompilerFormat;\n}): string {\n    if (format === 'ansi') {\n        return getListItemFromProperties(node, style).on;\n    } else if (format === 'markup') {\n        return Object.entries(node)\n            .filter(([key]) => Object.keys(ListAttributes).includes(key))\n            .map(([key, value]) => `${key}=\"${value}\"`)\n            .join(' ');\n    } else {\n        return '';\n    }\n}\n\nexport function renderListAttributesEnd({\n    node,\n    style,\n    format = 'ansi',\n}: {\n    node: ListItemNodeBase;\n    style?: AnsieStyle;\n    format?: CompilerFormat;\n}): string {\n    if (format === 'ansi') {\n        return getListItemFromProperties(node, style).off;\n    } else if (format === 'markup') {\n        return '';\n    } else {\n        return '';\n    }\n}\n",
  "import { CompilerError, type CompilerFormat } from '../types';\nimport { AnsieNodeImpl, type AnsieNode } from '../types';\nimport {\n    renderListAttributesEnd,\n    renderListAttributesStart,\n} from '../../utilities/render-list-attributes';\nimport {\n    renderNodeAsMarkupEnd,\n    renderNodeAsMarkupStart,\n} from '../../utilities/render-node-as-markup';\nimport {\n    renderSpaceAttributesEnd,\n    renderSpaceAttributesStart,\n} from '../../utilities/render-space-attributes';\nimport {\n    renderTextAttributesEnd,\n    renderTextAttributesStart,\n} from '../../utilities/render-text-attributes';\n\nexport class ListItemNodeImpl extends AnsieNodeImpl implements AnsieNode {\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderSpaceAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderListAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderTextAttributesStart({\n                    attributes: this._raw,\n                    format,\n                    style: this._style,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupStart(this._raw);\n        }\n\n        throw new CompilerError(\n            `Invalid format: ${format}`,\n            this._raw,\n            stack,\n            false,\n        );\n    }\n\n    renderEnd({\n        format = 'ansi',\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderTextAttributesEnd({\n                    style: this._style,\n                    attributes: this._raw,\n                    format,\n                }) +\n                renderListAttributesEnd({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderSpaceAttributesEnd({\n                    attributes: this._raw,\n                    format,\n                    style: this._style,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupEnd(this._raw);\n        } else {\n            return '';\n        }\n    }\n}\n",
  "import {\n    renderNodeAsMarkupEnd,\n    renderNodeAsMarkupStart,\n} from '../../utilities/render-node-as-markup';\nimport {\n    renderSpaceAttributesEnd,\n    renderSpaceAttributesStart,\n} from '../../utilities/render-space-attributes';\nimport {\n    renderTextAttributesEnd,\n    renderTextAttributesStart,\n} from '../../utilities/render-text-attributes';\nimport { CompilerError, type CompilerFormat } from '../types';\nimport {\n    AnsieNodeImpl,\n    type TextNodeBase,\n    type SpaceNodeBase,\n    type AnsieNode,\n} from '../types';\n\nexport class InlineTextNodeImpl\n    extends AnsieNodeImpl\n    implements TextNodeBase, SpaceNodeBase\n{\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderSpaceAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderTextAttributesStart({\n                    style: this._style,\n                    attributes: this._raw,\n                    format,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupStart(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n\n    renderEnd({\n        stack,\n        format = 'ansi',\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return `${renderTextAttributesEnd({ style: this._style, attributes: this._raw, format })}${renderSpaceAttributesEnd({ attributes: this._raw, format, style: this._style })}`;\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupEnd(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n}\n",
  "import {\n    AnsieNodeImpl,\n    type AnsieNode,\n    type Ast,\n    ValidTags,\n    type CompilerFormat,\n} from './types';\nimport { CompilerError } from './types';\nimport { BlockTextNodeImpl } from './node/block';\nimport { BreakNodeImpl } from './node/break';\nimport { RawTextNodeImpl } from './node/raw';\nimport { ListItemNodeImpl } from './node/list';\nimport { InlineTextNodeImpl } from './node/inline';\nimport type { AnsieTheme } from '../themes/themes';\n\n/**\n * The compiler takes the AST from the parser and compiles it into a string\n * @param ast Takes the AST from the compiled markup and stores for future operations.\n * @internal\n */\nexport class Compiler {\n    private _ast: Ast;\n    private _stack: AnsieNodeImpl[] = [];\n    private _theme: AnsieTheme;\n\n    /**\n     * The compiler takes the AST from the parser and compiles it into a string\n     * @param ast Takes the AST from the compiled markup and stores for future operations.\n     */\n    constructor(ast: Ast, theme: AnsieTheme) {\n        this._ast = ast;\n        this._theme = theme;\n    }\n\n    /**\n     * The compile function takes the AST and compiles it into a string.\n     * @returns A string that is the compiled markup.\n     */\n    public compile({\n        format,\n        theme,\n    }: {\n        format: CompilerFormat;\n        theme?: AnsieTheme;\n    }): string {\n        return this._ast.reduce((finalString, node) => {\n            finalString += this._compileNode({ node, format, theme });\n            return finalString;\n        }, '');\n    }\n\n    private makeNodeImplementation(raw: AnsieNode): AnsieNodeImpl {\n        switch (raw.node) {\n            case ValidTags.body:\n                return new BlockTextNodeImpl(raw, this._theme.body);\n            case ValidTags.h1:\n                return new BlockTextNodeImpl(raw, this._theme.h1);\n            case ValidTags.h2:\n                return new BlockTextNodeImpl(raw, this._theme.h2);\n            case ValidTags.h3:\n                return new BlockTextNodeImpl(raw, this._theme.h3);\n            case ValidTags.div:\n                return new BlockTextNodeImpl(raw, this._theme.div);\n            case ValidTags.p:\n                return new BlockTextNodeImpl(raw, this._theme.p);\n            case ValidTags.text:\n                return new RawTextNodeImpl(raw, this._theme.text);\n            case ValidTags.br:\n                return new BreakNodeImpl(raw, this._theme.br);\n            case ValidTags.span:\n                return new InlineTextNodeImpl(raw, this._theme.span);\n            case ValidTags.li:\n                return new ListItemNodeImpl(raw, this._theme.li);\n            default:\n                throw new CompilerError(\n                    `Invalid node type: ${raw.node}`,\n                    raw,\n                    this._stack,\n                    true,\n                );\n        }\n    }\n\n    private _push({\n        state,\n        format = 'ansi',\n    }: {\n        state: AnsieNode;\n        theme?: AnsieTheme;\n        format?: CompilerFormat;\n    }) {\n        const node = this.makeNodeImplementation(state);\n        this._stack.push(node);\n        return node.renderStart({ stack: this._stack, format });\n    }\n\n    private _pop({\n        format = 'ansi',\n    }: { theme?: AnsieTheme; format?: CompilerFormat } = {}) {\n        const old = this._stack.pop();\n        return old?.renderEnd({ stack: this._stack, format });\n    }\n\n    private _compileNode({\n        node,\n        theme,\n        format = 'ansi',\n    }: {\n        node: AnsieNode;\n        theme?: AnsieTheme;\n        format?: CompilerFormat;\n    }): string {\n        const strings: string[] = [];\n\n        try {\n            strings.push(this._push({ state: node, format }));\n\n            if (node.content) {\n                if (Array.isArray(node.content)) {\n                    node.content.forEach(node =>\n                        strings.push(\n                            this._compileNode({ node, theme, format }),\n                        ),\n                    );\n                } else {\n                    strings.push(\n                        this._compileNode({\n                            node: node.content,\n                            theme,\n                            format,\n                        }),\n                    );\n                }\n            }\n\n            const n = this._pop({ format });\n            if (n) {\n                strings.push(n);\n            }\n\n            return strings.join('');\n        } catch (e) {\n            if (e instanceof CompilerError) {\n                console.error(e.toString());\n                if (!e.continue) {\n                    throw e;\n                }\n            }\n        }\n\n        return '';\n    }\n}\n",
  "import type { ValidTags } from '../compiler/types';\n\nexport interface AnsieStyle {\n    font?: {\n        color?: {\n            fg?: string;\n            bg?: string;\n        };\n        bold?: boolean;\n        underline?: 'single' | 'double' | 'none' | boolean;\n        italics?: boolean;\n    };\n\n    spacing?: {\n        margin?: number;\n        marginLeft?: number;\n        marginRight?: number;\n        marginTop?: number;\n        marginBottom?: number;\n    };\n\n    list?: {\n        bullet?: string;\n        indent?: number;\n    };\n}\n\nconst cleanStyle: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const body: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const text: AnsieStyle = body;\n\nexport const br: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const h1: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'blue',\n        },\n        bold: true,\n        underline: 'double',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h2: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n        },\n        bold: true,\n        underline: 'single',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h3: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'gray',\n        },\n        bold: true,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const p: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const span: AnsieStyle = {};\n\nexport const li: AnsieStyle = {\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const div: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport interface AnsieTheme {\n    [ValidTags.h1]: AnsieStyle;\n    [ValidTags.h2]: AnsieStyle;\n    [ValidTags.h3]: AnsieStyle;\n    [ValidTags.body]: AnsieStyle;\n    [ValidTags.div]: AnsieStyle;\n    [ValidTags.span]: AnsieStyle;\n    [ValidTags.li]: AnsieStyle;\n    [ValidTags.p]: AnsieStyle;\n    [ValidTags.text]: AnsieStyle;\n    [ValidTags.br]: AnsieStyle;\n}\n\nexport const defaultTheme: AnsieTheme = {\n    h1: { ...cleanStyle, ...h1 },\n    h2: { ...cleanStyle, ...h2 },\n    h3: { ...cleanStyle, ...h3 },\n    body: { ...cleanStyle, ...body },\n    p: { ...cleanStyle, ...p },\n    li: { ...cleanStyle, ...li },\n    span: { ...cleanStyle, ...span },\n    div: { ...cleanStyle, ...div },\n    br: { ...cleanStyle, ...br },\n    text: { ...cleanStyle, ...text },\n};\n\nexport const cleanTheme: AnsieTheme = {\n    h1: cleanStyle,\n    h2: cleanStyle,\n    h3: cleanStyle,\n    body: cleanStyle,\n    p: cleanStyle,\n    li: cleanStyle,\n    span: cleanStyle,\n    div: cleanStyle,\n    br: cleanStyle,\n    text: cleanStyle,\n};\n\nlet _globalTheme: AnsieTheme = defaultTheme;\n\n/**\n * This will set the global theme which is used whenever a theme is\n * not given explicitly.\n * @param theme\n */\nexport function setGlobalTheme(theme: AnsieTheme) {\n    _globalTheme = theme;\n}\n\n/**\n * Gets the globally set theme.\n * @returns\n */\nexport function getGlobalTheme() {\n    return _globalTheme;\n}\n\n/**\n * Sets the global theme to the default theme.\n */\nsetGlobalTheme(defaultTheme);\n",
  "import type { ValidTags } from '../compiler/types';\n\nexport interface AnsieStyle {\n    font?: {\n        color?: {\n            fg?: string;\n            bg?: string;\n        };\n        bold?: boolean;\n        underline?: 'single' | 'double' | 'none' | boolean;\n        italics?: boolean;\n    };\n\n    spacing?: {\n        margin?: number;\n        marginLeft?: number;\n        marginRight?: number;\n        marginTop?: number;\n        marginBottom?: number;\n    };\n\n    list?: {\n        bullet?: string;\n        indent?: number;\n    };\n}\n\nconst cleanStyle: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const body: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const text: AnsieStyle = body;\n\nexport const br: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const h1: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'blue',\n        },\n        bold: true,\n        underline: 'double',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h2: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n        },\n        bold: true,\n        underline: 'single',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h3: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'gray',\n        },\n        bold: true,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const p: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const span: AnsieStyle = {};\n\nexport const li: AnsieStyle = {\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const div: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport interface AnsieTheme {\n    [ValidTags.h1]: AnsieStyle;\n    [ValidTags.h2]: AnsieStyle;\n    [ValidTags.h3]: AnsieStyle;\n    [ValidTags.body]: AnsieStyle;\n    [ValidTags.div]: AnsieStyle;\n    [ValidTags.span]: AnsieStyle;\n    [ValidTags.li]: AnsieStyle;\n    [ValidTags.p]: AnsieStyle;\n    [ValidTags.text]: AnsieStyle;\n    [ValidTags.br]: AnsieStyle;\n}\n\nexport const defaultTheme: AnsieTheme = {\n    h1: { ...cleanStyle, ...h1 },\n    h2: { ...cleanStyle, ...h2 },\n    h3: { ...cleanStyle, ...h3 },\n    body: { ...cleanStyle, ...body },\n    p: { ...cleanStyle, ...p },\n    li: { ...cleanStyle, ...li },\n    span: { ...cleanStyle, ...span },\n    div: { ...cleanStyle, ...div },\n    br: { ...cleanStyle, ...br },\n    text: { ...cleanStyle, ...text },\n};\n\nexport const cleanTheme: AnsieTheme = {\n    h1: cleanStyle,\n    h2: cleanStyle,\n    h3: cleanStyle,\n    body: cleanStyle,\n    p: cleanStyle,\n    li: cleanStyle,\n    span: cleanStyle,\n    div: cleanStyle,\n    br: cleanStyle,\n    text: cleanStyle,\n};\n\nlet _globalTheme: AnsieTheme = defaultTheme;\n\n/**\n * This will set the global theme which is used whenever a theme is\n * not given explicitly.\n * @param theme\n */\nexport function setGlobalTheme(theme: AnsieTheme) {\n    _globalTheme = theme;\n}\n\n/**\n * Gets the globally set theme.\n * @returns\n */\nexport function getGlobalTheme() {\n    return _globalTheme;\n}\n\n/**\n * Sets the global theme to the default theme.\n */\nsetGlobalTheme(defaultTheme);\n",
  "import { parseAnsieMarkdown, parseAnsieMarkup } from '../parser';\nimport type { CompilerFormat } from './types';\nimport { Compiler } from './Compiler';\nimport {\n    defaultTheme,\n    type AnsieTheme,\n    getGlobalTheme,\n} from '../themes/themes';\n\n/**\n * Compiles the markup into a string.\n * @param optionsOrMarkup Options or the markup to compile (with default options)\n * @returns\n */\nexport function compile(\n    optionsOrMarkup:\n        | string\n        | {\n              markup: string;\n              theme?: AnsieTheme;\n              inputIncludesMarkdown?: boolean;\n              output?: CompilerFormat;\n          },\n) {\n    let theme = getGlobalTheme();\n    let markup = '';\n    let output: CompilerFormat = 'ansi';\n    let inputIncludesMarkdown = true;\n    if (typeof optionsOrMarkup === 'string') {\n        markup = optionsOrMarkup;\n    } else {\n        markup = optionsOrMarkup.markup;\n        theme = optionsOrMarkup.theme ?? theme;\n        output = optionsOrMarkup.output ?? 'ansi';\n        inputIncludesMarkdown = optionsOrMarkup.inputIncludesMarkdown ?? true;\n    }\n\n    const ast = inputIncludesMarkdown\n        ? parseAnsieMarkdown(markup)\n        : parseAnsieMarkup(markup);\n    if (ast) {\n        const compiler = new Compiler(ast, theme || defaultTheme);\n        return compiler.compile({ format: output, theme });\n    } else {\n        return '';\n    }\n}\n",
  "{\n  \"name\": \"ansie\",\n  \"version\": \"0.4.0\",\n  \"type\": \"module\",\n  \"types\": \"dist/node/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/node/index.js\"\n    }\n  },\n  \"homepage\": \"https://github.com/kshehadeh/ansie/blob/main/README.md\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/kshehadeh/ansie\"\n  },\n  \"author\": \"Karim Shehadeh <karim@karim.cloud> (http://karim.cloud/)\",\n  \"funding\": {\n    \"type\": \"patreon\",\n    \"url\": \"https://www.patreon.com/karimshehadeh\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/kshehadeh/ansie/issues\"\n  },\n  \"license\": \"MIT\",\n  \"bin\": {\n    \"ansie\": \"dist/node/cli.js\"\n  },\n  \"keywords\": [\n    \"terminal\",\n    \"cli\",\n    \"markup\",\n    \"parser\",\n    \"rendering\",\n    \"rich\",\n    \"text\",\n    \"ansi\",\n    \"color\",\n    \"colour\",\n    \"form\"\n  ],\n  \"description\": \"A simple rendering engine for rich text terminal output with its own markup language.\",\n  \"scripts\": {\n    \"clean\": \"rimraf dist\",\n    \"test\": \"bun test\",\n    \"fixture:generate\": \"bun test/record.ts\",\n    \"parser:generate\": \"bun scripts/parser/generate.ts\",\n    \"ver:pre\": \"npm version prerelease\",\n    \"ver:pat\": \"npm version patch\",\n    \"ver:min\": \"npm version minor\",\n    \"ver:maj\": \"npm version major\",\n    \"bld\": \"bun test && bun clean && bun ./scripts/build/build.ts && bun bld:types\",\n    \"bld:types\": \"npx dts-bundle-generator ./src/index.ts -o ./dist/node/index.d.ts --export-referenced-types=false --no-check\",\n    \"pub\": \"bun run bld && npm publish\",\n    \"pub:dry\": \"bun run bld && npm publish --dry-run\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/node\": \"^20.11.16\",\n    \"@types/yargs\": \"^17.0.32\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.21.0\",\n    \"bun-types\": \"^1.0.26\",\n    \"dts-bundle-generator\": \"^9.3.1\",\n    \"eslint\": \"^8.56.0\",\n    \"lefthook\": \"^1.6.0\",\n    \"peggy\": \"^3.0.2\",\n    \"prettier\": \"^3.2.4\",\n    \"rimraf\": \"^5.0.5\",\n    \"ts-pegjs\": \"^4.2.1\"\n  },\n  \"peerDependencies\": {\n    \"typescript\": \"^5.3.3\"\n  },\n  \"dependencies\": {\n    \"yargs\": \"^17.7.2\"\n  },\n  \"eslintIgnore\": [\n    \"generated-parser.js\"\n  ]\n}\n",
  "#!/usr/bin/env node\n\n// A command parser for the composer CLI that takes the following arguments:\n//       --help     Show help                                             [boolean]\n//       --version  Show version number                                   [boolean]\n//   -i, --input    Specify the input file                                 [string]\n//   -m, --markup   Specify the markup text (instead of a file)            [string]\n//   -o, --output   Specify the output file                                [string]\n//   -a, --ast      Output the AST instead of the compiled text           [boolean]\n\nimport yargs from 'yargs';\nimport fs from 'fs';\nimport { hideBin } from 'yargs/helpers';\nimport { compile } from './compiler/compile';\nimport pkg from '../package.json';\nimport { parseAnsieMarkdown } from './parser';\n\nfunction readStdinWithTimeout(timeout: number): Promise<string> {\n    return new Promise((resolve, reject) => {\n        let inputData = '';\n\n        // Set a timeout to abort reading\n        const timer = setTimeout(() => {\n            process.stdin.pause();\n            resolve('');\n        }, timeout);\n\n        process.stdin.on('data', data => {\n            inputData += data;\n        });\n\n        process.stdin.on('end', () => {\n            clearTimeout(timer);\n            resolve(inputData);\n        });\n\n        process.stdin.on('error', err => {\n            clearTimeout(timer);\n            reject(err);\n        });\n\n        process.stdin.resume();\n    });\n}\n\nasync function handleInput() {\n    const stdInput = await readStdinWithTimeout(10);\n\n    const y = yargs(hideBin(process.argv))\n        .scriptName('ansie')\n        .version(pkg.version)\n        .usage('Usage: ansie [markup] -i [input] -o [output]')\n        .positional('markup', {\n            alias: 'm',\n            type: 'string',\n            description: 'Specify the markup text (instead of a file)',\n        })\n        .option('input', {\n            alias: 'i',\n            type: 'string',\n            description: 'Specify the input file',\n        })\n        .option('output', {\n            alias: 'o',\n            type: 'string',\n            description: 'Specify the output file',\n        })\n        .option('ast', {\n            alias: 'a',\n            type: 'boolean',\n            description: 'Output the AST instead of the compiled text',\n        })\n        .check(argv => {\n            const markup = argv._.join(' ');\n            if (argv.input && markup.length > 0) {\n                throw new Error(\n                    'You must specify either --input or markup as a positional argument, not both',\n                );\n            }\n\n            if (!argv.input && !markup && !stdInput) {\n                throw new Error(\n                    'You must specify either --input or --markup so that the compiler knows what to compile',\n                );\n            }\n\n            if (argv.input) {\n                if (!fs.existsSync(argv.input)) {\n                    throw new Error(\n                        `The input file ${argv.input} does not exist`,\n                    );\n                }\n            }\n\n            return true;\n        });\n\n    const argv = await y.argv;\n    if (argv['help']) {\n        y.showHelp();\n    } else if (argv['version']) {\n        console.log(pkg.version);\n    } else {\n        let input = '';\n        if (argv.input) {\n            // Read the input file into the string `input`\n            input = fs.readFileSync(argv.input, 'utf8');\n        } else if (argv._.length > 0) {\n            input = argv._.join(' ');\n        } else if (stdInput) {\n            input = stdInput;\n        }\n\n        if (input) {\n            let output = '';\n            if (argv.ast) {\n                output = JSON.stringify(parseAnsieMarkdown(input), null, 4);\n            } else {\n                output = compile({ markup: input }) || '';\n            }\n\n            if (output) {\n                if (argv.output) {\n                    fs.writeFileSync(argv.output, output);\n                } else {\n                    console.log(output);\n                }\n            } else {\n                throw new Error('No output was generated');\n            }\n        }\n    }\n}\n\nhandleInput()\n    .then(() => process.exit(0))\n    .catch(e => {\n        console.error(e);\n        process.exit(1);\n    });\n"
  ],
  "mappings": "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",
  "debugId": "87A1C45CE0784F6A64756e2164756e21",
  "names": []
}