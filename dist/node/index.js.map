{
  "version": 3,
  "sources": ["../../src/compiler/types.ts", "../../src/parser/generated-parser.js", "../../src/utilities/convert-markdown-to-ansie.ts", "../../src/parser/index.ts", "../../src/utilities/num.ts", "../../src/utilities/get-spacing-from-properties.ts", "../../src/utilities/render-space-attributes.ts", "../../src/utilities/escape-code-from-name.ts", "../../src/utilities/to-title-case.ts", "../../src/utilities/get-text-escape-codes-from-properties.ts", "../../src/utilities/render-text-attributes.ts", "../../src/utilities/render-node-as-markup.ts", "../../src/compiler/node/block.ts", "../../src/compiler/node/break.ts", "../../src/utilities/raw-text-mutator.ts", "../../src/compiler/node/raw.ts", "../../src/utilities/get-list-prefix-from-properties.ts", "../../src/utilities/render-list-attributes.ts", "../../src/compiler/node/list.ts", "../../src/compiler/node/inline.ts", "../../src/compiler/Compiler.ts", "../../src/themes/themes.ts", "../../src/themes/themes.ts", "../../src/compiler/compile.ts", "../../src/template/index.ts", "../../src/console/console.ts", "../../src/console/console.ts", "../../src/index.ts"],
  "sourcesContent": [
    "import type { AnsieStyle } from '../themes/themes';\n\n/**\n * This file contains all the types used by the parser and compiler.\n *\n * ‼️ IMPORTANT ‼️\n * IT'S IMPORTANT THAT THIS FILE IS NOT DEPENDENT ON ANY OTHER FILES IN THE PROJECT.\n *\n * This file is used by the parser and compiler.  It should not be dependent on any other\n * files in the project.  This is to avoid circular dependencies and any complexities that\n * may arise from them.\n * \n/**\n * The canonical list of supported tags.  We should never be referring\n * to tags as raw strings.  Instead, we should be using this enum.  This\n * will help us avoid typos and make it easier to refactor later.\n */\nexport enum ValidTags {\n    'h1' = 'h1',\n    'h2' = 'h2',\n    'h3' = 'h3',\n    'body' = 'body',\n    'span' = 'span',\n    'p' = 'p',\n    'div' = 'div',\n    'text' = 'text',\n    'li' = 'li',\n    'br' = 'br',\n}\n\n/**\n * A list of all the valid tags.  This is used by the parser to validate\n * the tags before returning the AST.\n * @internal\n */\nexport const ValidTagsList = Object.keys(ValidTags);\n\n/**\n * A type guard to determine if a given tag is a valid tag.\n * @param tag\n * @returns\n * @internal\n */\nexport type ValidTagsType = keyof typeof ValidTags;\n\n/**\n * @internal\n */\nexport const ColorAttributeValues = [\n    'black',\n    'red',\n    'green',\n    'yellow',\n    'blue',\n    'magenta',\n    'cyan',\n    'white',\n    'default',\n    'brightblack',\n    'brightred',\n    'brightgreen',\n    'brightyellow',\n    'brightblue',\n    'brightmagenta',\n    'brightcyan',\n    'gray',\n];\n\n/**\n * A list of all the valid boolean attribute values.  This is used by the parser to validate\n * the attributes for each tag before returning the AST.\n * @internal\n */\nconst booleanValues = ['true', 'false', 'yes', 'no', 'y', 'n', '1', '0'];\n\n/**\n * @internal\n */\nexport type BaseAnsieNode = {\n    node: ValidTags;\n    content?: AnsieNode | AnsieNode[];\n};\n\n////// Space Attributes - These are the attributes that can be associated with semantic elements that have a concept of spacing such as <div> and <p>\n\n/**\n * @internal\n */\nexport const SpaceAttributes = {\n    margin: ['number'],\n    marginTop: ['number'],\n    marginBottom: ['number'],\n    marginLeft: ['number'],\n    marginRight: ['number'],\n};\n\n/**\n * @internal\n */\nexport type SpaceAttributesInterface = {\n    [key in keyof typeof SpaceAttributes]?: string;\n};\n\n/**\n * @internal\n */\nexport type SpaceNodeBase = BaseAnsieNode & SpaceAttributesInterface;\n\n///// Text Attributes - These are the attributes that can be associated with text-based semantic elements such as <span> and <p>\nexport const TextAttributes = {\n    fg: ColorAttributeValues,\n    bg: ColorAttributeValues,\n    bold: [...booleanValues],\n    italics: [...booleanValues],\n    underline: [...booleanValues, 'single', 'double', 'none'],\n};\n\n/**\n * @internal\n */\nexport type TextAttributesInterface = {\n    [key in keyof typeof TextAttributes]?: string;\n};\n\n/**\n * @internal\n */\nexport type TextNodeBase = BaseAnsieNode & TextAttributesInterface;\n\n///////\n\n///// List Attributes - These are the attributes that can be associated with text-based semantic elements such as <span> and <p>\n/**\n * @internal\n */\nexport const ListAttributes = {\n    bullet: ['*', '-', '+'],\n    indent: ['number'],\n};\n\n/**\n * @internal\n */\nexport type ListAttributesKeysType = keyof typeof ListAttributes;\n\n/**\n * @internal\n */\nexport type ListAttributesInterface = {\n    [key in ListAttributesKeysType]?: string;\n};\n\n/**\n * @internal\n */\nexport type ListItemNodeBase = BaseAnsieNode & ListAttributesInterface;\n///////\n\n///// Raw Attributes - These are the attributes that can be associated with text-based semantic elements such as <span> and <p>\n/**\n * @internal\n */\nexport const RawTextAttributes = {\n    value: ['string'],\n};\n\n/**\n * @internal\n */\nexport type RawTextAttributesKeysType = keyof typeof RawTextAttributes;\n\n/**\n * @internal\n */\nexport type RawTextAttributesInterface = {\n    [key in RawTextAttributesKeysType]?: string;\n};\n///////\n\n/**\n * A union of all the valid attribute keys.\n * @internal\n */\nexport type AllAttributeKeys =\n    | keyof typeof TextAttributes\n    | keyof typeof SpaceAttributes\n    | keyof typeof ListAttributes\n    | keyof typeof RawTextAttributes;\n\n///////\n\n/**\n * A list of all the valid attribute keys.  This is used by the parser to validate\n * the attributes for each tag before returning the AST.\n * @internal\n */\nexport const AllAttributeKeysList = [\n    ...Object.keys(SpaceAttributes),\n    ...Object.keys(TextAttributes),\n    ...Object.keys(ListAttributes),\n    ...Object.keys(RawTextAttributes),\n];\n\n/**\n * A type guard to determine if a given key is a valid attribute.\n * @param key\n * @returns\n * @internal\n */\nexport function isAttribute(key: string): key is AllAttributeKeys {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return AllAttributeKeysList.includes(key as any);\n}\n\n/**\n * This is a map of all the valid attributes for each tag.  This is used by the parser to\n * validate the attributes for each tag before returning the AST.\n * @internal\n */\nexport const TagAttributeMap = {\n    [ValidTags.h1]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.h2]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.h3]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.body]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.span]: {\n        ...TextAttributes,\n    },\n    [ValidTags.p]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.div]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n    },\n    [ValidTags.li]: {\n        ...TextAttributes,\n        ...SpaceAttributes,\n        ...ListAttributes,\n    },\n    [ValidTags.text]: {},\n    [ValidTags.br]: {\n        ...SpaceAttributes,\n    },\n};\n\n/**\n * A union of all the valid attribute values.\n * @internal\n */\nexport type AnsieNode = BaseAnsieNode &\n    SpaceAttributesInterface &\n    TextAttributesInterface &\n    ListAttributesInterface &\n    RawTextAttributesInterface;\n\nexport type Ast = AnsieNode[];\n\n/**\n * Wrap a node in the AST to provide rendering overridable methods.  It takes\n * a raw node from the AST produced by the parser.  This is then overridden by\n * the various node implementations to provide specialized rendering for each\n * node type.  For example, a <p> tag will render differently than a <span> tag.\n *\n * The _raw property is the original AST node.  It also provides\n * @internal\n */\nexport abstract class AnsieNodeImpl {\n    _raw: AnsieNode;\n    _style: AnsieStyle;\n\n    constructor(node: AnsieNode, style: AnsieStyle) {\n        this._raw = node;\n        this._style = style;\n    }\n\n    get node(): ValidTags {\n        return this._raw.node;\n    }\n\n    /**\n     * Returns the attributes for this node.  This is a subset of the raw node\n     * that only contains the attributes.  Attributes are anything that is not\n     * \"node\" or \"content\".\n     */\n    get attributes(): Record<AllAttributeKeys, string> {\n        return Object.entries(this._raw).reduce(\n            (acc, [key, value]) => {\n                if (isAttribute(key) && typeof value === 'string') {\n                    acc[key] = value;\n                }\n                return acc;\n            },\n            {} as Record<AllAttributeKeys, string>,\n        );\n    }\n\n    /**\n     * Returns a specific attribute value.\n     * @param key\n     * @returns\n     */\n    attr(key: AllAttributeKeys): string | undefined {\n        return this._raw[key];\n    }\n\n    abstract renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }): string;\n    abstract renderEnd({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }): string;\n}\n\n/**\n * Represents a compiler error.\n * @internal\n */\nexport class CompilerError implements Error {\n    name: string = 'CompilerError';\n    message: string;\n    fatal: boolean;\n\n    markupNode: AnsieNode;\n    markupStack: AnsieNode[];\n\n    /**\n     * Creates a new instance of CompilerError.\n     * @param message The error message.\n     * @param markupNode The markup node associated with the error.\n     * @param markupStack The stack of markup nodes leading to the error.\n     * @param fatal Indicates whether the error is fatal or not. Default is false.\n     */\n    constructor(\n        message: string,\n        markupNode: AnsieNode,\n        markupStack: AnsieNode[],\n        fatal: boolean = false,\n    ) {\n        this.message = message;\n        this.markupNode = markupNode;\n        this.markupStack = markupStack;\n        this.fatal = fatal;\n    }\n\n    /**\n     * Returns a string representation of the CompilerError.\n     * @returns The string representation of the CompilerError.\n     */\n    toString() {\n        return `${this.name}: ${this.message} (${this.markupNode.node}, ${this.markupStack.map(node => node.node).join(', ')})`;\n    }\n\n    /**\n     * Determines whether the error can be continued or not.\n     * @returns True if the error can be continued, false otherwise.\n     */\n    continue() {\n        return !this.fatal;\n    }\n}\n\nexport type CompilerFormat = 'ansi' | 'markup';\n",
  "/* eslint-disable */\n// Generated by Peggy 3.0.2.\n//\n// https://peggyjs.org/\n\nimport { TagAttributeMap } from '../compiler/types';\n\nfunction add(obj, props) {\n    for (const [k, v] of Object.entries(props)) {\n        if (v) {\n            obj[k] = v;\n        }\n    }\n    return obj;\n}\n\nfunction clumpStrings(vals) {\n    const ret = [];\n    let lastStr = '';\n    for (const val of vals) {\n        if (typeof val === 'string') {\n            lastStr += val;\n        } else {\n            if (lastStr) {\n                ret.push(lastStr);\n                lastStr = '';\n            }\n            ret.push(val);\n        }\n    }\n    if (lastStr) {\n        ret.push(lastStr);\n    }\n    return ret;\n}\n\nfunction peg$subclass(child, parent) {\n    function C() {\n        this.constructor = child;\n    }\n    C.prototype = parent.prototype;\n    child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n    var self = Error.call(this, message);\n    // istanbul ignore next Check is a necessary evil to support older environments\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n    }\n    self.expected = expected;\n    self.found = found;\n    self.location = location;\n    self.name = 'SyntaxError';\n    return self;\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\nfunction peg$padEnd(str, targetLength, padString) {\n    padString = padString || ' ';\n    if (str.length > targetLength) {\n        return str;\n    }\n    targetLength -= str.length;\n    padString += padString.repeat(targetLength);\n    return str + padString.slice(0, targetLength);\n}\n\npeg$SyntaxError.prototype.format = function (sources) {\n    var str = 'Error: ' + this.message;\n    if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n            if (sources[k].source === this.location.source) {\n                src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n                break;\n            }\n        }\n        var s = this.location.start;\n        var offset_s =\n            this.location.source &&\n            typeof this.location.source.offset === 'function'\n                ? this.location.source.offset(s)\n                : s;\n        var loc =\n            this.location.source + ':' + offset_s.line + ':' + offset_s.column;\n        if (src) {\n            var e = this.location.end;\n            var filler = peg$padEnd('', offset_s.line.toString().length, ' ');\n            var line = src[s.line - 1];\n            var last = s.line === e.line ? e.column : line.length + 1;\n            var hatLen = last - s.column || 1;\n            str +=\n                '\\n --> ' +\n                loc +\n                '\\n' +\n                filler +\n                ' |\\n' +\n                offset_s.line +\n                ' | ' +\n                line +\n                '\\n' +\n                filler +\n                ' | ' +\n                peg$padEnd('', s.column - 1, ' ') +\n                peg$padEnd('', hatLen, '^');\n        } else {\n            str += '\\n at ' + loc;\n        }\n    }\n    return str;\n};\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n        literal: function (expectation) {\n            return '\"' + literalEscape(expectation.text) + '\"';\n        },\n\n        class: function (expectation) {\n            var escapedParts = expectation.parts.map(function (part) {\n                return Array.isArray(part)\n                    ? classEscape(part[0]) + '-' + classEscape(part[1])\n                    : classEscape(part);\n            });\n\n            return (\n                '[' +\n                (expectation.inverted ? '^' : '') +\n                escapedParts.join('') +\n                ']'\n            );\n        },\n\n        any: function () {\n            return 'any character';\n        },\n\n        end: function () {\n            return 'end of input';\n        },\n\n        other: function (expectation) {\n            return expectation.description;\n        },\n    };\n\n    function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n        return s\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\"/g, '\\\\\"')\n            .replace(/\\0/g, '\\\\0')\n            .replace(/\\t/g, '\\\\t')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/[\\x00-\\x0F]/g, function (ch) {\n                return '\\\\x0' + hex(ch);\n            })\n            .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n                return '\\\\x' + hex(ch);\n            });\n    }\n\n    function classEscape(s) {\n        return s\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\]/g, '\\\\]')\n            .replace(/\\^/g, '\\\\^')\n            .replace(/-/g, '\\\\-')\n            .replace(/\\0/g, '\\\\0')\n            .replace(/\\t/g, '\\\\t')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/[\\x00-\\x0F]/g, function (ch) {\n                return '\\\\x0' + hex(ch);\n            })\n            .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n                return '\\\\x' + hex(ch);\n            });\n    }\n\n    function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n        var descriptions = expected.map(describeExpectation);\n        var i, j;\n\n        descriptions.sort();\n\n        if (descriptions.length > 0) {\n            for (i = 1, j = 1; i < descriptions.length; i++) {\n                if (descriptions[i - 1] !== descriptions[i]) {\n                    descriptions[j] = descriptions[i];\n                    j++;\n                }\n            }\n            descriptions.length = j;\n        }\n\n        switch (descriptions.length) {\n            case 1:\n                return descriptions[0];\n\n            case 2:\n                return descriptions[0] + ' or ' + descriptions[1];\n\n            default:\n                return (\n                    descriptions.slice(0, -1).join(', ') +\n                    ', or ' +\n                    descriptions[descriptions.length - 1]\n                );\n        }\n    }\n\n    function describeFound(found) {\n        return found ? '\"' + literalEscape(found) + '\"' : 'end of input';\n    }\n\n    return (\n        'Expected ' +\n        describeExpected(expected) +\n        ' but ' +\n        describeFound(found) +\n        ' found.'\n    );\n};\n\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n\n    var peg$FAILED = {};\n    var peg$source = options.grammarSource;\n\n    var peg$startRuleFunctions = { document: peg$parsedocument };\n    var peg$startRuleFunction = peg$parsedocument;\n\n    var peg$c0 = '\\t';\n    var peg$c1 = '\\n';\n    var peg$c2 = '\\r';\n    var peg$c3 = '.';\n    var peg$c4 = '-';\n    var peg$c5 = '_';\n    var peg$c6 = ':';\n    var peg$c7 = ' ';\n    var peg$c8 = '\"';\n    var peg$c9 = \"'\";\n    var peg$c10 = '<!--';\n    var peg$c11 = '--';\n    var peg$c12 = '-->';\n    var peg$c13 = '<![CDATA[';\n    var peg$c14 = ']]>';\n    var peg$c15 = '=';\n    var peg$c16 = '1.0';\n    var peg$c17 = 'standalone';\n    var peg$c18 = 'yes';\n    var peg$c19 = 'no';\n    var peg$c20 = '<';\n    var peg$c21 = '>';\n    var peg$c22 = '</';\n    var peg$c23 = '/>';\n\n    var peg$r0 = /^[ -\\uD7FF]/;\n    var peg$r1 = /^[\\uE000-\\uFFFD]/;\n    var peg$r2 = /^[\\uD800-\\uDBFF]/;\n    var peg$r3 = /^[\\uDC00-\\uDFFF]/;\n    var peg$r4 = /^[ \\t\\r\\n]/;\n    var peg$r5 = /^[^%&\"]/;\n    var peg$r6 = /^[^%&']/;\n    var peg$r7 = /^[^<&\"]/;\n    var peg$r8 = /^[^<&']/;\n    var peg$r9 = /^[^\"]/;\n    var peg$r10 = /^[^']/;\n    var peg$r11 = /^[\\-()+,.\\/:=?;!*#@$_% \\r\\na-zA-Z0-9]/;\n    var peg$r12 = /^[^<&]/;\n    var peg$r13 = /^[A-Za-z\\xC0-\\xD6]/;\n    var peg$r14 = /^[\\xD8-\\xF6\\xF8-\\xFF\\u0100-\\u0131]/;\n    var peg$r15 = /^[\\u0134-\\u013E\\u0141-\\u0148\\u014A-\\u017E]/;\n    var peg$r16 = /^[\\u0180-\\u01C3\\u01CD-\\u01F0\\u01F4-\\u01F5]/;\n    var peg$r17 = /^[\\u01FA-\\u0217\\u0250-\\u02A8\\u02BB-\\u02C1]/;\n    var peg$r18 = /^[\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1]/;\n    var peg$r19 = /^[\\u03A3-\\u03CE\\u03D0-\\u03D6\\u03DA\\u03DC]/;\n    var peg$r20 = /^[\\u03DE\\u03E0\\u03E2-\\u03F3\\u0401-\\u040C]/;\n    var peg$r21 = /^[\\u040E-\\u044F\\u0451-\\u045C\\u045E-\\u0481]/;\n    var peg$r22 = /^[\\u0490-\\u04C4\\u04C7-\\u04C8\\u04CB-\\u04CC]/;\n    var peg$r23 = /^[\\u04D0-\\u04EB\\u04EE-\\u04F5\\u04F8-\\u04F9]/;\n    var peg$r24 = /^[\\u0531-\\u0556\\u0559\\u0561-\\u0586]/;\n    var peg$r25 = /^[\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A]/;\n    var peg$r26 = /^[\\u0641-\\u064A\\u0671-\\u06B7\\u06BA-\\u06BE]/;\n    var peg$r27 = /^[\\u06C0-\\u06CE\\u06D0-\\u06D3\\u06D5\\u06E5-\\u06E6]/;\n    var peg$r28 = /^[\\u0905-\\u0939\\u093D\\u0958-\\u0961\\u0985-\\u098C]/;\n    var peg$r29 = /^[\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0]/;\n    var peg$r30 = /^[\\u09B2\\u09B6-\\u09B9\\u09DC-\\u09DD\\u09DF-\\u09E1]/;\n    var peg$r31 = /^[\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10]/;\n    var peg$r32 = /^[\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33]/;\n    var peg$r33 = /^[\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C]/;\n    var peg$r34 = /^[\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8B\\u0A8D]/;\n    var peg$r35 = /^[\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0]/;\n    var peg$r36 = /^[\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AE0]/;\n    var peg$r37 = /^[\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28]/;\n    var peg$r38 = /^[\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B36-\\u0B39]/;\n    var peg$r39 = /^[\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61]/;\n    var peg$r40 = /^[\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95]/;\n    var peg$r41 = /^[\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F]/;\n    var peg$r42 = /^[\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB5]/;\n    var peg$r43 = /^[\\u0BB7-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10]/;\n    var peg$r44 = /^[\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39]/;\n    var peg$r45 = /^[\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90]/;\n    var peg$r46 = /^[\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9]/;\n    var peg$r47 = /^[\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10]/;\n    var peg$r48 = /^[\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D60-\\u0D61]/;\n    var peg$r49 = /^[\\u0E01-\\u0E2E\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45]/;\n    var peg$r50 = /^[\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A]/;\n    var peg$r51 = /^[\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3]/;\n    var peg$r52 = /^[\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EAE\\u0EB0]/;\n    var peg$r53 = /^[\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0F40-\\u0F47]/;\n    var peg$r54 = /^[\\u0F49-\\u0F69\\u10A0-\\u10C5\\u10D0-\\u10F6\\u1100]/;\n    var peg$r55 = /^[\\u1102-\\u1103\\u1105-\\u1107\\u1109\\u110B-\\u110C]/;\n    var peg$r56 = /^[\\u110E-\\u1112\\u113C\\u113E\\u1140\\u114C\\u114E]/;\n    var peg$r57 = /^[\\u1150\\u1154-\\u1155\\u1159\\u115F-\\u1161\\u1163]/;\n    var peg$r58 = /^[\\u1165\\u1167\\u1169\\u116D-\\u116E\\u1172-\\u1173]/;\n    var peg$r59 = /^[\\u1175\\u119E\\u11A8\\u11AB\\u11AE-\\u11AF]/;\n    var peg$r60 = /^[\\u11B7-\\u11B8\\u11BA\\u11BC-\\u11C2\\u11EB\\u11F0]/;\n    var peg$r61 = /^[\\u11F9\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15]/;\n    var peg$r62 = /^[\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D]/;\n    var peg$r63 = /^[\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D]/;\n    var peg$r64 = /^[\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4]/;\n    var peg$r65 = /^[\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB]/;\n    var peg$r66 = /^[\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126]/;\n    var peg$r67 = /^[\\u212A-\\u212B\\u212E\\u2180-\\u2182\\u3041-\\u3094]/;\n    var peg$r68 = /^[\\u30A1-\\u30FA\\u3105-\\u312C\\uAC00-\\uD7A3]/;\n    var peg$r69 = /^[\\u4E00-\\u9FA5\\u3007\\u3021-\\u3029]/;\n    var peg$r70 = /^[\\u0300-\\u0345\\u0360-\\u0361\\u0483-\\u0486]/;\n    var peg$r71 = /^[\\u0591-\\u05A1\\u05A3-\\u05B9\\u05BB-\\u05BD\\u05BF]/;\n    var peg$r72 = /^[\\u05C1-\\u05C2\\u05C4\\u064B-\\u0652\\u0670]/;\n    var peg$r73 = /^[\\u06D6-\\u06DC\\u06DD-\\u06DF\\u06E0-\\u06E4]/;\n    var peg$r74 = /^[\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0901-\\u0903]/;\n    var peg$r75 = /^[\\u093C\\u093E-\\u094C\\u094D\\u0951-\\u0954]/;\n    var peg$r76 = /^[\\u0962-\\u0963\\u0981-\\u0983\\u09BC\\u09BE]/;\n    var peg$r77 = /^[\\u09BF\\u09C0-\\u09C4\\u09C7-\\u09C8\\u09CB-\\u09CD]/;\n    var peg$r78 = /^[\\u09D7\\u09E2-\\u09E3\\u0A02\\u0A3C\\u0A3E\\u0A3F]/;\n    var peg$r79 = /^[\\u0A40-\\u0A42\\u0A47-\\u0A48\\u0A4B-\\u0A4D]/;\n    var peg$r80 = /^[\\u0A70-\\u0A71\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5]/;\n    var peg$r81 = /^[\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0B01-\\u0B03\\u0B3C]/;\n    var peg$r82 = /^[\\u0B3E-\\u0B43\\u0B47-\\u0B48\\u0B4B-\\u0B4D]/;\n    var peg$r83 = /^[\\u0B56-\\u0B57\\u0B82-\\u0B83\\u0BBE-\\u0BC2]/;\n    var peg$r84 = /^[\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C01-\\u0C03]/;\n    var peg$r85 = /^[\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D]/;\n    var peg$r86 = /^[\\u0C55-\\u0C56\\u0C82-\\u0C83\\u0CBE-\\u0CC4]/;\n    var peg$r87 = /^[\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5-\\u0CD6]/;\n    var peg$r88 = /^[\\u0D02-\\u0D03\\u0D3E-\\u0D43\\u0D46-\\u0D48]/;\n    var peg$r89 = /^[\\u0D4A-\\u0D4D\\u0D57\\u0E31\\u0E34-\\u0E3A]/;\n    var peg$r90 = /^[\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC]/;\n    var peg$r91 = /^[\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39]/;\n    var peg$r92 = /^[\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86-\\u0F8B]/;\n    var peg$r93 = /^[\\u0F90-\\u0F95\\u0F97\\u0F99-\\u0FAD\\u0FB1-\\u0FB7]/;\n    var peg$r94 = /^[\\u0FB9\\u20D0-\\u20DC\\u20E1\\u302A-\\u302F]/;\n    var peg$r95 = /^[\\u3099\\u309A]/;\n    var peg$r96 = /^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]/;\n    var peg$r97 = /^[\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F]/;\n    var peg$r98 = /^[\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE7-\\u0BEF]/;\n    var peg$r99 = /^[\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F]/;\n    var peg$r100 = /^[\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29]/;\n    var peg$r101 = /^[\\xB7\\u02D0\\u02D1\\u0387\\u0640\\u0E46]/;\n    var peg$r102 = /^[\\u0EC6\\u3005\\u3031-\\u3035\\u309D-\\u309E]/;\n    var peg$r103 = /^[\\u30FC-\\u30FE]/;\n\n    var peg$e0 = peg$literalExpectation('\\t', false);\n    var peg$e1 = peg$literalExpectation('\\n', false);\n    var peg$e2 = peg$literalExpectation('\\r', false);\n    var peg$e3 = peg$classExpectation([[' ', '\\uD7FF']], false, false);\n    var peg$e4 = peg$classExpectation([['\\uE000', '\\uFFFD']], false, false);\n    var peg$e5 = peg$classExpectation([['\\uD800', '\\uDBFF']], false, false);\n    var peg$e6 = peg$classExpectation([['\\uDC00', '\\uDFFF']], false, false);\n    var peg$e7 = peg$classExpectation([' ', '\\t', '\\r', '\\n'], false, false);\n    var peg$e8 = peg$literalExpectation('.', false);\n    var peg$e9 = peg$literalExpectation('-', false);\n    var peg$e10 = peg$literalExpectation('_', false);\n    var peg$e11 = peg$literalExpectation(':', false);\n    var peg$e12 = peg$literalExpectation(' ', false);\n    var peg$e13 = peg$literalExpectation('\"', false);\n    var peg$e14 = peg$classExpectation(['%', '&', '\"'], true, false);\n    var peg$e15 = peg$literalExpectation(\"'\", false);\n    var peg$e16 = peg$classExpectation(['%', '&', \"'\"], true, false);\n    var peg$e17 = peg$classExpectation(['<', '&', '\"'], true, false);\n    var peg$e18 = peg$classExpectation(['<', '&', \"'\"], true, false);\n    var peg$e19 = peg$classExpectation(['\"'], true, false);\n    var peg$e20 = peg$classExpectation([\"'\"], true, false);\n    var peg$e21 = peg$classExpectation(\n        [\n            '-',\n            '(',\n            ')',\n            '+',\n            ',',\n            '.',\n            '/',\n            ':',\n            '=',\n            '?',\n            ';',\n            '!',\n            '*',\n            '#',\n            '@',\n            '$',\n            '_',\n            '%',\n            ' ',\n            '\\r',\n            '\\n',\n            ['a', 'z'],\n            ['A', 'Z'],\n            ['0', '9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e22 = peg$classExpectation(['<', '&'], true, false);\n    var peg$e23 = peg$literalExpectation('<!--', false);\n    var peg$e24 = peg$literalExpectation('--', false);\n    var peg$e25 = peg$literalExpectation('-->', false);\n    var peg$e26 = peg$literalExpectation('<![CDATA[', false);\n    var peg$e27 = peg$literalExpectation(']]>', false);\n    var peg$e28 = peg$literalExpectation('=', false);\n    var peg$e29 = peg$literalExpectation('1.0', false);\n    var peg$e30 = peg$literalExpectation('standalone', false);\n    var peg$e31 = peg$literalExpectation('yes', false);\n    var peg$e32 = peg$literalExpectation('no', false);\n    var peg$e33 = peg$literalExpectation('<', false);\n    var peg$e34 = peg$literalExpectation('>', false);\n    var peg$e35 = peg$literalExpectation('</', false);\n    var peg$e36 = peg$literalExpectation('/>', false);\n    var peg$e37 = peg$classExpectation(\n        [\n            ['A', 'Z'],\n            ['a', 'z'],\n            ['\\xC0', '\\xD6'],\n        ],\n        false,\n        false,\n    );\n    var peg$e38 = peg$classExpectation(\n        [\n            ['\\xD8', '\\xF6'],\n            ['\\xF8', '\\xFF'],\n            ['\\u0100', '\\u0131'],\n        ],\n        false,\n        false,\n    );\n    var peg$e39 = peg$classExpectation(\n        [\n            ['\\u0134', '\\u013E'],\n            ['\\u0141', '\\u0148'],\n            ['\\u014A', '\\u017E'],\n        ],\n        false,\n        false,\n    );\n    var peg$e40 = peg$classExpectation(\n        [\n            ['\\u0180', '\\u01C3'],\n            ['\\u01CD', '\\u01F0'],\n            ['\\u01F4', '\\u01F5'],\n        ],\n        false,\n        false,\n    );\n    var peg$e41 = peg$classExpectation(\n        [\n            ['\\u01FA', '\\u0217'],\n            ['\\u0250', '\\u02A8'],\n            ['\\u02BB', '\\u02C1'],\n        ],\n        false,\n        false,\n    );\n    var peg$e42 = peg$classExpectation(\n        ['\\u0386', ['\\u0388', '\\u038A'], '\\u038C', ['\\u038E', '\\u03A1']],\n        false,\n        false,\n    );\n    var peg$e43 = peg$classExpectation(\n        [['\\u03A3', '\\u03CE'], ['\\u03D0', '\\u03D6'], '\\u03DA', '\\u03DC'],\n        false,\n        false,\n    );\n    var peg$e44 = peg$classExpectation(\n        ['\\u03DE', '\\u03E0', ['\\u03E2', '\\u03F3'], ['\\u0401', '\\u040C']],\n        false,\n        false,\n    );\n    var peg$e45 = peg$classExpectation(\n        [\n            ['\\u040E', '\\u044F'],\n            ['\\u0451', '\\u045C'],\n            ['\\u045E', '\\u0481'],\n        ],\n        false,\n        false,\n    );\n    var peg$e46 = peg$classExpectation(\n        [\n            ['\\u0490', '\\u04C4'],\n            ['\\u04C7', '\\u04C8'],\n            ['\\u04CB', '\\u04CC'],\n        ],\n        false,\n        false,\n    );\n    var peg$e47 = peg$classExpectation(\n        [\n            ['\\u04D0', '\\u04EB'],\n            ['\\u04EE', '\\u04F5'],\n            ['\\u04F8', '\\u04F9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e48 = peg$classExpectation(\n        [['\\u0531', '\\u0556'], '\\u0559', ['\\u0561', '\\u0586']],\n        false,\n        false,\n    );\n    var peg$e49 = peg$classExpectation(\n        [\n            ['\\u05D0', '\\u05EA'],\n            ['\\u05F0', '\\u05F2'],\n            ['\\u0621', '\\u063A'],\n        ],\n        false,\n        false,\n    );\n    var peg$e50 = peg$classExpectation(\n        [\n            ['\\u0641', '\\u064A'],\n            ['\\u0671', '\\u06B7'],\n            ['\\u06BA', '\\u06BE'],\n        ],\n        false,\n        false,\n    );\n    var peg$e51 = peg$classExpectation(\n        [\n            ['\\u06C0', '\\u06CE'],\n            ['\\u06D0', '\\u06D3'],\n            '\\u06D5',\n            ['\\u06E5', '\\u06E6'],\n        ],\n        false,\n        false,\n    );\n    var peg$e52 = peg$classExpectation(\n        [\n            ['\\u0905', '\\u0939'],\n            '\\u093D',\n            ['\\u0958', '\\u0961'],\n            ['\\u0985', '\\u098C'],\n        ],\n        false,\n        false,\n    );\n    var peg$e53 = peg$classExpectation(\n        [\n            ['\\u098F', '\\u0990'],\n            ['\\u0993', '\\u09A8'],\n            ['\\u09AA', '\\u09B0'],\n        ],\n        false,\n        false,\n    );\n    var peg$e54 = peg$classExpectation(\n        [\n            '\\u09B2',\n            ['\\u09B6', '\\u09B9'],\n            ['\\u09DC', '\\u09DD'],\n            ['\\u09DF', '\\u09E1'],\n        ],\n        false,\n        false,\n    );\n    var peg$e55 = peg$classExpectation(\n        [\n            ['\\u09F0', '\\u09F1'],\n            ['\\u0A05', '\\u0A0A'],\n            ['\\u0A0F', '\\u0A10'],\n        ],\n        false,\n        false,\n    );\n    var peg$e56 = peg$classExpectation(\n        [\n            ['\\u0A13', '\\u0A28'],\n            ['\\u0A2A', '\\u0A30'],\n            ['\\u0A32', '\\u0A33'],\n        ],\n        false,\n        false,\n    );\n    var peg$e57 = peg$classExpectation(\n        [\n            ['\\u0A35', '\\u0A36'],\n            ['\\u0A38', '\\u0A39'],\n            ['\\u0A59', '\\u0A5C'],\n        ],\n        false,\n        false,\n    );\n    var peg$e58 = peg$classExpectation(\n        ['\\u0A5E', ['\\u0A72', '\\u0A74'], ['\\u0A85', '\\u0A8B'], '\\u0A8D'],\n        false,\n        false,\n    );\n    var peg$e59 = peg$classExpectation(\n        [\n            ['\\u0A8F', '\\u0A91'],\n            ['\\u0A93', '\\u0AA8'],\n            ['\\u0AAA', '\\u0AB0'],\n        ],\n        false,\n        false,\n    );\n    var peg$e60 = peg$classExpectation(\n        [['\\u0AB2', '\\u0AB3'], ['\\u0AB5', '\\u0AB9'], '\\u0ABD', '\\u0AE0'],\n        false,\n        false,\n    );\n    var peg$e61 = peg$classExpectation(\n        [\n            ['\\u0B05', '\\u0B0C'],\n            ['\\u0B0F', '\\u0B10'],\n            ['\\u0B13', '\\u0B28'],\n        ],\n        false,\n        false,\n    );\n    var peg$e62 = peg$classExpectation(\n        [\n            ['\\u0B2A', '\\u0B30'],\n            ['\\u0B32', '\\u0B33'],\n            ['\\u0B36', '\\u0B39'],\n        ],\n        false,\n        false,\n    );\n    var peg$e63 = peg$classExpectation(\n        ['\\u0B3D', ['\\u0B5C', '\\u0B5D'], ['\\u0B5F', '\\u0B61']],\n        false,\n        false,\n    );\n    var peg$e64 = peg$classExpectation(\n        [\n            ['\\u0B85', '\\u0B8A'],\n            ['\\u0B8E', '\\u0B90'],\n            ['\\u0B92', '\\u0B95'],\n        ],\n        false,\n        false,\n    );\n    var peg$e65 = peg$classExpectation(\n        [['\\u0B99', '\\u0B9A'], '\\u0B9C', ['\\u0B9E', '\\u0B9F']],\n        false,\n        false,\n    );\n    var peg$e66 = peg$classExpectation(\n        [\n            ['\\u0BA3', '\\u0BA4'],\n            ['\\u0BA8', '\\u0BAA'],\n            ['\\u0BAE', '\\u0BB5'],\n        ],\n        false,\n        false,\n    );\n    var peg$e67 = peg$classExpectation(\n        [\n            ['\\u0BB7', '\\u0BB9'],\n            ['\\u0C05', '\\u0C0C'],\n            ['\\u0C0E', '\\u0C10'],\n        ],\n        false,\n        false,\n    );\n    var peg$e68 = peg$classExpectation(\n        [\n            ['\\u0C12', '\\u0C28'],\n            ['\\u0C2A', '\\u0C33'],\n            ['\\u0C35', '\\u0C39'],\n        ],\n        false,\n        false,\n    );\n    var peg$e69 = peg$classExpectation(\n        [\n            ['\\u0C60', '\\u0C61'],\n            ['\\u0C85', '\\u0C8C'],\n            ['\\u0C8E', '\\u0C90'],\n        ],\n        false,\n        false,\n    );\n    var peg$e70 = peg$classExpectation(\n        [\n            ['\\u0C92', '\\u0CA8'],\n            ['\\u0CAA', '\\u0CB3'],\n            ['\\u0CB5', '\\u0CB9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e71 = peg$classExpectation(\n        [\n            '\\u0CDE',\n            ['\\u0CE0', '\\u0CE1'],\n            ['\\u0D05', '\\u0D0C'],\n            ['\\u0D0E', '\\u0D10'],\n        ],\n        false,\n        false,\n    );\n    var peg$e72 = peg$classExpectation(\n        [\n            ['\\u0D12', '\\u0D28'],\n            ['\\u0D2A', '\\u0D39'],\n            ['\\u0D60', '\\u0D61'],\n        ],\n        false,\n        false,\n    );\n    var peg$e73 = peg$classExpectation(\n        [\n            ['\\u0E01', '\\u0E2E'],\n            '\\u0E30',\n            ['\\u0E32', '\\u0E33'],\n            ['\\u0E40', '\\u0E45'],\n        ],\n        false,\n        false,\n    );\n    var peg$e74 = peg$classExpectation(\n        [['\\u0E81', '\\u0E82'], '\\u0E84', ['\\u0E87', '\\u0E88'], '\\u0E8A'],\n        false,\n        false,\n    );\n    var peg$e75 = peg$classExpectation(\n        [\n            '\\u0E8D',\n            ['\\u0E94', '\\u0E97'],\n            ['\\u0E99', '\\u0E9F'],\n            ['\\u0EA1', '\\u0EA3'],\n        ],\n        false,\n        false,\n    );\n    var peg$e76 = peg$classExpectation(\n        [\n            '\\u0EA5',\n            '\\u0EA7',\n            ['\\u0EAA', '\\u0EAB'],\n            ['\\u0EAD', '\\u0EAE'],\n            '\\u0EB0',\n        ],\n        false,\n        false,\n    );\n    var peg$e77 = peg$classExpectation(\n        [\n            ['\\u0EB2', '\\u0EB3'],\n            '\\u0EBD',\n            ['\\u0EC0', '\\u0EC4'],\n            ['\\u0F40', '\\u0F47'],\n        ],\n        false,\n        false,\n    );\n    var peg$e78 = peg$classExpectation(\n        [\n            ['\\u0F49', '\\u0F69'],\n            ['\\u10A0', '\\u10C5'],\n            ['\\u10D0', '\\u10F6'],\n            '\\u1100',\n        ],\n        false,\n        false,\n    );\n    var peg$e79 = peg$classExpectation(\n        [\n            ['\\u1102', '\\u1103'],\n            ['\\u1105', '\\u1107'],\n            '\\u1109',\n            ['\\u110B', '\\u110C'],\n        ],\n        false,\n        false,\n    );\n    var peg$e80 = peg$classExpectation(\n        [\n            ['\\u110E', '\\u1112'],\n            '\\u113C',\n            '\\u113E',\n            '\\u1140',\n            '\\u114C',\n            '\\u114E',\n        ],\n        false,\n        false,\n    );\n    var peg$e81 = peg$classExpectation(\n        [\n            '\\u1150',\n            ['\\u1154', '\\u1155'],\n            '\\u1159',\n            ['\\u115F', '\\u1161'],\n            '\\u1163',\n        ],\n        false,\n        false,\n    );\n    var peg$e82 = peg$classExpectation(\n        [\n            '\\u1165',\n            '\\u1167',\n            '\\u1169',\n            ['\\u116D', '\\u116E'],\n            ['\\u1172', '\\u1173'],\n        ],\n        false,\n        false,\n    );\n    var peg$e83 = peg$classExpectation(\n        ['\\u1175', '\\u119E', '\\u11A8', '\\u11AB', ['\\u11AE', '\\u11AF']],\n        false,\n        false,\n    );\n    var peg$e84 = peg$classExpectation(\n        [\n            ['\\u11B7', '\\u11B8'],\n            '\\u11BA',\n            ['\\u11BC', '\\u11C2'],\n            '\\u11EB',\n            '\\u11F0',\n        ],\n        false,\n        false,\n    );\n    var peg$e85 = peg$classExpectation(\n        [\n            '\\u11F9',\n            ['\\u1E00', '\\u1E9B'],\n            ['\\u1EA0', '\\u1EF9'],\n            ['\\u1F00', '\\u1F15'],\n        ],\n        false,\n        false,\n    );\n    var peg$e86 = peg$classExpectation(\n        [\n            ['\\u1F18', '\\u1F1D'],\n            ['\\u1F20', '\\u1F45'],\n            ['\\u1F48', '\\u1F4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e87 = peg$classExpectation(\n        [\n            ['\\u1F50', '\\u1F57'],\n            '\\u1F59',\n            '\\u1F5B',\n            '\\u1F5D',\n            ['\\u1F5F', '\\u1F7D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e88 = peg$classExpectation(\n        [\n            ['\\u1F80', '\\u1FB4'],\n            ['\\u1FB6', '\\u1FBC'],\n            '\\u1FBE',\n            ['\\u1FC2', '\\u1FC4'],\n        ],\n        false,\n        false,\n    );\n    var peg$e89 = peg$classExpectation(\n        [\n            ['\\u1FC6', '\\u1FCC'],\n            ['\\u1FD0', '\\u1FD3'],\n            ['\\u1FD6', '\\u1FDB'],\n        ],\n        false,\n        false,\n    );\n    var peg$e90 = peg$classExpectation(\n        [\n            ['\\u1FE0', '\\u1FEC'],\n            ['\\u1FF2', '\\u1FF4'],\n            ['\\u1FF6', '\\u1FFC'],\n            '\\u2126',\n        ],\n        false,\n        false,\n    );\n    var peg$e91 = peg$classExpectation(\n        [\n            ['\\u212A', '\\u212B'],\n            '\\u212E',\n            ['\\u2180', '\\u2182'],\n            ['\\u3041', '\\u3094'],\n        ],\n        false,\n        false,\n    );\n    var peg$e92 = peg$classExpectation(\n        [\n            ['\\u30A1', '\\u30FA'],\n            ['\\u3105', '\\u312C'],\n            ['\\uAC00', '\\uD7A3'],\n        ],\n        false,\n        false,\n    );\n    var peg$e93 = peg$classExpectation(\n        [['\\u4E00', '\\u9FA5'], '\\u3007', ['\\u3021', '\\u3029']],\n        false,\n        false,\n    );\n    var peg$e94 = peg$classExpectation(\n        [\n            ['\\u0300', '\\u0345'],\n            ['\\u0360', '\\u0361'],\n            ['\\u0483', '\\u0486'],\n        ],\n        false,\n        false,\n    );\n    var peg$e95 = peg$classExpectation(\n        [\n            ['\\u0591', '\\u05A1'],\n            ['\\u05A3', '\\u05B9'],\n            ['\\u05BB', '\\u05BD'],\n            '\\u05BF',\n        ],\n        false,\n        false,\n    );\n    var peg$e96 = peg$classExpectation(\n        [['\\u05C1', '\\u05C2'], '\\u05C4', ['\\u064B', '\\u0652'], '\\u0670'],\n        false,\n        false,\n    );\n    var peg$e97 = peg$classExpectation(\n        [\n            ['\\u06D6', '\\u06DC'],\n            ['\\u06DD', '\\u06DF'],\n            ['\\u06E0', '\\u06E4'],\n        ],\n        false,\n        false,\n    );\n    var peg$e98 = peg$classExpectation(\n        [\n            ['\\u06E7', '\\u06E8'],\n            ['\\u06EA', '\\u06ED'],\n            ['\\u0901', '\\u0903'],\n        ],\n        false,\n        false,\n    );\n    var peg$e99 = peg$classExpectation(\n        ['\\u093C', ['\\u093E', '\\u094C'], '\\u094D', ['\\u0951', '\\u0954']],\n        false,\n        false,\n    );\n    var peg$e100 = peg$classExpectation(\n        [['\\u0962', '\\u0963'], ['\\u0981', '\\u0983'], '\\u09BC', '\\u09BE'],\n        false,\n        false,\n    );\n    var peg$e101 = peg$classExpectation(\n        [\n            '\\u09BF',\n            ['\\u09C0', '\\u09C4'],\n            ['\\u09C7', '\\u09C8'],\n            ['\\u09CB', '\\u09CD'],\n        ],\n        false,\n        false,\n    );\n    var peg$e102 = peg$classExpectation(\n        [\n            '\\u09D7',\n            ['\\u09E2', '\\u09E3'],\n            '\\u0A02',\n            '\\u0A3C',\n            '\\u0A3E',\n            '\\u0A3F',\n        ],\n        false,\n        false,\n    );\n    var peg$e103 = peg$classExpectation(\n        [\n            ['\\u0A40', '\\u0A42'],\n            ['\\u0A47', '\\u0A48'],\n            ['\\u0A4B', '\\u0A4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e104 = peg$classExpectation(\n        [\n            ['\\u0A70', '\\u0A71'],\n            ['\\u0A81', '\\u0A83'],\n            '\\u0ABC',\n            ['\\u0ABE', '\\u0AC5'],\n        ],\n        false,\n        false,\n    );\n    var peg$e105 = peg$classExpectation(\n        [\n            ['\\u0AC7', '\\u0AC9'],\n            ['\\u0ACB', '\\u0ACD'],\n            ['\\u0B01', '\\u0B03'],\n            '\\u0B3C',\n        ],\n        false,\n        false,\n    );\n    var peg$e106 = peg$classExpectation(\n        [\n            ['\\u0B3E', '\\u0B43'],\n            ['\\u0B47', '\\u0B48'],\n            ['\\u0B4B', '\\u0B4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e107 = peg$classExpectation(\n        [\n            ['\\u0B56', '\\u0B57'],\n            ['\\u0B82', '\\u0B83'],\n            ['\\u0BBE', '\\u0BC2'],\n        ],\n        false,\n        false,\n    );\n    var peg$e108 = peg$classExpectation(\n        [\n            ['\\u0BC6', '\\u0BC8'],\n            ['\\u0BCA', '\\u0BCD'],\n            '\\u0BD7',\n            ['\\u0C01', '\\u0C03'],\n        ],\n        false,\n        false,\n    );\n    var peg$e109 = peg$classExpectation(\n        [\n            ['\\u0C3E', '\\u0C44'],\n            ['\\u0C46', '\\u0C48'],\n            ['\\u0C4A', '\\u0C4D'],\n        ],\n        false,\n        false,\n    );\n    var peg$e110 = peg$classExpectation(\n        [\n            ['\\u0C55', '\\u0C56'],\n            ['\\u0C82', '\\u0C83'],\n            ['\\u0CBE', '\\u0CC4'],\n        ],\n        false,\n        false,\n    );\n    var peg$e111 = peg$classExpectation(\n        [\n            ['\\u0CC6', '\\u0CC8'],\n            ['\\u0CCA', '\\u0CCD'],\n            ['\\u0CD5', '\\u0CD6'],\n        ],\n        false,\n        false,\n    );\n    var peg$e112 = peg$classExpectation(\n        [\n            ['\\u0D02', '\\u0D03'],\n            ['\\u0D3E', '\\u0D43'],\n            ['\\u0D46', '\\u0D48'],\n        ],\n        false,\n        false,\n    );\n    var peg$e113 = peg$classExpectation(\n        [['\\u0D4A', '\\u0D4D'], '\\u0D57', '\\u0E31', ['\\u0E34', '\\u0E3A']],\n        false,\n        false,\n    );\n    var peg$e114 = peg$classExpectation(\n        [\n            ['\\u0E47', '\\u0E4E'],\n            '\\u0EB1',\n            ['\\u0EB4', '\\u0EB9'],\n            ['\\u0EBB', '\\u0EBC'],\n        ],\n        false,\n        false,\n    );\n    var peg$e115 = peg$classExpectation(\n        [\n            ['\\u0EC8', '\\u0ECD'],\n            ['\\u0F18', '\\u0F19'],\n            '\\u0F35',\n            '\\u0F37',\n            '\\u0F39',\n        ],\n        false,\n        false,\n    );\n    var peg$e116 = peg$classExpectation(\n        ['\\u0F3E', '\\u0F3F', ['\\u0F71', '\\u0F84'], ['\\u0F86', '\\u0F8B']],\n        false,\n        false,\n    );\n    var peg$e117 = peg$classExpectation(\n        [\n            ['\\u0F90', '\\u0F95'],\n            '\\u0F97',\n            ['\\u0F99', '\\u0FAD'],\n            ['\\u0FB1', '\\u0FB7'],\n        ],\n        false,\n        false,\n    );\n    var peg$e118 = peg$classExpectation(\n        ['\\u0FB9', ['\\u20D0', '\\u20DC'], '\\u20E1', ['\\u302A', '\\u302F']],\n        false,\n        false,\n    );\n    var peg$e119 = peg$classExpectation(['\\u3099', '\\u309A'], false, false);\n    var peg$e120 = peg$classExpectation(\n        [\n            ['0', '9'],\n            ['\\u0660', '\\u0669'],\n            ['\\u06F0', '\\u06F9'],\n        ],\n        false,\n        false,\n    );\n    var peg$e121 = peg$classExpectation(\n        [\n            ['\\u0966', '\\u096F'],\n            ['\\u09E6', '\\u09EF'],\n            ['\\u0A66', '\\u0A6F'],\n        ],\n        false,\n        false,\n    );\n    var peg$e122 = peg$classExpectation(\n        [\n            ['\\u0AE6', '\\u0AEF'],\n            ['\\u0B66', '\\u0B6F'],\n            ['\\u0BE7', '\\u0BEF'],\n        ],\n        false,\n        false,\n    );\n    var peg$e123 = peg$classExpectation(\n        [\n            ['\\u0C66', '\\u0C6F'],\n            ['\\u0CE6', '\\u0CEF'],\n            ['\\u0D66', '\\u0D6F'],\n        ],\n        false,\n        false,\n    );\n    var peg$e124 = peg$classExpectation(\n        [\n            ['\\u0E50', '\\u0E59'],\n            ['\\u0ED0', '\\u0ED9'],\n            ['\\u0F20', '\\u0F29'],\n        ],\n        false,\n        false,\n    );\n    var peg$e125 = peg$classExpectation(\n        ['\\xB7', '\\u02D0', '\\u02D1', '\\u0387', '\\u0640', '\\u0E46'],\n        false,\n        false,\n    );\n    var peg$e126 = peg$classExpectation(\n        ['\\u0EC6', '\\u3005', ['\\u3031', '\\u3035'], ['\\u309D', '\\u309E']],\n        false,\n        false,\n    );\n    var peg$e127 = peg$classExpectation([['\\u30FC', '\\u30FE']], false, false);\n\n    var peg$f0 = function (head, tail) {\n        return [head, ...tail];\n    };\n    var peg$f1 = function (head, tail) {\n        return [head, ...tail];\n    };\n    var peg$f2 = function (vals) {\n        return clumpStrings(vals);\n    };\n    var peg$f3 = function (vals) {\n        return clumpStrings(vals);\n    };\n    var peg$f4 = function (value) {\n        return value\n            ? {\n                  node: 'text',\n                  value,\n              }\n            : null;\n    };\n    var peg$f5 = function (value) {\n        return {\n            node: 'comment',\n            value: value.join(''),\n        };\n    };\n    var peg$f6 = function (value) {\n        return {\n            node: 'text',\n            value,\n        };\n    };\n    var peg$f7 = function (start, c) {\n        start.content = c;\n        return start;\n    };\n    var peg$f8 = function (name, attr) {\n        return {\n            node: processTag(name, attr),\n            ...convertAttr(attr),\n        };\n    };\n    var peg$f9 = function (name) {\n        return {\n            type: 'attribute',\n            name,\n            value: 'true',\n            loc: location(),\n        };\n    };\n    var peg$f10 = function (name, value) {\n        return {\n            type: 'attribute',\n            name,\n            value,\n            loc: location(),\n        };\n    };\n    var peg$f11 = function (n) {\n        names.push(n);\n        return n;\n    };\n    var peg$f12 = function (n) {\n        const other = names.pop();\n        if (other === n) {\n            return true;\n        }\n        const loc = location();\n        loc.start.offset -= n.length;\n        loc.start.column -= n.length;\n        error(`Expected end tag \"${other}\" but got \"${n}\"`, loc);\n    };\n    var peg$f13 = function (c1, content) {\n        const res = [];\n        if (c1) {\n            res.push(c1);\n        }\n        for (const c of content) {\n            res.push(c[0]);\n            if (c[1]) {\n                res.push(c[1]);\n            }\n        }\n        return res;\n    };\n    var peg$f14 = function (name, attr) {\n        return {\n            node: name,\n            ...convertAttr(attr),\n        };\n    };\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n\n    var peg$result;\n\n    if ('startRule' in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\n                'Can\\'t start parsing from rule \"' + options.startRule + '\".',\n            );\n        }\n\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function offset() {\n        return peg$savedPos;\n    }\n\n    function range() {\n        return {\n            source: peg$source,\n            start: peg$savedPos,\n            end: peg$currPos,\n        };\n    }\n\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n        location =\n            location !== undefined\n                ? location\n                : peg$computeLocation(peg$savedPos, peg$currPos);\n\n        throw peg$buildStructuredError(\n            [peg$otherExpectation(description)],\n            input.substring(peg$savedPos, peg$currPos),\n            location,\n        );\n    }\n\n    function error(message, location) {\n        location =\n            location !== undefined\n                ? location\n                : peg$computeLocation(peg$savedPos, peg$currPos);\n\n        throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n        return { type: 'literal', text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return {\n            type: 'class',\n            parts: parts,\n            inverted: inverted,\n            ignoreCase: ignoreCase,\n        };\n    }\n\n    function peg$anyExpectation() {\n        return { type: 'any' };\n    }\n\n    function peg$endExpectation() {\n        return { type: 'end' };\n    }\n\n    function peg$otherExpectation(description) {\n        return { type: 'other', description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n\n        if (details) {\n            return details;\n        } else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column,\n            };\n\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                } else {\n                    details.column++;\n                }\n\n                p++;\n            }\n\n            peg$posDetailsCache[pos] = details;\n\n            return details;\n        }\n    }\n\n    function peg$computeLocation(startPos, endPos, offset) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n\n        var res = {\n            source: peg$source,\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column,\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column,\n            },\n        };\n        if (offset && peg$source && typeof peg$source.offset === 'function') {\n            res.start = peg$source.offset(res.start);\n            res.end = peg$source.offset(res.end);\n        }\n        return res;\n    }\n\n    function peg$fail(expected) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n\n        peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n        return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n        return new peg$SyntaxError(\n            peg$SyntaxError.buildMessage(expected, found),\n            expected,\n            found,\n            location,\n        );\n    }\n\n    function peg$parsedocument() {\n        var s0;\n\n        s0 = peg$parsecontent();\n\n        return s0;\n    }\n\n    function peg$parseChar() {\n        var s0, s1, s2, s3;\n\n        if (input.charCodeAt(peg$currPos) === 9) {\n            s0 = peg$c0;\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 10) {\n                s0 = peg$c1;\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e1);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 13) {\n                    s0 = peg$c2;\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e2);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r0.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e3);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r1.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e4);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            s1 = peg$currPos;\n                            if (peg$r2.test(input.charAt(peg$currPos))) {\n                                s2 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                            } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e5);\n                                }\n                            }\n                            if (s2 !== peg$FAILED) {\n                                if (peg$r3.test(input.charAt(peg$currPos))) {\n                                    s3 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s3 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e6);\n                                    }\n                                }\n                                if (s3 !== peg$FAILED) {\n                                    s2 = [s2, s3];\n                                    s1 = s2;\n                                } else {\n                                    peg$currPos = s1;\n                                    s1 = peg$FAILED;\n                                }\n                            } else {\n                                peg$currPos = s1;\n                                s1 = peg$FAILED;\n                            }\n                            if (s1 !== peg$FAILED) {\n                                s0 = input.substring(s0, peg$currPos);\n                            } else {\n                                s0 = s1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseS() {\n        var s0, s1, s2;\n\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e7);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                if (peg$r4.test(input.charAt(peg$currPos))) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e7);\n                    }\n                }\n            }\n        } else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        } else {\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNameChar() {\n        var s0;\n\n        s0 = peg$parseLetter();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseDigit();\n            if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 46) {\n                    s0 = peg$c3;\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e8);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 45) {\n                        s0 = peg$c4;\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e9);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 95) {\n                            s0 = peg$c5;\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e10);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 58) {\n                                s0 = peg$c6;\n                                peg$currPos++;\n                            } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e11);\n                                }\n                            }\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parseCombiningChar();\n                                if (s0 === peg$FAILED) {\n                                    s0 = peg$parseExtender();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseName() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseLetter();\n        if (s2 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 95) {\n                s2 = peg$c5;\n                peg$currPos++;\n            } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e10);\n                }\n            }\n            if (s2 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 58) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e11);\n                    }\n                }\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseNameChar();\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parseNameChar();\n            }\n            s2 = [s2, s3];\n            s1 = s2;\n        } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        } else {\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNames() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 32) {\n                s4 = peg$c7;\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e12);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseName();\n                if (s5 !== peg$FAILED) {\n                    s3 = s5;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 32) {\n                    s4 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e12);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = peg$parseName();\n                    if (s5 !== peg$FAILED) {\n                        s3 = s5;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            }\n            peg$savedPos = s0;\n            s0 = peg$f0(s1, s2);\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNmtoken() {\n        var s0, s1, s2;\n\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseNameChar();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parseNameChar();\n            }\n        } else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        } else {\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseNmtokens() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$parseNmtoken();\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 32) {\n                s4 = peg$c7;\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e12);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseNmtoken();\n                if (s5 !== peg$FAILED) {\n                    s3 = s5;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 32) {\n                    s4 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e12);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = peg$parseNmtoken();\n                    if (s5 !== peg$FAILED) {\n                        s3 = s5;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            }\n            peg$savedPos = s0;\n            s0 = peg$f1(s1, s2);\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseEntityValue() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            if (peg$r5.test(input.charAt(peg$currPos))) {\n                s3 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e14);\n                }\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                if (peg$r5.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e14);\n                    }\n                }\n            }\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f2(s2);\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                if (peg$r6.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e16);\n                    }\n                }\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    if (peg$r6.test(input.charAt(peg$currPos))) {\n                        s3 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e16);\n                        }\n                    }\n                }\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f3(s2);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseAttValue() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            if (peg$r7.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e17);\n                }\n            }\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                if (peg$r7.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e17);\n                    }\n                }\n            }\n            s2 = input.substring(s2, peg$currPos);\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                s0 = s2;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = [];\n                if (peg$r8.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e18);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$r8.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e18);\n                        }\n                    }\n                }\n                s2 = input.substring(s2, peg$currPos);\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s0 = s2;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseSystemLiteral() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            if (peg$r9.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e19);\n                }\n            }\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                if (peg$r9.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e19);\n                    }\n                }\n            }\n            s2 = input.substring(s2, peg$currPos);\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                s0 = s2;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = [];\n                if (peg$r10.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e20);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$r10.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e20);\n                        }\n                    }\n                }\n                s2 = input.substring(s2, peg$currPos);\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s0 = s2;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parsePubidLiteral() {\n        var s0, s1, s2, s3, s4;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c8;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            s4 = peg$parsePubidChar();\n            if (s4 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s4 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n            }\n            while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parsePubidChar();\n                if (s4 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c9;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e15);\n                        }\n                    }\n                }\n            }\n            s2 = input.substring(s2, peg$currPos);\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c8;\n                peg$currPos++;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e13);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                s0 = s2;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c9;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e15);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = [];\n                s4 = peg$parsePubidChar();\n                if (s4 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                        s4 = peg$c8;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e13);\n                        }\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsePubidChar();\n                    if (s4 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 34) {\n                            s4 = peg$c8;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e13);\n                            }\n                        }\n                    }\n                }\n                s2 = input.substring(s2, peg$currPos);\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c9;\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e15);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s0 = s2;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parsePubidChar() {\n        var s0;\n\n        if (peg$r11.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e21);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCharData() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseCDEnd();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n            s4 = undefined;\n        } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n            if (peg$r12.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e22);\n                }\n            }\n            if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parseCDEnd();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n                s4 = undefined;\n            } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n                if (peg$r12.test(input.charAt(peg$currPos))) {\n                    s5 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e22);\n                    }\n                }\n                if (s5 !== peg$FAILED) {\n                    s4 = [s4, s5];\n                    s3 = s4;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n        }\n        s1 = input.substring(s1, peg$currPos);\n        peg$savedPos = s0;\n        s1 = peg$f4(s1);\n        s0 = s1;\n\n        return s0;\n    }\n\n    function peg$parseComment() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c10) {\n            s1 = peg$c10;\n            peg$currPos += 4;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            if (input.substr(peg$currPos, 2) === peg$c11) {\n                s5 = peg$c11;\n                peg$currPos += 2;\n            } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e24);\n                }\n            }\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n                s4 = undefined;\n            } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseChar();\n                if (s5 !== peg$FAILED) {\n                    s3 = s5;\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                s4 = peg$currPos;\n                peg$silentFails++;\n                if (input.substr(peg$currPos, 2) === peg$c11) {\n                    s5 = peg$c11;\n                    peg$currPos += 2;\n                } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e24);\n                    }\n                }\n                peg$silentFails--;\n                if (s5 === peg$FAILED) {\n                    s4 = undefined;\n                } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = peg$parseChar();\n                    if (s5 !== peg$FAILED) {\n                        s3 = s5;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n            }\n            if (input.substr(peg$currPos, 3) === peg$c12) {\n                s3 = peg$c12;\n                peg$currPos += 3;\n            } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e25);\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f5(s2);\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseCDSect() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        s1 = peg$parseCDStart();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseCData();\n            s3 = peg$parseCDEnd();\n            if (s3 !== peg$FAILED) {\n                s1 = [s1, s2, s3];\n                s0 = s1;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseCDStart() {\n        var s0;\n\n        if (input.substr(peg$currPos, 9) === peg$c13) {\n            s0 = peg$c13;\n            peg$currPos += 9;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e26);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCData() {\n        var s0, s1, s2, s3;\n\n        s0 = [];\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseCDEnd();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n            s2 = undefined;\n        } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parseChar();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$currPos;\n            s2 = peg$currPos;\n            peg$silentFails++;\n            s3 = peg$parseCDEnd();\n            peg$silentFails--;\n            if (s3 === peg$FAILED) {\n                s2 = undefined;\n            } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseChar();\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCDEnd() {\n        var s0;\n\n        if (input.substr(peg$currPos, 3) === peg$c14) {\n            s0 = peg$c14;\n            peg$currPos += 3;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e27);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseEq() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        s1 = peg$parseS();\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c15;\n            peg$currPos++;\n        } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e28);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parseS();\n            if (s3 === peg$FAILED) {\n                s3 = null;\n            }\n            s1 = [s1, s2, s3];\n            s0 = s1;\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseVersionNum() {\n        var s0;\n\n        if (input.substr(peg$currPos, 3) === peg$c16) {\n            s0 = peg$c16;\n            peg$currPos += 3;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e29);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseMisc() {\n        var s0, s1;\n\n        s0 = peg$parseComment();\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseS();\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$f6(s1);\n            }\n            s0 = s1;\n        }\n\n        return s0;\n    }\n\n    function peg$parseSDDecl() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n\n        s0 = peg$currPos;\n        s1 = peg$parseS();\n        if (s1 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 10) === peg$c17) {\n                s2 = peg$c17;\n                peg$currPos += 10;\n            } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e30);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseEq();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s5 = peg$c9;\n                        peg$currPos++;\n                    } else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e15);\n                        }\n                    }\n                    if (s5 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c18) {\n                            s6 = peg$c18;\n                            peg$currPos += 3;\n                        } else {\n                            s6 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e31);\n                            }\n                        }\n                        if (s6 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 2) === peg$c19) {\n                                s6 = peg$c19;\n                                peg$currPos += 2;\n                            } else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e32);\n                                }\n                            }\n                        }\n                        if (s6 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 39) {\n                                s7 = peg$c9;\n                                peg$currPos++;\n                            } else {\n                                s7 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e15);\n                                }\n                            }\n                            if (s7 !== peg$FAILED) {\n                                s5 = [s5, s6, s7];\n                                s4 = s5;\n                            } else {\n                                peg$currPos = s4;\n                                s4 = peg$FAILED;\n                            }\n                        } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                    }\n                    if (s4 === peg$FAILED) {\n                        s4 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 34) {\n                            s5 = peg$c8;\n                            peg$currPos++;\n                        } else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e13);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 3) === peg$c18) {\n                                s6 = peg$c18;\n                                peg$currPos += 3;\n                            } else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e31);\n                                }\n                            }\n                            if (s6 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 2) === peg$c19) {\n                                    s6 = peg$c19;\n                                    peg$currPos += 2;\n                                } else {\n                                    s6 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e32);\n                                    }\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 34) {\n                                    s7 = peg$c8;\n                                    peg$currPos++;\n                                } else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e13);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s5 = [s5, s6, s7];\n                                    s4 = s5;\n                                } else {\n                                    peg$currPos = s4;\n                                    s4 = peg$FAILED;\n                                }\n                            } else {\n                                peg$currPos = s4;\n                                s4 = peg$FAILED;\n                            }\n                        } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s1 = [s1, s2, s3, s4];\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseelement() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$parseEmptyElemTag();\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseSTag();\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsecontent();\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parseETag();\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f7(s1, s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseSTag() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseS();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseS();\n        }\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s2 = peg$c20;\n            peg$currPos++;\n        } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e33);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsepushName();\n            if (s3 !== peg$FAILED) {\n                s4 = [];\n                s5 = peg$currPos;\n                s6 = peg$parseS();\n                if (s6 !== peg$FAILED) {\n                    s7 = peg$parseAttribute();\n                    if (s7 === peg$FAILED) {\n                        s7 = peg$parseEmptyAttribute();\n                    }\n                    if (s7 !== peg$FAILED) {\n                        s5 = s7;\n                    } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    s5 = peg$currPos;\n                    s6 = peg$parseS();\n                    if (s6 !== peg$FAILED) {\n                        s7 = peg$parseAttribute();\n                        if (s7 === peg$FAILED) {\n                            s7 = peg$parseEmptyAttribute();\n                        }\n                        if (s7 !== peg$FAILED) {\n                            s5 = s7;\n                        } else {\n                            peg$currPos = s5;\n                            s5 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                    }\n                }\n                s5 = peg$parseS();\n                if (s5 === peg$FAILED) {\n                    s5 = null;\n                }\n                if (input.charCodeAt(peg$currPos) === 62) {\n                    s6 = peg$c21;\n                    peg$currPos++;\n                } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e34);\n                    }\n                }\n                if (s6 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f8(s3, s4);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseEmptyAttribute() {\n        var s0, s1;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f9(s1);\n        }\n        s0 = s1;\n\n        return s0;\n    }\n\n    function peg$parseAttribute() {\n        var s0, s1, s2, s3;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseEq();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseAttValue();\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f10(s1, s3);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseETag() {\n        var s0, s1, s2, s3, s4, s5, s6;\n\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c22) {\n            s1 = peg$c22;\n            peg$currPos += 2;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e35);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepopName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseS();\n                if (s3 === peg$FAILED) {\n                    s3 = null;\n                }\n                if (input.charCodeAt(peg$currPos) === 62) {\n                    s4 = peg$c21;\n                    peg$currPos++;\n                } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e34);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s5 = [];\n                    s6 = peg$parseS();\n                    while (s6 !== peg$FAILED) {\n                        s5.push(s6);\n                        s6 = peg$parseS();\n                    }\n                    s1 = [s1, s2, s3, s4, s5];\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parsepushName() {\n        var s0, s1;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f11(s1);\n        }\n        s0 = s1;\n\n        return s0;\n    }\n\n    function peg$parsepopName() {\n        var s0, s1, s2;\n\n        s0 = peg$currPos;\n        s1 = peg$parseName();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s2 = peg$f12(s1);\n            if (s2) {\n                s2 = undefined;\n            } else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s0 = s1;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parsecontent() {\n        var s0, s1, s2, s3, s4, s5;\n\n        s0 = peg$currPos;\n        s1 = peg$parseCharData();\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseelement();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parseCDSect();\n            if (s4 === peg$FAILED) {\n                s4 = peg$parseComment();\n            }\n        }\n        if (s4 !== peg$FAILED) {\n            s5 = peg$parseCharData();\n            s4 = [s4, s5];\n            s3 = s4;\n        } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$parseelement();\n            if (s4 === peg$FAILED) {\n                s4 = peg$parseCDSect();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parseComment();\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parseCharData();\n                s4 = [s4, s5];\n                s3 = s4;\n            } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f13(s1, s2);\n\n        return s0;\n    }\n\n    function peg$parseEmptyElemTag() {\n        var s0, s1, s2, s3, s4, s5, s6;\n\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s1 = peg$c20;\n            peg$currPos++;\n        } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e33);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseName();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$currPos;\n                s5 = peg$parseS();\n                if (s5 !== peg$FAILED) {\n                    s6 = peg$parseAttribute();\n                    if (s6 !== peg$FAILED) {\n                        s4 = s6;\n                    } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$currPos;\n                    s5 = peg$parseS();\n                    if (s5 !== peg$FAILED) {\n                        s6 = peg$parseAttribute();\n                        if (s6 !== peg$FAILED) {\n                            s4 = s6;\n                        } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                    }\n                }\n                s4 = peg$parseS();\n                if (s4 === peg$FAILED) {\n                    s4 = null;\n                }\n                if (input.substr(peg$currPos, 2) === peg$c23) {\n                    s5 = peg$c23;\n                    peg$currPos += 2;\n                } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e36);\n                    }\n                }\n                if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f14(s2, s3);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n\n        return s0;\n    }\n\n    function peg$parseLetter() {\n        var s0;\n\n        s0 = peg$parseBaseChar();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseIdeographic();\n        }\n\n        return s0;\n    }\n\n    function peg$parseBaseChar() {\n        var s0;\n\n        if (peg$r13.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e37);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r14.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e38);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r15.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e39);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r16.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e40);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r17.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e41);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            if (peg$r18.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                            } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e42);\n                                }\n                            }\n                            if (s0 === peg$FAILED) {\n                                if (peg$r19.test(input.charAt(peg$currPos))) {\n                                    s0 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e43);\n                                    }\n                                }\n                                if (s0 === peg$FAILED) {\n                                    if (\n                                        peg$r20.test(input.charAt(peg$currPos))\n                                    ) {\n                                        s0 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                    } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$e44);\n                                        }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                        if (\n                                            peg$r21.test(\n                                                input.charAt(peg$currPos),\n                                            )\n                                        ) {\n                                            s0 = input.charAt(peg$currPos);\n                                            peg$currPos++;\n                                        } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$e45);\n                                            }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                            if (\n                                                peg$r22.test(\n                                                    input.charAt(peg$currPos),\n                                                )\n                                            ) {\n                                                s0 = input.charAt(peg$currPos);\n                                                peg$currPos++;\n                                            } else {\n                                                s0 = peg$FAILED;\n                                                if (peg$silentFails === 0) {\n                                                    peg$fail(peg$e46);\n                                                }\n                                            }\n                                            if (s0 === peg$FAILED) {\n                                                if (\n                                                    peg$r23.test(\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        ),\n                                                    )\n                                                ) {\n                                                    s0 =\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        );\n                                                    peg$currPos++;\n                                                } else {\n                                                    s0 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$e47);\n                                                    }\n                                                }\n                                                if (s0 === peg$FAILED) {\n                                                    if (\n                                                        peg$r24.test(\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            ),\n                                                        )\n                                                    ) {\n                                                        s0 =\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            );\n                                                        peg$currPos++;\n                                                    } else {\n                                                        s0 = peg$FAILED;\n                                                        if (\n                                                            peg$silentFails ===\n                                                            0\n                                                        ) {\n                                                            peg$fail(peg$e48);\n                                                        }\n                                                    }\n                                                    if (s0 === peg$FAILED) {\n                                                        if (\n                                                            peg$r25.test(\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                ),\n                                                            )\n                                                        ) {\n                                                            s0 =\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                );\n                                                            peg$currPos++;\n                                                        } else {\n                                                            s0 = peg$FAILED;\n                                                            if (\n                                                                peg$silentFails ===\n                                                                0\n                                                            ) {\n                                                                peg$fail(\n                                                                    peg$e49,\n                                                                );\n                                                            }\n                                                        }\n                                                        if (s0 === peg$FAILED) {\n                                                            if (\n                                                                peg$r26.test(\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    ),\n                                                                )\n                                                            ) {\n                                                                s0 =\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    );\n                                                                peg$currPos++;\n                                                            } else {\n                                                                s0 = peg$FAILED;\n                                                                if (\n                                                                    peg$silentFails ===\n                                                                    0\n                                                                ) {\n                                                                    peg$fail(\n                                                                        peg$e50,\n                                                                    );\n                                                                }\n                                                            }\n                                                            if (\n                                                                s0 ===\n                                                                peg$FAILED\n                                                            ) {\n                                                                if (\n                                                                    peg$r27.test(\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        ),\n                                                                    )\n                                                                ) {\n                                                                    s0 =\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        );\n                                                                    peg$currPos++;\n                                                                } else {\n                                                                    s0 =\n                                                                        peg$FAILED;\n                                                                    if (\n                                                                        peg$silentFails ===\n                                                                        0\n                                                                    ) {\n                                                                        peg$fail(\n                                                                            peg$e51,\n                                                                        );\n                                                                    }\n                                                                }\n                                                                if (\n                                                                    s0 ===\n                                                                    peg$FAILED\n                                                                ) {\n                                                                    if (\n                                                                        peg$r28.test(\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            ),\n                                                                        )\n                                                                    ) {\n                                                                        s0 =\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            );\n                                                                        peg$currPos++;\n                                                                    } else {\n                                                                        s0 =\n                                                                            peg$FAILED;\n                                                                        if (\n                                                                            peg$silentFails ===\n                                                                            0\n                                                                        ) {\n                                                                            peg$fail(\n                                                                                peg$e52,\n                                                                            );\n                                                                        }\n                                                                    }\n                                                                    if (\n                                                                        s0 ===\n                                                                        peg$FAILED\n                                                                    ) {\n                                                                        if (\n                                                                            peg$r29.test(\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                ),\n                                                                            )\n                                                                        ) {\n                                                                            s0 =\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                );\n                                                                            peg$currPos++;\n                                                                        } else {\n                                                                            s0 =\n                                                                                peg$FAILED;\n                                                                            if (\n                                                                                peg$silentFails ===\n                                                                                0\n                                                                            ) {\n                                                                                peg$fail(\n                                                                                    peg$e53,\n                                                                                );\n                                                                            }\n                                                                        }\n                                                                        if (\n                                                                            s0 ===\n                                                                            peg$FAILED\n                                                                        ) {\n                                                                            if (\n                                                                                peg$r30.test(\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    ),\n                                                                                )\n                                                                            ) {\n                                                                                s0 =\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    );\n                                                                                peg$currPos++;\n                                                                            } else {\n                                                                                s0 =\n                                                                                    peg$FAILED;\n                                                                                if (\n                                                                                    peg$silentFails ===\n                                                                                    0\n                                                                                ) {\n                                                                                    peg$fail(\n                                                                                        peg$e54,\n                                                                                    );\n                                                                                }\n                                                                            }\n                                                                            if (\n                                                                                s0 ===\n                                                                                peg$FAILED\n                                                                            ) {\n                                                                                if (\n                                                                                    peg$r31.test(\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        ),\n                                                                                    )\n                                                                                ) {\n                                                                                    s0 =\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        );\n                                                                                    peg$currPos++;\n                                                                                } else {\n                                                                                    s0 =\n                                                                                        peg$FAILED;\n                                                                                    if (\n                                                                                        peg$silentFails ===\n                                                                                        0\n                                                                                    ) {\n                                                                                        peg$fail(\n                                                                                            peg$e55,\n                                                                                        );\n                                                                                    }\n                                                                                }\n                                                                                if (\n                                                                                    s0 ===\n                                                                                    peg$FAILED\n                                                                                ) {\n                                                                                    if (\n                                                                                        peg$r32.test(\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            ),\n                                                                                        )\n                                                                                    ) {\n                                                                                        s0 =\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            );\n                                                                                        peg$currPos++;\n                                                                                    } else {\n                                                                                        s0 =\n                                                                                            peg$FAILED;\n                                                                                        if (\n                                                                                            peg$silentFails ===\n                                                                                            0\n                                                                                        ) {\n                                                                                            peg$fail(\n                                                                                                peg$e56,\n                                                                                            );\n                                                                                        }\n                                                                                    }\n                                                                                    if (\n                                                                                        s0 ===\n                                                                                        peg$FAILED\n                                                                                    ) {\n                                                                                        if (\n                                                                                            peg$r33.test(\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                ),\n                                                                                            )\n                                                                                        ) {\n                                                                                            s0 =\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                );\n                                                                                            peg$currPos++;\n                                                                                        } else {\n                                                                                            s0 =\n                                                                                                peg$FAILED;\n                                                                                            if (\n                                                                                                peg$silentFails ===\n                                                                                                0\n                                                                                            ) {\n                                                                                                peg$fail(\n                                                                                                    peg$e57,\n                                                                                                );\n                                                                                            }\n                                                                                        }\n                                                                                        if (\n                                                                                            s0 ===\n                                                                                            peg$FAILED\n                                                                                        ) {\n                                                                                            if (\n                                                                                                peg$r34.test(\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    ),\n                                                                                                )\n                                                                                            ) {\n                                                                                                s0 =\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    );\n                                                                                                peg$currPos++;\n                                                                                            } else {\n                                                                                                s0 =\n                                                                                                    peg$FAILED;\n                                                                                                if (\n                                                                                                    peg$silentFails ===\n                                                                                                    0\n                                                                                                ) {\n                                                                                                    peg$fail(\n                                                                                                        peg$e58,\n                                                                                                    );\n                                                                                                }\n                                                                                            }\n                                                                                            if (\n                                                                                                s0 ===\n                                                                                                peg$FAILED\n                                                                                            ) {\n                                                                                                if (\n                                                                                                    peg$r35.test(\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        ),\n                                                                                                    )\n                                                                                                ) {\n                                                                                                    s0 =\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        );\n                                                                                                    peg$currPos++;\n                                                                                                } else {\n                                                                                                    s0 =\n                                                                                                        peg$FAILED;\n                                                                                                    if (\n                                                                                                        peg$silentFails ===\n                                                                                                        0\n                                                                                                    ) {\n                                                                                                        peg$fail(\n                                                                                                            peg$e59,\n                                                                                                        );\n                                                                                                    }\n                                                                                                }\n                                                                                                if (\n                                                                                                    s0 ===\n                                                                                                    peg$FAILED\n                                                                                                ) {\n                                                                                                    if (\n                                                                                                        peg$r36.test(\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            ),\n                                                                                                        )\n                                                                                                    ) {\n                                                                                                        s0 =\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            );\n                                                                                                        peg$currPos++;\n                                                                                                    } else {\n                                                                                                        s0 =\n                                                                                                            peg$FAILED;\n                                                                                                        if (\n                                                                                                            peg$silentFails ===\n                                                                                                            0\n                                                                                                        ) {\n                                                                                                            peg$fail(\n                                                                                                                peg$e60,\n                                                                                                            );\n                                                                                                        }\n                                                                                                    }\n                                                                                                    if (\n                                                                                                        s0 ===\n                                                                                                        peg$FAILED\n                                                                                                    ) {\n                                                                                                        if (\n                                                                                                            peg$r37.test(\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                ),\n                                                                                                            )\n                                                                                                        ) {\n                                                                                                            s0 =\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                );\n                                                                                                            peg$currPos++;\n                                                                                                        } else {\n                                                                                                            s0 =\n                                                                                                                peg$FAILED;\n                                                                                                            if (\n                                                                                                                peg$silentFails ===\n                                                                                                                0\n                                                                                                            ) {\n                                                                                                                peg$fail(\n                                                                                                                    peg$e61,\n                                                                                                                );\n                                                                                                            }\n                                                                                                        }\n                                                                                                        if (\n                                                                                                            s0 ===\n                                                                                                            peg$FAILED\n                                                                                                        ) {\n                                                                                                            if (\n                                                                                                                peg$r38.test(\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    ),\n                                                                                                                )\n                                                                                                            ) {\n                                                                                                                s0 =\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    );\n                                                                                                                peg$currPos++;\n                                                                                                            } else {\n                                                                                                                s0 =\n                                                                                                                    peg$FAILED;\n                                                                                                                if (\n                                                                                                                    peg$silentFails ===\n                                                                                                                    0\n                                                                                                                ) {\n                                                                                                                    peg$fail(\n                                                                                                                        peg$e62,\n                                                                                                                    );\n                                                                                                                }\n                                                                                                            }\n                                                                                                            if (\n                                                                                                                s0 ===\n                                                                                                                peg$FAILED\n                                                                                                            ) {\n                                                                                                                if (\n                                                                                                                    peg$r39.test(\n                                                                                                                        input.charAt(\n                                                                                                                            peg$currPos,\n                                                                                                                        ),\n                                                                                                                    )\n                                                                                                                ) {\n                                                                                                                    s0 =\n                                                                                                                        input.charAt(\n                                                                                                                            peg$currPos,\n                                                                                                                        );\n                                                                                                                    peg$currPos++;\n                                                                                                                } else {\n                                                                                                                    s0 =\n                                                                                                                        peg$FAILED;\n                                                                                                                    if (\n                                                                                                                        peg$silentFails ===\n                                                                                                                        0\n                                                                                                                    ) {\n                                                                                                                        peg$fail(\n                                                                                                                            peg$e63,\n                                                                                                                        );\n                                                                                                                    }\n                                                                                                                }\n                                                                                                                if (\n                                                                                                                    s0 ===\n                                                                                                                    peg$FAILED\n                                                                                                                ) {\n                                                                                                                    if (\n                                                                                                                        peg$r40.test(\n                                                                                                                            input.charAt(\n                                                                                                                                peg$currPos,\n                                                                                                                            ),\n                                                                                                                        )\n                                                                                                                    ) {\n                                                                                                                        s0 =\n                                                                                                                            input.charAt(\n                                                                                                                                peg$currPos,\n                                                                                                                            );\n                                                                                                                        peg$currPos++;\n                                                                                                                    } else {\n                                                                                                                        s0 =\n                                                                                                                            peg$FAILED;\n                                                                                                                        if (\n                                                                                                                            peg$silentFails ===\n                                                                                                                            0\n                                                                                                                        ) {\n                                                                                                                            peg$fail(\n                                                                                                                                peg$e64,\n                                                                                                                            );\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    if (\n                                                                                                                        s0 ===\n                                                                                                                        peg$FAILED\n                                                                                                                    ) {\n                                                                                                                        if (\n                                                                                                                            peg$r41.test(\n                                                                                                                                input.charAt(\n                                                                                                                                    peg$currPos,\n                                                                                                                                ),\n                                                                                                                            )\n                                                                                                                        ) {\n                                                                                                                            s0 =\n                                                                                                                                input.charAt(\n                                                                                                                                    peg$currPos,\n                                                                                                                                );\n                                                                                                                            peg$currPos++;\n                                                                                                                        } else {\n                                                                                                                            s0 =\n                                                                                                                                peg$FAILED;\n                                                                                                                            if (\n                                                                                                                                peg$silentFails ===\n                                                                                                                                0\n                                                                                                                            ) {\n                                                                                                                                peg$fail(\n                                                                                                                                    peg$e65,\n                                                                                                                                );\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                        if (\n                                                                                                                            s0 ===\n                                                                                                                            peg$FAILED\n                                                                                                                        ) {\n                                                                                                                            if (\n                                                                                                                                peg$r42.test(\n                                                                                                                                    input.charAt(\n                                                                                                                                        peg$currPos,\n                                                                                                                                    ),\n                                                                                                                                )\n                                                                                                                            ) {\n                                                                                                                                s0 =\n                                                                                                                                    input.charAt(\n                                                                                                                                        peg$currPos,\n                                                                                                                                    );\n                                                                                                                                peg$currPos++;\n                                                                                                                            } else {\n                                                                                                                                s0 =\n                                                                                                                                    peg$FAILED;\n                                                                                                                                if (\n                                                                                                                                    peg$silentFails ===\n                                                                                                                                    0\n                                                                                                                                ) {\n                                                                                                                                    peg$fail(\n                                                                                                                                        peg$e66,\n                                                                                                                                    );\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                            if (\n                                                                                                                                s0 ===\n                                                                                                                                peg$FAILED\n                                                                                                                            ) {\n                                                                                                                                if (\n                                                                                                                                    peg$r43.test(\n                                                                                                                                        input.charAt(\n                                                                                                                                            peg$currPos,\n                                                                                                                                        ),\n                                                                                                                                    )\n                                                                                                                                ) {\n                                                                                                                                    s0 =\n                                                                                                                                        input.charAt(\n                                                                                                                                            peg$currPos,\n                                                                                                                                        );\n                                                                                                                                    peg$currPos++;\n                                                                                                                                } else {\n                                                                                                                                    s0 =\n                                                                                                                                        peg$FAILED;\n                                                                                                                                    if (\n                                                                                                                                        peg$silentFails ===\n                                                                                                                                        0\n                                                                                                                                    ) {\n                                                                                                                                        peg$fail(\n                                                                                                                                            peg$e67,\n                                                                                                                                        );\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                                if (\n                                                                                                                                    s0 ===\n                                                                                                                                    peg$FAILED\n                                                                                                                                ) {\n                                                                                                                                    if (\n                                                                                                                                        peg$r44.test(\n                                                                                                                                            input.charAt(\n                                                                                                                                                peg$currPos,\n                                                                                                                                            ),\n                                                                                                                                        )\n                                                                                                                                    ) {\n                                                                                                                                        s0 =\n                                                                                                                                            input.charAt(\n                                                                                                                                                peg$currPos,\n                                                                                                                                            );\n                                                                                                                                        peg$currPos++;\n                                                                                                                                    } else {\n                                                                                                                                        s0 =\n                                                                                                                                            peg$FAILED;\n                                                                                                                                        if (\n                                                                                                                                            peg$silentFails ===\n                                                                                                                                            0\n                                                                                                                                        ) {\n                                                                                                                                            peg$fail(\n                                                                                                                                                peg$e68,\n                                                                                                                                            );\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                    if (\n                                                                                                                                        s0 ===\n                                                                                                                                        peg$FAILED\n                                                                                                                                    ) {\n                                                                                                                                        if (\n                                                                                                                                            peg$r45.test(\n                                                                                                                                                input.charAt(\n                                                                                                                                                    peg$currPos,\n                                                                                                                                                ),\n                                                                                                                                            )\n                                                                                                                                        ) {\n                                                                                                                                            s0 =\n                                                                                                                                                input.charAt(\n                                                                                                                                                    peg$currPos,\n                                                                                                                                                );\n                                                                                                                                            peg$currPos++;\n                                                                                                                                        } else {\n                                                                                                                                            s0 =\n                                                                                                                                                peg$FAILED;\n                                                                                                                                            if (\n                                                                                                                                                peg$silentFails ===\n                                                                                                                                                0\n                                                                                                                                            ) {\n                                                                                                                                                peg$fail(\n                                                                                                                                                    peg$e69,\n                                                                                                                                                );\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                        if (\n                                                                                                                                            s0 ===\n                                                                                                                                            peg$FAILED\n                                                                                                                                        ) {\n                                                                                                                                            if (\n                                                                                                                                                peg$r46.test(\n                                                                                                                                                    input.charAt(\n                                                                                                                                                        peg$currPos,\n                                                                                                                                                    ),\n                                                                                                                                                )\n                                                                                                                                            ) {\n                                                                                                                                                s0 =\n                                                                                                                                                    input.charAt(\n                                                                                                                                                        peg$currPos,\n                                                                                                                                                    );\n                                                                                                                                                peg$currPos++;\n                                                                                                                                            } else {\n                                                                                                                                                s0 =\n                                                                                                                                                    peg$FAILED;\n                                                                                                                                                if (\n                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                    0\n                                                                                                                                                ) {\n                                                                                                                                                    peg$fail(\n                                                                                                                                                        peg$e70,\n                                                                                                                                                    );\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                            if (\n                                                                                                                                                s0 ===\n                                                                                                                                                peg$FAILED\n                                                                                                                                            ) {\n                                                                                                                                                if (\n                                                                                                                                                    peg$r47.test(\n                                                                                                                                                        input.charAt(\n                                                                                                                                                            peg$currPos,\n                                                                                                                                                        ),\n                                                                                                                                                    )\n                                                                                                                                                ) {\n                                                                                                                                                    s0 =\n                                                                                                                                                        input.charAt(\n                                                                                                                                                            peg$currPos,\n                                                                                                                                                        );\n                                                                                                                                                    peg$currPos++;\n                                                                                                                                                } else {\n                                                                                                                                                    s0 =\n                                                                                                                                                        peg$FAILED;\n                                                                                                                                                    if (\n                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                        0\n                                                                                                                                                    ) {\n                                                                                                                                                        peg$fail(\n                                                                                                                                                            peg$e71,\n                                                                                                                                                        );\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                                if (\n                                                                                                                                                    s0 ===\n                                                                                                                                                    peg$FAILED\n                                                                                                                                                ) {\n                                                                                                                                                    if (\n                                                                                                                                                        peg$r48.test(\n                                                                                                                                                            input.charAt(\n                                                                                                                                                                peg$currPos,\n                                                                                                                                                            ),\n                                                                                                                                                        )\n                                                                                                                                                    ) {\n                                                                                                                                                        s0 =\n                                                                                                                                                            input.charAt(\n                                                                                                                                                                peg$currPos,\n                                                                                                                                                            );\n                                                                                                                                                        peg$currPos++;\n                                                                                                                                                    } else {\n                                                                                                                                                        s0 =\n                                                                                                                                                            peg$FAILED;\n                                                                                                                                                        if (\n                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                            0\n                                                                                                                                                        ) {\n                                                                                                                                                            peg$fail(\n                                                                                                                                                                peg$e72,\n                                                                                                                                                            );\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                    if (\n                                                                                                                                                        s0 ===\n                                                                                                                                                        peg$FAILED\n                                                                                                                                                    ) {\n                                                                                                                                                        if (\n                                                                                                                                                            peg$r49.test(\n                                                                                                                                                                input.charAt(\n                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                ),\n                                                                                                                                                            )\n                                                                                                                                                        ) {\n                                                                                                                                                            s0 =\n                                                                                                                                                                input.charAt(\n                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                );\n                                                                                                                                                            peg$currPos++;\n                                                                                                                                                        } else {\n                                                                                                                                                            s0 =\n                                                                                                                                                                peg$FAILED;\n                                                                                                                                                            if (\n                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                0\n                                                                                                                                                            ) {\n                                                                                                                                                                peg$fail(\n                                                                                                                                                                    peg$e73,\n                                                                                                                                                                );\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                        if (\n                                                                                                                                                            s0 ===\n                                                                                                                                                            peg$FAILED\n                                                                                                                                                        ) {\n                                                                                                                                                            if (\n                                                                                                                                                                peg$r50.test(\n                                                                                                                                                                    input.charAt(\n                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                    ),\n                                                                                                                                                                )\n                                                                                                                                                            ) {\n                                                                                                                                                                s0 =\n                                                                                                                                                                    input.charAt(\n                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                    );\n                                                                                                                                                                peg$currPos++;\n                                                                                                                                                            } else {\n                                                                                                                                                                s0 =\n                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                if (\n                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                    0\n                                                                                                                                                                ) {\n                                                                                                                                                                    peg$fail(\n                                                                                                                                                                        peg$e74,\n                                                                                                                                                                    );\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                            if (\n                                                                                                                                                                s0 ===\n                                                                                                                                                                peg$FAILED\n                                                                                                                                                            ) {\n                                                                                                                                                                if (\n                                                                                                                                                                    peg$r51.test(\n                                                                                                                                                                        input.charAt(\n                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                        ),\n                                                                                                                                                                    )\n                                                                                                                                                                ) {\n                                                                                                                                                                    s0 =\n                                                                                                                                                                        input.charAt(\n                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                        );\n                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                } else {\n                                                                                                                                                                    s0 =\n                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                    if (\n                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                        0\n                                                                                                                                                                    ) {\n                                                                                                                                                                        peg$fail(\n                                                                                                                                                                            peg$e75,\n                                                                                                                                                                        );\n                                                                                                                                                                    }\n                                                                                                                                                                }\n                                                                                                                                                                if (\n                                                                                                                                                                    s0 ===\n                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                ) {\n                                                                                                                                                                    if (\n                                                                                                                                                                        peg$r52.test(\n                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                            ),\n                                                                                                                                                                        )\n                                                                                                                                                                    ) {\n                                                                                                                                                                        s0 =\n                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                            );\n                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                    } else {\n                                                                                                                                                                        s0 =\n                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                        if (\n                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                            0\n                                                                                                                                                                        ) {\n                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                peg$e76,\n                                                                                                                                                                            );\n                                                                                                                                                                        }\n                                                                                                                                                                    }\n                                                                                                                                                                    if (\n                                                                                                                                                                        s0 ===\n                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                    ) {\n                                                                                                                                                                        if (\n                                                                                                                                                                            peg$r53.test(\n                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                ),\n                                                                                                                                                                            )\n                                                                                                                                                                        ) {\n                                                                                                                                                                            s0 =\n                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                );\n                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                        } else {\n                                                                                                                                                                            s0 =\n                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                            if (\n                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                0\n                                                                                                                                                                            ) {\n                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                    peg$e77,\n                                                                                                                                                                                );\n                                                                                                                                                                            }\n                                                                                                                                                                        }\n                                                                                                                                                                        if (\n                                                                                                                                                                            s0 ===\n                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                        ) {\n                                                                                                                                                                            if (\n                                                                                                                                                                                peg$r54.test(\n                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                    ),\n                                                                                                                                                                                )\n                                                                                                                                                                            ) {\n                                                                                                                                                                                s0 =\n                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                    );\n                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                            } else {\n                                                                                                                                                                                s0 =\n                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                if (\n                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                    0\n                                                                                                                                                                                ) {\n                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                        peg$e78,\n                                                                                                                                                                                    );\n                                                                                                                                                                                }\n                                                                                                                                                                            }\n                                                                                                                                                                            if (\n                                                                                                                                                                                s0 ===\n                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                            ) {\n                                                                                                                                                                                if (\n                                                                                                                                                                                    peg$r55.test(\n                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                        ),\n                                                                                                                                                                                    )\n                                                                                                                                                                                ) {\n                                                                                                                                                                                    s0 =\n                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                        );\n                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                } else {\n                                                                                                                                                                                    s0 =\n                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                    if (\n                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                        0\n                                                                                                                                                                                    ) {\n                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                            peg$e79,\n                                                                                                                                                                                        );\n                                                                                                                                                                                    }\n                                                                                                                                                                                }\n                                                                                                                                                                                if (\n                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                ) {\n                                                                                                                                                                                    if (\n                                                                                                                                                                                        peg$r56.test(\n                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                            ),\n                                                                                                                                                                                        )\n                                                                                                                                                                                    ) {\n                                                                                                                                                                                        s0 =\n                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                            );\n                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                    } else {\n                                                                                                                                                                                        s0 =\n                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                        if (\n                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                            0\n                                                                                                                                                                                        ) {\n                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                peg$e80,\n                                                                                                                                                                                            );\n                                                                                                                                                                                        }\n                                                                                                                                                                                    }\n                                                                                                                                                                                    if (\n                                                                                                                                                                                        s0 ===\n                                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                                    ) {\n                                                                                                                                                                                        if (\n                                                                                                                                                                                            peg$r57.test(\n                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                ),\n                                                                                                                                                                                            )\n                                                                                                                                                                                        ) {\n                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                );\n                                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                                        } else {\n                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                                            if (\n                                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                                0\n                                                                                                                                                                                            ) {\n                                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                                    peg$e81,\n                                                                                                                                                                                                );\n                                                                                                                                                                                            }\n                                                                                                                                                                                        }\n                                                                                                                                                                                        if (\n                                                                                                                                                                                            s0 ===\n                                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                                        ) {\n                                                                                                                                                                                            if (\n                                                                                                                                                                                                peg$r58.test(\n                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                    ),\n                                                                                                                                                                                                )\n                                                                                                                                                                                            ) {\n                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                    );\n                                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                                            } else {\n                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                                if (\n                                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                                    0\n                                                                                                                                                                                                ) {\n                                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                                        peg$e82,\n                                                                                                                                                                                                    );\n                                                                                                                                                                                                }\n                                                                                                                                                                                            }\n                                                                                                                                                                                            if (\n                                                                                                                                                                                                s0 ===\n                                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                                            ) {\n                                                                                                                                                                                                if (\n                                                                                                                                                                                                    peg$r59.test(\n                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                        ),\n                                                                                                                                                                                                    )\n                                                                                                                                                                                                ) {\n                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                        );\n                                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                                } else {\n                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                                    if (\n                                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                                        0\n                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                                            peg$e83,\n                                                                                                                                                                                                        );\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                }\n                                                                                                                                                                                                if (\n                                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                                ) {\n                                                                                                                                                                                                    if (\n                                                                                                                                                                                                        peg$r60.test(\n                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                            ),\n                                                                                                                                                                                                        )\n                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                            );\n                                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                                    } else {\n                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                                        if (\n                                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                                            0\n                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                                peg$e84,\n                                                                                                                                                                                                            );\n                                                                                                                                                                                                        }\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                    if (\n                                                                                                                                                                                                        s0 ===\n                                                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                        if (\n                                                                                                                                                                                                            peg$r61.test(\n                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                ),\n                                                                                                                                                                                                            )\n                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                );\n                                                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                                                        } else {\n                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                                                0\n                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                                                    peg$e85,\n                                                                                                                                                                                                                );\n                                                                                                                                                                                                            }\n                                                                                                                                                                                                        }\n                                                                                                                                                                                                        if (\n                                                                                                                                                                                                            s0 ===\n                                                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                peg$r62.test(\n                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                    ),\n                                                                                                                                                                                                                )\n                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                                                            } else {\n                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                                                    0\n                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                                                        peg$e86,\n                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                }\n                                                                                                                                                                                                            }\n                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                s0 ===\n                                                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                    peg$r63.test(\n                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                        ),\n                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                                                } else {\n                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                                                        0\n                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                                                            peg$e87,\n                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                }\n                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                        peg$r64.test(\n                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                            ),\n                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                                                    } else {\n                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                                                            0\n                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                                                peg$e88,\n                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                        s0 ===\n                                                                                                                                                                                                                        peg$FAILED\n                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                            peg$r65.test(\n                                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                                ),\n                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                                input.charAt(\n                                                                                                                                                                                                                                    peg$currPos,\n                                                                                                                                                                                                                                );\n                                                                                                                                                                                                                            peg$currPos++;\n                                                                                                                                                                                                                        } else {\n                                                                                                                                                                                                                            s0 =\n                                                                                                                                                                                                                                peg$FAILED;\n                                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                                peg$silentFails ===\n                                                                                                                                                                                                                                0\n                                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                                peg$fail(\n                                                                                                                                                                                                                                    peg$e89,\n                                                                                                                                                                                                                                );\n                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                            s0 ===\n                                                                                                                                                                                                                            peg$FAILED\n                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                                peg$r66.test(\n                                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                                    ),\n                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                                    input.charAt(\n                                                                                                                                                                                                                                        peg$currPos,\n                                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                                peg$currPos++;\n                                                                                                                                                                                                                            } else {\n                                                                                                                                                                                                                                s0 =\n                                                                                                                                                                                                                                    peg$FAILED;\n                                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                                    peg$silentFails ===\n                                                                                                                                                                                                                                    0\n                                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                                    peg$fail(\n                                                                                                                                                                                                                                        peg$e90,\n                                                                                                                                                                                                                                    );\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                            if (\n                                                                                                                                                                                                                                s0 ===\n                                                                                                                                                                                                                                peg$FAILED\n                                                                                                                                                                                                                            ) {\n                                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                                    peg$r67.test(\n                                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                                        ),\n                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                                        input.charAt(\n                                                                                                                                                                                                                                            peg$currPos,\n                                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                                    peg$currPos++;\n                                                                                                                                                                                                                                } else {\n                                                                                                                                                                                                                                    s0 =\n                                                                                                                                                                                                                                        peg$FAILED;\n                                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                                        peg$silentFails ===\n                                                                                                                                                                                                                                        0\n                                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                                        peg$fail(\n                                                                                                                                                                                                                                            peg$e91,\n                                                                                                                                                                                                                                        );\n                                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                if (\n                                                                                                                                                                                                                                    s0 ===\n                                                                                                                                                                                                                                    peg$FAILED\n                                                                                                                                                                                                                                ) {\n                                                                                                                                                                                                                                    if (\n                                                                                                                                                                                                                                        peg$r68.test(\n                                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                                            ),\n                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                    ) {\n                                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                                            input.charAt(\n                                                                                                                                                                                                                                                peg$currPos,\n                                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                                        peg$currPos++;\n                                                                                                                                                                                                                                    } else {\n                                                                                                                                                                                                                                        s0 =\n                                                                                                                                                                                                                                            peg$FAILED;\n                                                                                                                                                                                                                                        if (\n                                                                                                                                                                                                                                            peg$silentFails ===\n                                                                                                                                                                                                                                            0\n                                                                                                                                                                                                                                        ) {\n                                                                                                                                                                                                                                            peg$fail(\n                                                                                                                                                                                                                                                peg$e92,\n                                                                                                                                                                                                                                            );\n                                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                }\n                                                                                                                                                                                                            }\n                                                                                                                                                                                                        }\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                }\n                                                                                                                                                                                            }\n                                                                                                                                                                                        }\n                                                                                                                                                                                    }\n                                                                                                                                                                                }\n                                                                                                                                                                            }\n                                                                                                                                                                        }\n                                                                                                                                                                    }\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseIdeographic() {\n        var s0;\n\n        if (peg$r69.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e93);\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseCombiningChar() {\n        var s0;\n\n        if (peg$r70.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e94);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r71.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e95);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r72.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e96);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r73.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e97);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r74.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e98);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            if (peg$r75.test(input.charAt(peg$currPos))) {\n                                s0 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                            } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$e99);\n                                }\n                            }\n                            if (s0 === peg$FAILED) {\n                                if (peg$r76.test(input.charAt(peg$currPos))) {\n                                    s0 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$e100);\n                                    }\n                                }\n                                if (s0 === peg$FAILED) {\n                                    if (\n                                        peg$r77.test(input.charAt(peg$currPos))\n                                    ) {\n                                        s0 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                    } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$e101);\n                                        }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                        if (\n                                            peg$r78.test(\n                                                input.charAt(peg$currPos),\n                                            )\n                                        ) {\n                                            s0 = input.charAt(peg$currPos);\n                                            peg$currPos++;\n                                        } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$e102);\n                                            }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                            if (\n                                                peg$r79.test(\n                                                    input.charAt(peg$currPos),\n                                                )\n                                            ) {\n                                                s0 = input.charAt(peg$currPos);\n                                                peg$currPos++;\n                                            } else {\n                                                s0 = peg$FAILED;\n                                                if (peg$silentFails === 0) {\n                                                    peg$fail(peg$e103);\n                                                }\n                                            }\n                                            if (s0 === peg$FAILED) {\n                                                if (\n                                                    peg$r80.test(\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        ),\n                                                    )\n                                                ) {\n                                                    s0 =\n                                                        input.charAt(\n                                                            peg$currPos,\n                                                        );\n                                                    peg$currPos++;\n                                                } else {\n                                                    s0 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$e104);\n                                                    }\n                                                }\n                                                if (s0 === peg$FAILED) {\n                                                    if (\n                                                        peg$r81.test(\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            ),\n                                                        )\n                                                    ) {\n                                                        s0 =\n                                                            input.charAt(\n                                                                peg$currPos,\n                                                            );\n                                                        peg$currPos++;\n                                                    } else {\n                                                        s0 = peg$FAILED;\n                                                        if (\n                                                            peg$silentFails ===\n                                                            0\n                                                        ) {\n                                                            peg$fail(peg$e105);\n                                                        }\n                                                    }\n                                                    if (s0 === peg$FAILED) {\n                                                        if (\n                                                            peg$r82.test(\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                ),\n                                                            )\n                                                        ) {\n                                                            s0 =\n                                                                input.charAt(\n                                                                    peg$currPos,\n                                                                );\n                                                            peg$currPos++;\n                                                        } else {\n                                                            s0 = peg$FAILED;\n                                                            if (\n                                                                peg$silentFails ===\n                                                                0\n                                                            ) {\n                                                                peg$fail(\n                                                                    peg$e106,\n                                                                );\n                                                            }\n                                                        }\n                                                        if (s0 === peg$FAILED) {\n                                                            if (\n                                                                peg$r83.test(\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    ),\n                                                                )\n                                                            ) {\n                                                                s0 =\n                                                                    input.charAt(\n                                                                        peg$currPos,\n                                                                    );\n                                                                peg$currPos++;\n                                                            } else {\n                                                                s0 = peg$FAILED;\n                                                                if (\n                                                                    peg$silentFails ===\n                                                                    0\n                                                                ) {\n                                                                    peg$fail(\n                                                                        peg$e107,\n                                                                    );\n                                                                }\n                                                            }\n                                                            if (\n                                                                s0 ===\n                                                                peg$FAILED\n                                                            ) {\n                                                                if (\n                                                                    peg$r84.test(\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        ),\n                                                                    )\n                                                                ) {\n                                                                    s0 =\n                                                                        input.charAt(\n                                                                            peg$currPos,\n                                                                        );\n                                                                    peg$currPos++;\n                                                                } else {\n                                                                    s0 =\n                                                                        peg$FAILED;\n                                                                    if (\n                                                                        peg$silentFails ===\n                                                                        0\n                                                                    ) {\n                                                                        peg$fail(\n                                                                            peg$e108,\n                                                                        );\n                                                                    }\n                                                                }\n                                                                if (\n                                                                    s0 ===\n                                                                    peg$FAILED\n                                                                ) {\n                                                                    if (\n                                                                        peg$r85.test(\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            ),\n                                                                        )\n                                                                    ) {\n                                                                        s0 =\n                                                                            input.charAt(\n                                                                                peg$currPos,\n                                                                            );\n                                                                        peg$currPos++;\n                                                                    } else {\n                                                                        s0 =\n                                                                            peg$FAILED;\n                                                                        if (\n                                                                            peg$silentFails ===\n                                                                            0\n                                                                        ) {\n                                                                            peg$fail(\n                                                                                peg$e109,\n                                                                            );\n                                                                        }\n                                                                    }\n                                                                    if (\n                                                                        s0 ===\n                                                                        peg$FAILED\n                                                                    ) {\n                                                                        if (\n                                                                            peg$r86.test(\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                ),\n                                                                            )\n                                                                        ) {\n                                                                            s0 =\n                                                                                input.charAt(\n                                                                                    peg$currPos,\n                                                                                );\n                                                                            peg$currPos++;\n                                                                        } else {\n                                                                            s0 =\n                                                                                peg$FAILED;\n                                                                            if (\n                                                                                peg$silentFails ===\n                                                                                0\n                                                                            ) {\n                                                                                peg$fail(\n                                                                                    peg$e110,\n                                                                                );\n                                                                            }\n                                                                        }\n                                                                        if (\n                                                                            s0 ===\n                                                                            peg$FAILED\n                                                                        ) {\n                                                                            if (\n                                                                                peg$r87.test(\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    ),\n                                                                                )\n                                                                            ) {\n                                                                                s0 =\n                                                                                    input.charAt(\n                                                                                        peg$currPos,\n                                                                                    );\n                                                                                peg$currPos++;\n                                                                            } else {\n                                                                                s0 =\n                                                                                    peg$FAILED;\n                                                                                if (\n                                                                                    peg$silentFails ===\n                                                                                    0\n                                                                                ) {\n                                                                                    peg$fail(\n                                                                                        peg$e111,\n                                                                                    );\n                                                                                }\n                                                                            }\n                                                                            if (\n                                                                                s0 ===\n                                                                                peg$FAILED\n                                                                            ) {\n                                                                                if (\n                                                                                    peg$r88.test(\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        ),\n                                                                                    )\n                                                                                ) {\n                                                                                    s0 =\n                                                                                        input.charAt(\n                                                                                            peg$currPos,\n                                                                                        );\n                                                                                    peg$currPos++;\n                                                                                } else {\n                                                                                    s0 =\n                                                                                        peg$FAILED;\n                                                                                    if (\n                                                                                        peg$silentFails ===\n                                                                                        0\n                                                                                    ) {\n                                                                                        peg$fail(\n                                                                                            peg$e112,\n                                                                                        );\n                                                                                    }\n                                                                                }\n                                                                                if (\n                                                                                    s0 ===\n                                                                                    peg$FAILED\n                                                                                ) {\n                                                                                    if (\n                                                                                        peg$r89.test(\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            ),\n                                                                                        )\n                                                                                    ) {\n                                                                                        s0 =\n                                                                                            input.charAt(\n                                                                                                peg$currPos,\n                                                                                            );\n                                                                                        peg$currPos++;\n                                                                                    } else {\n                                                                                        s0 =\n                                                                                            peg$FAILED;\n                                                                                        if (\n                                                                                            peg$silentFails ===\n                                                                                            0\n                                                                                        ) {\n                                                                                            peg$fail(\n                                                                                                peg$e113,\n                                                                                            );\n                                                                                        }\n                                                                                    }\n                                                                                    if (\n                                                                                        s0 ===\n                                                                                        peg$FAILED\n                                                                                    ) {\n                                                                                        if (\n                                                                                            peg$r90.test(\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                ),\n                                                                                            )\n                                                                                        ) {\n                                                                                            s0 =\n                                                                                                input.charAt(\n                                                                                                    peg$currPos,\n                                                                                                );\n                                                                                            peg$currPos++;\n                                                                                        } else {\n                                                                                            s0 =\n                                                                                                peg$FAILED;\n                                                                                            if (\n                                                                                                peg$silentFails ===\n                                                                                                0\n                                                                                            ) {\n                                                                                                peg$fail(\n                                                                                                    peg$e114,\n                                                                                                );\n                                                                                            }\n                                                                                        }\n                                                                                        if (\n                                                                                            s0 ===\n                                                                                            peg$FAILED\n                                                                                        ) {\n                                                                                            if (\n                                                                                                peg$r91.test(\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    ),\n                                                                                                )\n                                                                                            ) {\n                                                                                                s0 =\n                                                                                                    input.charAt(\n                                                                                                        peg$currPos,\n                                                                                                    );\n                                                                                                peg$currPos++;\n                                                                                            } else {\n                                                                                                s0 =\n                                                                                                    peg$FAILED;\n                                                                                                if (\n                                                                                                    peg$silentFails ===\n                                                                                                    0\n                                                                                                ) {\n                                                                                                    peg$fail(\n                                                                                                        peg$e115,\n                                                                                                    );\n                                                                                                }\n                                                                                            }\n                                                                                            if (\n                                                                                                s0 ===\n                                                                                                peg$FAILED\n                                                                                            ) {\n                                                                                                if (\n                                                                                                    peg$r92.test(\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        ),\n                                                                                                    )\n                                                                                                ) {\n                                                                                                    s0 =\n                                                                                                        input.charAt(\n                                                                                                            peg$currPos,\n                                                                                                        );\n                                                                                                    peg$currPos++;\n                                                                                                } else {\n                                                                                                    s0 =\n                                                                                                        peg$FAILED;\n                                                                                                    if (\n                                                                                                        peg$silentFails ===\n                                                                                                        0\n                                                                                                    ) {\n                                                                                                        peg$fail(\n                                                                                                            peg$e116,\n                                                                                                        );\n                                                                                                    }\n                                                                                                }\n                                                                                                if (\n                                                                                                    s0 ===\n                                                                                                    peg$FAILED\n                                                                                                ) {\n                                                                                                    if (\n                                                                                                        peg$r93.test(\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            ),\n                                                                                                        )\n                                                                                                    ) {\n                                                                                                        s0 =\n                                                                                                            input.charAt(\n                                                                                                                peg$currPos,\n                                                                                                            );\n                                                                                                        peg$currPos++;\n                                                                                                    } else {\n                                                                                                        s0 =\n                                                                                                            peg$FAILED;\n                                                                                                        if (\n                                                                                                            peg$silentFails ===\n                                                                                                            0\n                                                                                                        ) {\n                                                                                                            peg$fail(\n                                                                                                                peg$e117,\n                                                                                                            );\n                                                                                                        }\n                                                                                                    }\n                                                                                                    if (\n                                                                                                        s0 ===\n                                                                                                        peg$FAILED\n                                                                                                    ) {\n                                                                                                        if (\n                                                                                                            peg$r94.test(\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                ),\n                                                                                                            )\n                                                                                                        ) {\n                                                                                                            s0 =\n                                                                                                                input.charAt(\n                                                                                                                    peg$currPos,\n                                                                                                                );\n                                                                                                            peg$currPos++;\n                                                                                                        } else {\n                                                                                                            s0 =\n                                                                                                                peg$FAILED;\n                                                                                                            if (\n                                                                                                                peg$silentFails ===\n                                                                                                                0\n                                                                                                            ) {\n                                                                                                                peg$fail(\n                                                                                                                    peg$e118,\n                                                                                                                );\n                                                                                                            }\n                                                                                                        }\n                                                                                                        if (\n                                                                                                            s0 ===\n                                                                                                            peg$FAILED\n                                                                                                        ) {\n                                                                                                            if (\n                                                                                                                peg$r95.test(\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    ),\n                                                                                                                )\n                                                                                                            ) {\n                                                                                                                s0 =\n                                                                                                                    input.charAt(\n                                                                                                                        peg$currPos,\n                                                                                                                    );\n                                                                                                                peg$currPos++;\n                                                                                                            } else {\n                                                                                                                s0 =\n                                                                                                                    peg$FAILED;\n                                                                                                                if (\n                                                                                                                    peg$silentFails ===\n                                                                                                                    0\n                                                                                                                ) {\n                                                                                                                    peg$fail(\n                                                                                                                        peg$e119,\n                                                                                                                    );\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseDigit() {\n        var s0;\n\n        if (peg$r96.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e120);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r97.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e121);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r98.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e122);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (peg$r99.test(input.charAt(peg$currPos))) {\n                        s0 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$e123);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (peg$r100.test(input.charAt(peg$currPos))) {\n                            s0 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$e124);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    function peg$parseExtender() {\n        var s0;\n\n        if (peg$r101.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$e125);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$r102.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$e126);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (peg$r103.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$e127);\n                    }\n                }\n            }\n        }\n\n        return s0;\n    }\n\n    const names = [];\n\n    function checkAttributeRule(attr, rule) {\n        const isType = ['string', 'boolean', 'number'].includes(rule);\n        const isEnum = !isType;\n        if (isType || attr.value !== rule) {\n            // check if this is a type\n            if (isType) {\n                if (rule === 'string') {\n                    if (typeof attr.value !== 'string') {\n                        error(\n                            `Expect ${attr.name} to be a string but got ${attr.value}`,\n                        );\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } else if (rule === 'boolean') {\n                    if (\n                        ![\n                            '1',\n                            '0',\n                            'yes',\n                            'no',\n                            'off',\n                            'on',\n                            'true',\n                            'false',\n                        ].includes(attr.value)\n                    ) {\n                        error(\n                            `Expected \"${attr.name}\" to have a boolean descriptor but got \"${attr.value}\" (Try \"true\", \"false\", \"yes\", \"no\", \"on\", \"off\", \"1\", \"0\"`,\n                        );\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } else if (rule == 'number') {\n                    if (isNaN(Number(attr.value))) {\n                        error(\n                            `Expected \"${attr.name}\" to be a number but got \"${attr.value}\"`,\n                        );\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } else {\n                    error(`Unknown type \"${rule}\"`);\n                    return false;\n                }\n            }\n\n            if (isEnum) {\n                // It doesn't match this enum value but it may match another so\n                //  just return false here.\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function processTag(tag, attribs) {\n        // Check if this is a valid tag\n        if (Object.keys(TagAttributeMap).includes(tag)) {\n            // For each attribute that was given in the parsed text,\n            //\tcheck to see if it is a known attribute and if it\n            //\tmatches the rules defined.\n            attribs.forEach(tagAttr => {\n                // Is the attribute in the list.\n                if (Object.keys(TagAttributeMap[tag]).includes(tagAttr.name)) {\n                    const attrName = tagAttr.name;\n                    const attrValue = tagAttr.value;\n                    const attrRules = TagAttributeMap[tag][attrName];\n                    // If the attribute is in the list, check that the rules\n                    //\tapply to the attribute.\n                    const matched = attrRules.some(r =>\n                        checkAttributeRule(tagAttr, r),\n                    );\n                    if (!matched) {\n                        error(\n                            `Invalid attribute \"${tagAttr.name}\" found in tag \"${tag}\".  Expected [\"${attrRules.join('\", \"')}\"] but got \"${attrValue}\"`,\n                        );\n                    }\n                } else {\n                    error(\n                        `Invalid attribute \"${tagAttr.name}\" found in tag \"${tag}\"`,\n                    );\n                }\n            });\n            return tag;\n        } else {\n            error(`Invalid tag \"${tag}\" found`);\n        }\n    }\n\n    function convertAttr(attr) {\n        const ret = {};\n        for (const { name, value, loc } of attr) {\n            if (ret[name]) {\n                error(`Duplicate attribute \"${name}\"`, loc);\n            }\n            ret[name] = value;\n        }\n        return ret;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n\n        throw peg$buildStructuredError(\n            peg$maxFailExpected,\n            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n            peg$maxFailPos < input.length\n                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),\n        );\n    }\n}\n\nexport { peg$SyntaxError as SyntaxError, peg$parse as parse };\n",
  "export function convertMarkdownToAnsie(input: string) {\n    // Unified regex for bold, italics, and color. Headers are handled separately.\n    const regex = /\\*\\*(.*?)\\*\\*|\\*(.*?)\\*|\\[c=(.*?)\\](.*?)\\[\\/c\\]/g;\n\n    // Replace bold, italics, and color with their respective ANSIE escape codes\n    const translated = input.replace(\n        regex,\n        (match, boldText, italicText, color, colorText) => {\n            if (boldText !== undefined) {\n                return `<span bold>${boldText}</span>`;\n            } else if (italicText !== undefined) {\n                return `<span italics>${italicText}</span>`;\n            } else if (color !== undefined) {\n                return `<span fg=\"${color}\">${colorText}</span>`;\n            }\n            return match; // Fallback, should never reach here.\n        },\n    );\n\n    // Handle headers as a special case, due to the need for multiline matching\n    return translated\n        .split('\\n')\n        .map(line => line.trim()) // Remove leading/trailing whitespace\n        .filter(line => line.length > 0) // Remove empty lines\n        .map(line => {\n            if (line.trim().startsWith('###')) {\n                return line.replace(/^\\s*###\\s(.*?)$/, '<h3>$1</h3>');\n            } else if (line.trim().startsWith('##')) {\n                return line.replace(/^\\s*##\\s(.*?)$/, '<h2>$1</h2>');\n            } else if (line.trim().startsWith('#')) {\n                return line.replace(/^#\\s(.*?)$/, '<h1>$1</h1>');\n            }\n            return line;\n        })\n        .join('\\n'); // Rejoin the lines back into a single string\n}\n",
  "import { parse as rawParse } from './generated-parser.js';\nimport { type Ast } from '../compiler/types';\nimport { convertMarkdownToAnsie } from '../utilities/convert-markdown-to-ansie.js';\n\n/**\n * Parses a string into an AST using a simplified markdown syntax\n * The syntax supported is:\n *\n * - # text -> h1\n * - ## text -> h2\n * - ### text -> h3\n * - **text** -> bold\n * - *text* -> italics\n * - [c=red]text[/c] -> color\n *\n * @param input\n * @returns\n */\nexport function parseAnsieMarkdown(input: string): Ast | null {\n    if (!input) {\n        return null;\n    }\n\n    return parseAnsieMarkup(convertMarkdownToAnsie(input)); // Assuming parseAnsieMarkup is defined elsewhere\n}\n\n/**\n * Assumes that the input string is using the simplified ansie markup syntax - use\n * `parseAnsieMarkdown` if you are unsure if the input is using mixed markdown.\n * @param input\n * @returns\n */\nexport function parseAnsieMarkup(input: string): Ast | null {\n    if (!input) {\n        return null;\n    }\n\n    return rawParse(input) as Ast;\n}\n",
  "export function num(n: unknown) {\n    if (typeof n === 'number') {\n        return n;\n    }\n    if (typeof n === 'string') {\n        return Number(n);\n    }\n    if (typeof n === 'boolean') {\n        return n ? 1 : 0;\n    }\n    return 0;\n}\n",
  "import type { SpaceNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { num } from './num';\n\nexport function getSpacingFromProperties(\n    node: SpaceNodeBase,\n    style?: AnsieStyle,\n): {\n    on: string;\n    off: string;\n} {\n    const left = num(\n        node.marginLeft ?? node.margin ?? style?.spacing?.marginLeft ?? 0,\n    );\n    const right = num(\n        node.marginRight ?? node.margin ?? style?.spacing?.marginRight ?? 0,\n    );\n    const top = num(\n        node.marginTop ?? node.margin ?? style?.spacing?.marginTop ?? 0,\n    );\n    const bottom = num(\n        node.marginBottom ?? node.margin ?? style?.spacing?.marginBottom ?? 0,\n    );\n\n    const vpre = top ? '\\n'.repeat(top) : '';\n    const vpost = bottom ? '\\n'.repeat(bottom) : '';\n    const hpre = left ? ' '.repeat(left) : '';\n    const hpost = right ? ' '.repeat(right) : '';\n\n    return {\n        on: `${vpre}${hpre}`,\n        off: `${hpost}${vpost}`,\n    };\n}\n",
  "import { type CompilerFormat } from '../compiler/types';\nimport { getSpacingFromProperties } from './get-spacing-from-properties';\nimport {\n    type AnsieNode,\n    type SpaceNodeBase,\n    SpaceAttributes,\n} from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\n\n/**\n * Renders the space attributes for a node prepending the appropriate spacing escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderSpaceAttributesStart({\n    node,\n    format,\n    style,\n}: {\n    node: SpaceNodeBase;\n    format: CompilerFormat;\n    style?: AnsieStyle;\n}): string {\n    if (format === 'ansi') {\n        return getSpacingFromProperties(node, style).on;\n    } else if (format === 'markup') {\n        return Object.entries(node)\n            .filter(([key]) => Object.keys(SpaceAttributes).includes(key))\n            .map(([key, value]) => `${key}=\"${value}\"`)\n            .join(' ');\n    } else {\n        return '';\n    }\n}\n/**\n * Renders the space attributes for a node appending the appropriate spacing escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderSpaceAttributesEnd({\n    style,\n    attributes,\n    format,\n}: {\n    attributes: AnsieNode;\n    style?: AnsieStyle;\n    format: CompilerFormat;\n}) {\n    if (format === 'ansi') {\n        return getSpacingFromProperties(attributes, style).off;\n    } else if (format === 'markup') {\n        return '';\n    } else {\n        return '';\n    }\n}\n",
  "// A set of variables that map to the ANSI escape codes for terminal manipulation\n// and colorization.  See https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters\n// for more information.\nexport enum TerminalStyle {\n    // Reset all styles\n    reset = 0,\n\n    // Text Styles\n\n    bold = 1,\n    boldOff = 22,\n\n    italic = 3,\n    italicOff = 23,\n\n    underline = 4,\n    doubleunderline = 21,\n    underlineOff = 24, // this reset both underline and doubleunderline\n\n    inverse = 7,\n    inverseOff = 27,\n\n    hidden = 8,\n    hiddenOff = 28,\n\n    strikethrough = 9,\n    strikethroughOff = 29,\n\n    // *** Foreground Colors\n    fgBlack = 30,\n    fgRed = 31,\n    fgGreen = 32,\n    fgYellow = 33,\n    fgBlue = 34,\n    fgMagenta = 35,\n    fgCyan = 36,\n    fgWhite = 37,\n    fgBrightred = 91,\n    fgBrightgreen = 92,\n    fgBrightyellow = 93,\n    fgBrightblue = 94,\n    fgBrightmagenta = 95,\n    fgBrightcyan = 96,\n    fgBrightwhite = 97,\n    fgGray = 90,\n\n    // Resets foreground color to default\n    fgDefault = 39,\n\n    // *** Background Colors\n    bgBlack = 40,\n    bgRed = 41,\n    bgGreen = 42,\n    bgYellow = 43,\n    bgBlue = 44,\n    bgMagenta = 45,\n    bgCyan = 46,\n    bgWhite = 47,\n    bgBrightred = 101,\n    bgBrightgreen = 102,\n    bgBrightyellow = 103,\n    bgBrightblue = 104,\n    bgBrightmagenta = 105,\n    bgBrightcyan = 106,\n    bgBrightwhite = 107,\n    bgGray = 100,\n\n    // Resets background color to default\n    bgDefault = 49,\n\n    // *** Containers\n    framed = 51,\n    encircled = 52,\n    overline = 53,\n}\n\n// Given a name or array of names, return the ANSI escape code for that name.\nexport function escapeCodeFromName(names: number[]): string {\n    if (names.length === 0) {\n        return '';\n    }\n\n    const codeString = names.join(';');\n    return `\\x1b[${codeString}m`;\n}\n",
  "export function toTitleCase(str: string): string {\n    return str ? str[0].toUpperCase() + str.slice(1) : '';\n}\n",
  "import type { TextNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { TerminalStyle, escapeCodeFromName } from './escape-code-from-name';\nimport { toTitleCase } from './to-title-case';\n\n/**\n * Retrieves the escape codes for the given text attributes.  It will return both the escape codes for turning\n * on and off the text attributes.\n * @param properties The text attributes.\n * @returns An object containing the escape codes for turning on and off the specified text attributes.\n */\nexport function getTextEscapeCodesFromProperties(\n    properties: TextNodeBase,\n    style?: AnsieStyle,\n): {\n    on: string;\n    off: string;\n} {\n    const on: TerminalStyle[] = [];\n    const off: TerminalStyle[] = [];\n\n    const fg = properties.fg ?? style?.font?.color?.fg;\n    const bg = properties.bg ?? style?.font?.color?.bg;\n    const bold = properties.bold ?? style?.font?.bold;\n    const underline = properties.underline ?? style?.font?.underline;\n    const italics = properties.italics ?? style?.font?.italics;\n\n    if (fg) {\n        on.push(colorToTerminalStyle(fg, true));\n        off.push(TerminalStyle.fgDefault);\n    }\n    if (bg) {\n        on.push(colorToTerminalStyle(bg, false));\n        off.push(TerminalStyle.bgDefault);\n    }\n    if (bold) {\n        on.push(TerminalStyle.bold);\n        off.push(TerminalStyle.boldOff);\n    }\n    if (underline) {\n        if (underline === 'single') {\n            on.push(TerminalStyle.underline);\n        } else if (underline === 'double') {\n            on.push(TerminalStyle.doubleunderline);\n        }\n        off.push(TerminalStyle.underlineOff);\n    }\n    if (italics) {\n        on.push(TerminalStyle.italic);\n        off.push(TerminalStyle.italicOff);\n    }\n    return {\n        on: on.length > 0 ? escapeCodeFromName(on) : '',\n        off: off.length > 0 ? escapeCodeFromName(off) : '',\n    };\n}\n\nexport function colorToTerminalStyle(\n    color: string,\n    foreground: boolean,\n): TerminalStyle {\n    if (foreground) {\n        return TerminalStyle[\n            `fg${toTitleCase(color)}` as keyof typeof TerminalStyle\n        ];\n    } else {\n        return TerminalStyle[\n            `bg${toTitleCase(color)}` as keyof typeof TerminalStyle\n        ];\n    }\n}\n",
  "import { type CompilerFormat } from '../compiler/types';\nimport { getTextEscapeCodesFromProperties } from './get-text-escape-codes-from-properties';\nimport { type AnsieNode, isAttribute } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\n\n/**\n * Renders the text attributes for a node prepending the appropriate text escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderTextAttributesStart({\n    style,\n    attributes,\n    format = 'ansi',\n}: {\n    style?: AnsieStyle;\n    attributes: AnsieNode;\n    format?: CompilerFormat;\n}) {\n    if (format === 'ansi') {\n        return getTextEscapeCodesFromProperties(attributes, style).on;\n    } else if (format === 'markup') {\n        return Object.entries(attributes)\n            .filter(([key]) => isAttribute(key))\n            .map(([key, value]) => `${key}=\"${value}\"`)\n            .join(' ');\n    }\n}\n/**\n * Renders the text attributes for a node appending the appropriate text escape codes.\n * @param attributes\n * @param format\n * @returns\n */\nexport function renderTextAttributesEnd({\n    style,\n    attributes,\n    format = 'ansi',\n}: {\n    style?: AnsieStyle;\n    attributes: AnsieNode;\n    format?: CompilerFormat;\n}) {\n    if (format === 'ansi') {\n        return getTextEscapeCodesFromProperties(attributes, style).off;\n    } else if (format === 'markup') {\n        return '';\n    }\n}\n",
  "import { type AnsieNode, isAttribute } from '../compiler/types';\n\nexport function renderNodeAsMarkupStart(node: AnsieNode) {\n    const attribs = Object.entries(node)\n        .filter(([key]) => isAttribute(key))\n        .map(([key, value]) => `${key}=\"${value}\"`)\n        .join(' ');\n\n    return `<${node.node}${attribs ? ` ${attribs}` : ''}>`;\n}\nexport function renderNodeAsMarkupEnd(node: AnsieNode) {\n    return `</${node.node}>`;\n}\n",
  "import { CompilerError, type CompilerFormat } from '../types';\nimport {\n    type AnsieNode,\n    AnsieNodeImpl,\n    type TextNodeBase,\n    type SpaceNodeBase,\n} from '../types';\n\nimport {\n    renderSpaceAttributesStart,\n    renderSpaceAttributesEnd,\n} from '../../utilities/render-space-attributes';\nimport {\n    renderTextAttributesStart,\n    renderTextAttributesEnd,\n} from '../../utilities/render-text-attributes';\nimport {\n    renderNodeAsMarkupStart,\n    renderNodeAsMarkupEnd,\n} from '../../utilities/render-node-as-markup';\n\nexport class BlockTextNodeImpl\n    extends AnsieNodeImpl\n    implements TextNodeBase, SpaceNodeBase\n{\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderSpaceAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderTextAttributesStart({\n                    style: this._style,\n                    attributes: this._raw,\n                    format,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupStart(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n\n    renderEnd({\n        stack,\n        format = 'ansi',\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return `${renderTextAttributesEnd({ style: this._style, attributes: this._raw, format })}${renderSpaceAttributesEnd({ attributes: this._raw, format, style: this._style })}`;\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupEnd(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n}\n",
  "import { CompilerError, type CompilerFormat } from '../types';\nimport { AnsieNodeImpl, type AnsieNode } from '../types';\n\n//// Break Node - This is a node that represents a line break\n\nexport class BreakNodeImpl extends AnsieNodeImpl implements AnsieNode {\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return '\\n'.repeat(this._style?.spacing?.marginBottom || 1);\n        } else if (format === 'markup') {\n            return '<br/>';\n        }\n\n        throw new CompilerError(\n            `Invalid format: ${format}`,\n            this._raw,\n            stack,\n            false,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderEnd() {\n        return '';\n    }\n}\n",
  "export class RawTextMutator {\n    _str: string;\n\n    static EmojiMap: Record<string, string> = {\n        ':exclamation:': '❗',\n        ':warning:': '⚠️',\n        ':no_entry:': '⛔',\n        ':heavy_check_mark:': '✔️',\n        ':x:': '❌',\n        ':bangbang:': '‼️',\n        ':triangular_flag_on_post:': '🚩',\n        ':fire:': '🔥',\n        ':sos:': '🆘',\n        ':lock:': '🔒',\n        ':key:': '🔑',\n        ':heart:': '❤️',\n        ':broken_heart:': '💔',\n        ':skull_and_crossbones:': '☠️',\n        ':grin:': '😁',\n        ':joy:': '😂',\n        ':heart_eyes:': '😍',\n        ':smirk:': '😏',\n        ':sunglasses:': '😎',\n        ':thumbsup:': '👍',\n        ':thumbsdown:': '👎',\n        ':clap:': '👏',\n        ':pray:': '🙏',\n        ':cry:': '😢',\n        ':sob:': '😭',\n        ':rocket:': '🚀',\n        ':sunny:': '☀️',\n        ':umbrella:': '☔',\n        ':camera:': '📷',\n        ':book:': '📖',\n        ':moneybag:': '💰',\n        ':gift:': '🎁',\n        ':bell:': '🔔',\n        ':hammer:': '🔨',\n        ':thumbsup::skin-tone-2:': '👍🏻',\n        ':thumbsup::skin-tone-3:': '👍🏼',\n        ':thumbsup::skin-tone-4:': '👍🏽',\n        ':thumbsup::skin-tone-5:': '👍🏾',\n        ':thumbsup::skin-tone-6:': '👍🏿',\n    };\n\n    constructor(str: string) {\n        this._str = str;\n    }\n\n    get str(): string {\n        return this.toString();\n    }\n\n    replaceEmoji() {\n        const emojiMatches = this._str.match(/:[a-z_]+:/g);\n        if (emojiMatches) {\n            emojiMatches.forEach(match => {\n                const emoji = RawTextMutator.EmojiMap[match];\n                if (emoji) {\n                    this._str = this._str.replace(match, emoji);\n                }\n            });\n        }\n\n        return this;\n    }\n\n    trimSpaces(options: {\n        left: boolean;\n        right: boolean;\n        allowNewLines: boolean;\n        replaceWithSingleSpace: boolean;\n    }) {\n        // Construct a regex pattern based on the options\n        const whiteSpacePattern = options.allowNewLines\n            ? '[ \\\\t\\\\v\\\\v]'\n            : '\\\\s';\n        const leftPattern = options.left ? `^${whiteSpacePattern}+` : '';\n        const rightPattern = options.right ? `${whiteSpacePattern}+$` : '';\n        const pattern = new RegExp(`${leftPattern}|${rightPattern}`, 'g');\n        this._str = this._str.replace(\n            pattern,\n            options.replaceWithSingleSpace ? ' ' : '',\n        );\n        return this;\n    }\n\n    toString() {\n        return this._str;\n    }\n}\n",
  "import type { CompilerFormat } from '../types';\nimport { AnsieNodeImpl, type AnsieNode } from '../types';\nimport { RawTextMutator } from '../../utilities/raw-text-mutator';\n\nexport class RawTextNodeImpl extends AnsieNodeImpl implements AnsieNode {\n    renderStart({ format }: { stack: AnsieNode[]; format: CompilerFormat }) {\n        const text = this.attr('value') ?? '';\n        if (format === 'markup') {\n            return text;\n        } else {\n            return new RawTextMutator(text)\n                .replaceEmoji()\n                .trimSpaces({\n                    left: true,\n                    right: true,\n                    allowNewLines: false,\n                    replaceWithSingleSpace: true,\n                })\n                .toString();\n        }\n    }\n\n    renderEnd() {\n        return '';\n    }\n}\n",
  "import type { ListItemNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { num } from './num';\n\nexport function getListItemFromProperties(\n    node: ListItemNodeBase,\n    style?: AnsieStyle,\n): {\n    on: string;\n    off: string;\n} {\n    const bullet = node.bullet ? node.bullet : style?.list?.bullet ?? '';\n    const indent = node.indent\n        ? ' '.repeat(num(node.indent))\n        : ' '.repeat(style?.list?.indent ?? 0);\n\n    return {\n        on: `${bullet}${indent}`,\n        off: '',\n    };\n}\n",
  "import type { CompilerFormat } from '../compiler/types';\nimport { ListAttributes, type ListItemNodeBase } from '../compiler/types';\nimport type { AnsieStyle } from '../themes/themes';\nimport { getListItemFromProperties } from './get-list-prefix-from-properties';\n\nexport function renderListAttributesStart({\n    node,\n    style,\n    format = 'ansi',\n}: {\n    node: ListItemNodeBase;\n    style?: AnsieStyle;\n    format?: CompilerFormat;\n}): string {\n    if (format === 'ansi') {\n        return getListItemFromProperties(node, style).on;\n    } else if (format === 'markup') {\n        return Object.entries(node)\n            .filter(([key]) => Object.keys(ListAttributes).includes(key))\n            .map(([key, value]) => `${key}=\"${value}\"`)\n            .join(' ');\n    } else {\n        return '';\n    }\n}\n\nexport function renderListAttributesEnd({\n    node,\n    style,\n    format = 'ansi',\n}: {\n    node: ListItemNodeBase;\n    style?: AnsieStyle;\n    format?: CompilerFormat;\n}): string {\n    if (format === 'ansi') {\n        return getListItemFromProperties(node, style).off;\n    } else if (format === 'markup') {\n        return '';\n    } else {\n        return '';\n    }\n}\n",
  "import { CompilerError, type CompilerFormat } from '../types';\nimport { AnsieNodeImpl, type AnsieNode } from '../types';\nimport {\n    renderListAttributesEnd,\n    renderListAttributesStart,\n} from '../../utilities/render-list-attributes';\nimport {\n    renderNodeAsMarkupEnd,\n    renderNodeAsMarkupStart,\n} from '../../utilities/render-node-as-markup';\nimport {\n    renderSpaceAttributesEnd,\n    renderSpaceAttributesStart,\n} from '../../utilities/render-space-attributes';\nimport {\n    renderTextAttributesEnd,\n    renderTextAttributesStart,\n} from '../../utilities/render-text-attributes';\n\nexport class ListItemNodeImpl extends AnsieNodeImpl implements AnsieNode {\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderSpaceAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderListAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderTextAttributesStart({\n                    attributes: this._raw,\n                    format,\n                    style: this._style,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupStart(this._raw);\n        }\n\n        throw new CompilerError(\n            `Invalid format: ${format}`,\n            this._raw,\n            stack,\n            false,\n        );\n    }\n\n    renderEnd({\n        format = 'ansi',\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderTextAttributesEnd({\n                    style: this._style,\n                    attributes: this._raw,\n                    format,\n                }) +\n                renderListAttributesEnd({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderSpaceAttributesEnd({\n                    attributes: this._raw,\n                    format,\n                    style: this._style,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupEnd(this._raw);\n        } else {\n            return '';\n        }\n    }\n}\n",
  "import {\n    renderNodeAsMarkupEnd,\n    renderNodeAsMarkupStart,\n} from '../../utilities/render-node-as-markup';\nimport {\n    renderSpaceAttributesEnd,\n    renderSpaceAttributesStart,\n} from '../../utilities/render-space-attributes';\nimport {\n    renderTextAttributesEnd,\n    renderTextAttributesStart,\n} from '../../utilities/render-text-attributes';\nimport { CompilerError, type CompilerFormat } from '../types';\nimport {\n    AnsieNodeImpl,\n    type TextNodeBase,\n    type SpaceNodeBase,\n    type AnsieNode,\n} from '../types';\n\nexport class InlineTextNodeImpl\n    extends AnsieNodeImpl\n    implements TextNodeBase, SpaceNodeBase\n{\n    renderStart({\n        stack,\n        format,\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return (\n                renderSpaceAttributesStart({\n                    node: this._raw,\n                    format,\n                    style: this._style,\n                }) +\n                renderTextAttributesStart({\n                    style: this._style,\n                    attributes: this._raw,\n                    format,\n                })\n            );\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupStart(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n\n    renderEnd({\n        stack,\n        format = 'ansi',\n    }: {\n        stack: AnsieNode[];\n        format: CompilerFormat;\n    }) {\n        if (format === 'ansi') {\n            return `${renderTextAttributesEnd({ style: this._style, attributes: this._raw, format })}${renderSpaceAttributesEnd({ attributes: this._raw, format, style: this._style })}`;\n        } else if (format === 'markup') {\n            return renderNodeAsMarkupEnd(this._raw);\n        } else {\n            throw new CompilerError(\n                `Invalid format: ${format}`,\n                this._raw,\n                stack,\n                false,\n            );\n        }\n    }\n}\n",
  "import {\n    AnsieNodeImpl,\n    type AnsieNode,\n    type Ast,\n    ValidTags,\n    type CompilerFormat,\n} from './types';\nimport { CompilerError } from './types';\nimport { BlockTextNodeImpl } from './node/block';\nimport { BreakNodeImpl } from './node/break';\nimport { RawTextNodeImpl } from './node/raw';\nimport { ListItemNodeImpl } from './node/list';\nimport { InlineTextNodeImpl } from './node/inline';\nimport type { AnsieTheme } from '../themes/themes';\n\n/**\n * The compiler takes the AST from the parser and compiles it into a string\n * @param ast Takes the AST from the compiled markup and stores for future operations.\n * @internal\n */\nexport class Compiler {\n    private _ast: Ast;\n    private _stack: AnsieNodeImpl[] = [];\n    private _theme: AnsieTheme;\n\n    /**\n     * The compiler takes the AST from the parser and compiles it into a string\n     * @param ast Takes the AST from the compiled markup and stores for future operations.\n     */\n    constructor(ast: Ast, theme: AnsieTheme) {\n        this._ast = ast;\n        this._theme = theme;\n    }\n\n    /**\n     * The compile function takes the AST and compiles it into a string.\n     * @returns A string that is the compiled markup.\n     */\n    public compile({\n        format,\n        theme,\n    }: {\n        format: CompilerFormat;\n        theme?: AnsieTheme;\n    }): string {\n        return this._ast.reduce((finalString, node) => {\n            finalString += this._compileNode({ node, format, theme });\n            return finalString;\n        }, '');\n    }\n\n    private makeNodeImplementation(raw: AnsieNode): AnsieNodeImpl {\n        switch (raw.node) {\n            case ValidTags.body:\n                return new BlockTextNodeImpl(raw, this._theme.body);\n            case ValidTags.h1:\n                return new BlockTextNodeImpl(raw, this._theme.h1);\n            case ValidTags.h2:\n                return new BlockTextNodeImpl(raw, this._theme.h2);\n            case ValidTags.h3:\n                return new BlockTextNodeImpl(raw, this._theme.h3);\n            case ValidTags.div:\n                return new BlockTextNodeImpl(raw, this._theme.div);\n            case ValidTags.p:\n                return new BlockTextNodeImpl(raw, this._theme.p);\n            case ValidTags.text:\n                return new RawTextNodeImpl(raw, this._theme.text);\n            case ValidTags.br:\n                return new BreakNodeImpl(raw, this._theme.br);\n            case ValidTags.span:\n                return new InlineTextNodeImpl(raw, this._theme.span);\n            case ValidTags.li:\n                return new ListItemNodeImpl(raw, this._theme.li);\n            default:\n                throw new CompilerError(\n                    `Invalid node type: ${raw.node}`,\n                    raw,\n                    this._stack,\n                    true,\n                );\n        }\n    }\n\n    private _push({\n        state,\n        format = 'ansi',\n    }: {\n        state: AnsieNode;\n        theme?: AnsieTheme;\n        format?: CompilerFormat;\n    }) {\n        const node = this.makeNodeImplementation(state);\n        this._stack.push(node);\n        return node.renderStart({ stack: this._stack, format });\n    }\n\n    private _pop({\n        format = 'ansi',\n    }: { theme?: AnsieTheme; format?: CompilerFormat } = {}) {\n        const old = this._stack.pop();\n        return old?.renderEnd({ stack: this._stack, format });\n    }\n\n    private _compileNode({\n        node,\n        theme,\n        format = 'ansi',\n    }: {\n        node: AnsieNode;\n        theme?: AnsieTheme;\n        format?: CompilerFormat;\n    }): string {\n        const strings: string[] = [];\n\n        try {\n            strings.push(this._push({ state: node, format }));\n\n            if (node.content) {\n                if (Array.isArray(node.content)) {\n                    node.content.forEach(node =>\n                        strings.push(\n                            this._compileNode({ node, theme, format }),\n                        ),\n                    );\n                } else {\n                    strings.push(\n                        this._compileNode({\n                            node: node.content,\n                            theme,\n                            format,\n                        }),\n                    );\n                }\n            }\n\n            const n = this._pop({ format });\n            if (n) {\n                strings.push(n);\n            }\n\n            return strings.join('');\n        } catch (e) {\n            if (e instanceof CompilerError) {\n                console.error(e.toString());\n                if (!e.continue) {\n                    throw e;\n                }\n            }\n        }\n\n        return '';\n    }\n}\n",
  "import type { ValidTags } from '../compiler/types';\n\nexport interface AnsieStyle {\n    font?: {\n        color?: {\n            fg?: string;\n            bg?: string;\n        };\n        bold?: boolean;\n        underline?: 'single' | 'double' | 'none' | boolean;\n        italics?: boolean;\n    };\n\n    spacing?: {\n        margin?: number;\n        marginLeft?: number;\n        marginRight?: number;\n        marginTop?: number;\n        marginBottom?: number;\n    };\n\n    list?: {\n        bullet?: string;\n        indent?: number;\n    };\n}\n\nconst cleanStyle: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const body: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const text: AnsieStyle = body;\n\nexport const br: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const h1: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'blue',\n        },\n        bold: true,\n        underline: 'double',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h2: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n        },\n        bold: true,\n        underline: 'single',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h3: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'gray',\n        },\n        bold: true,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const p: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const span: AnsieStyle = {};\n\nexport const li: AnsieStyle = {\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const div: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport interface AnsieTheme {\n    [ValidTags.h1]: AnsieStyle;\n    [ValidTags.h2]: AnsieStyle;\n    [ValidTags.h3]: AnsieStyle;\n    [ValidTags.body]: AnsieStyle;\n    [ValidTags.div]: AnsieStyle;\n    [ValidTags.span]: AnsieStyle;\n    [ValidTags.li]: AnsieStyle;\n    [ValidTags.p]: AnsieStyle;\n    [ValidTags.text]: AnsieStyle;\n    [ValidTags.br]: AnsieStyle;\n}\n\nexport const defaultTheme: AnsieTheme = {\n    h1: { ...cleanStyle, ...h1 },\n    h2: { ...cleanStyle, ...h2 },\n    h3: { ...cleanStyle, ...h3 },\n    body: { ...cleanStyle, ...body },\n    p: { ...cleanStyle, ...p },\n    li: { ...cleanStyle, ...li },\n    span: { ...cleanStyle, ...span },\n    div: { ...cleanStyle, ...div },\n    br: { ...cleanStyle, ...br },\n    text: { ...cleanStyle, ...text },\n};\n\nexport const cleanTheme: AnsieTheme = {\n    h1: cleanStyle,\n    h2: cleanStyle,\n    h3: cleanStyle,\n    body: cleanStyle,\n    p: cleanStyle,\n    li: cleanStyle,\n    span: cleanStyle,\n    div: cleanStyle,\n    br: cleanStyle,\n    text: cleanStyle,\n};\n\nlet _globalTheme: AnsieTheme = defaultTheme;\n\n/**\n * This will set the global theme which is used whenever a theme is\n * not given explicitly.\n * @param theme\n */\nexport function setGlobalTheme(theme: AnsieTheme) {\n    _globalTheme = theme;\n}\n\n/**\n * Gets the globally set theme.\n * @returns\n */\nexport function getGlobalTheme() {\n    return _globalTheme;\n}\n\n/**\n * Sets the global theme to the default theme.\n */\nsetGlobalTheme(defaultTheme);\n",
  "import type { ValidTags } from '../compiler/types';\n\nexport interface AnsieStyle {\n    font?: {\n        color?: {\n            fg?: string;\n            bg?: string;\n        };\n        bold?: boolean;\n        underline?: 'single' | 'double' | 'none' | boolean;\n        italics?: boolean;\n    };\n\n    spacing?: {\n        margin?: number;\n        marginLeft?: number;\n        marginRight?: number;\n        marginTop?: number;\n        marginBottom?: number;\n    };\n\n    list?: {\n        bullet?: string;\n        indent?: number;\n    };\n}\n\nconst cleanStyle: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const body: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n            bg: 'default',\n        },\n        bold: false,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const text: AnsieStyle = body;\n\nexport const br: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n};\n\nexport const h1: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'blue',\n        },\n        bold: true,\n        underline: 'double',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h2: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'default',\n        },\n        bold: true,\n        underline: 'single',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const h3: AnsieStyle = {\n    font: {\n        color: {\n            fg: 'gray',\n        },\n        bold: true,\n        underline: 'none',\n        italics: false,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const p: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const span: AnsieStyle = {};\n\nexport const li: AnsieStyle = {\n    list: {\n        bullet: '* ',\n        indent: 1,\n    },\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport const div: AnsieStyle = {\n    spacing: {\n        margin: 0,\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: 1,\n        marginBottom: 0,\n    },\n};\n\nexport interface AnsieTheme {\n    [ValidTags.h1]: AnsieStyle;\n    [ValidTags.h2]: AnsieStyle;\n    [ValidTags.h3]: AnsieStyle;\n    [ValidTags.body]: AnsieStyle;\n    [ValidTags.div]: AnsieStyle;\n    [ValidTags.span]: AnsieStyle;\n    [ValidTags.li]: AnsieStyle;\n    [ValidTags.p]: AnsieStyle;\n    [ValidTags.text]: AnsieStyle;\n    [ValidTags.br]: AnsieStyle;\n}\n\nexport const defaultTheme: AnsieTheme = {\n    h1: { ...cleanStyle, ...h1 },\n    h2: { ...cleanStyle, ...h2 },\n    h3: { ...cleanStyle, ...h3 },\n    body: { ...cleanStyle, ...body },\n    p: { ...cleanStyle, ...p },\n    li: { ...cleanStyle, ...li },\n    span: { ...cleanStyle, ...span },\n    div: { ...cleanStyle, ...div },\n    br: { ...cleanStyle, ...br },\n    text: { ...cleanStyle, ...text },\n};\n\nexport const cleanTheme: AnsieTheme = {\n    h1: cleanStyle,\n    h2: cleanStyle,\n    h3: cleanStyle,\n    body: cleanStyle,\n    p: cleanStyle,\n    li: cleanStyle,\n    span: cleanStyle,\n    div: cleanStyle,\n    br: cleanStyle,\n    text: cleanStyle,\n};\n\nlet _globalTheme: AnsieTheme = defaultTheme;\n\n/**\n * This will set the global theme which is used whenever a theme is\n * not given explicitly.\n * @param theme\n */\nexport function setGlobalTheme(theme: AnsieTheme) {\n    _globalTheme = theme;\n}\n\n/**\n * Gets the globally set theme.\n * @returns\n */\nexport function getGlobalTheme() {\n    return _globalTheme;\n}\n\n/**\n * Sets the global theme to the default theme.\n */\nsetGlobalTheme(defaultTheme);\n",
  "import { parseAnsieMarkdown, parseAnsieMarkup } from '../parser';\nimport type { CompilerFormat } from './types';\nimport { Compiler } from './Compiler';\nimport {\n    defaultTheme,\n    type AnsieTheme,\n    getGlobalTheme,\n} from '../themes/themes';\n\n/**\n * Compiles the markup into a string.\n * @param optionsOrMarkup Options or the markup to compile (with default options)\n * @returns\n */\nexport function compile(\n    optionsOrMarkup:\n        | string\n        | {\n              markup: string;\n              theme?: AnsieTheme;\n              inputIncludesMarkdown?: boolean;\n              output?: CompilerFormat;\n          },\n) {\n    let theme = getGlobalTheme();\n    let markup = '';\n    let output: CompilerFormat = 'ansi';\n    let inputIncludesMarkdown = true;\n    if (typeof optionsOrMarkup === 'string') {\n        markup = optionsOrMarkup;\n    } else {\n        markup = optionsOrMarkup.markup;\n        theme = optionsOrMarkup.theme ?? theme;\n        output = optionsOrMarkup.output ?? 'ansi';\n        inputIncludesMarkdown = optionsOrMarkup.inputIncludesMarkdown ?? true;\n    }\n\n    const ast = inputIncludesMarkdown\n        ? parseAnsieMarkdown(markup)\n        : parseAnsieMarkup(markup);\n    if (ast) {\n        const compiler = new Compiler(ast, theme || defaultTheme);\n        return compiler.compile({ format: output, theme });\n    } else {\n        return '';\n    }\n}\n",
  "import { compile } from '../compiler/compile';\n\n/**\n * This is a template tag function that will compile the template string into ansi code from\n * a template string that uses ansie markup.\n * @returns A string of ansi-compatible text.\n */\nexport function tpl(\n    strings: TemplateStringsArray,\n    ...keys: (number | string)[]\n) {\n    const final = strings.reduce((result, string, i) => {\n        const value = keys[i] || '';\n        if (typeof value === 'number') {\n            return result + string + value;\n        }\n        return result + string + value;\n    }, '');\n\n    return compile({ markup: final });\n}\n",
  "import util from 'util';\nimport { compile } from '../compiler/compile';\n\nexport const ansieConsole = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.log(compile(logWithMarkup));\n    },\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.error(compile(logWithMarkup));\n    },\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    info: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.info(compile(logWithMarkup));\n    },\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    warn: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.warn(compile(logWithMarkup));\n    },\n};\n",
  "import util from 'util';\nimport { compile } from '../compiler/compile';\n\nexport const ansieConsole = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.log(compile(logWithMarkup));\n    },\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.error(compile(logWithMarkup));\n    },\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    info: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.info(compile(logWithMarkup));\n    },\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    warn: (message?: any, ...optionalParams: any[]) => {\n        const logWithMarkup = util.format(message, ...optionalParams);\n        console.warn(compile(logWithMarkup));\n    },\n};\n",
  "import { compile } from './compiler/compile';\nimport { tpl } from './template';\nimport { ansieConsole } from './console/console';\nimport { getGlobalTheme, setGlobalTheme } from './themes/themes';\n\nexport default {\n    compile,\n    tpl,\n    console: ansieConsole,\n    setGlobalTheme,\n    getGlobalTheme,\n};\n"
  ],
  "mappings": "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U;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AAEd,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAAU;AACd,MAAI,UAA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",
  "debugId": "0BD080CB58BE9F8864756e2164756e21",
  "names": []
}